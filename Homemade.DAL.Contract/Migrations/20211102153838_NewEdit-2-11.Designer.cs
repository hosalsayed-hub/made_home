// <auto-generated />
using System;
using Homemade.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Homemade.DAL.Contract.Migrations
{
    [DbContext(typeof(HomemadeContext))]
    [Migration("20211102153838_NewEdit-2-11")]
    partial class NewEdit211
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRedirect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMSSentToUser")
                        .HasColumnType("bit");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TransactionCard", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.Property<int>("TransactionCardLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionCardLogGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TransactionCardTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("TransactionCardLogID");

                    b.HasIndex("TransactionCardTransactionID");

                    b.ToTable("TransactionCardLog", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "381a2335-f978-4a8d-a9d2-d2c2380078f1",
                            Name = "Admin",
                            RoleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "ad81c36e-6748-460c-ba6a-07ee0ae9f6b8",
                            Name = "Vendor",
                            RoleTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "87da7df2-f332-424d-bb43-fdd55320306c",
                            Name = "Customer",
                            RoleTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "490011b2-4acd-44ac-b320-e499b693c87a",
                            Name = "Employee",
                            RoleTypeId = 2
                        });
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.Property<int>("CustomerBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerBlanceID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerBalance", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.Property<int>("CustomerFavouritesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerFavouritesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerFavouritesID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerFavourites", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Property<int>("CustomerLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressTypesID")
                        .HasColumnType("int");

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerLocationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerfiy")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerLocationID");

                    b.HasIndex("AddressTypesID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerLocation", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Property<int>("CustomersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomersID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DeliverySetting", b =>
                {
                    b.Property<int>("DeliverySettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseFare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliverySettingGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DriverCommision")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinKM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OverKmFare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DeliverySettingID");

                    b.HasIndex("UserId");

                    b.ToTable("DeliverySetting", "Driver");

                    b.HasData(
                        new
                        {
                            DeliverySettingID = 1,
                            BaseFare = 20m,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliverySettingGuid = new Guid("4207a2d2-4191-4a1d-995b-fe9154db3b06"),
                            DriverCommision = 80m,
                            IsDeleted = false,
                            IsEnable = true,
                            MinKM = 3m,
                            OverKmFare = 5m,
                            Tax = 0m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Property<int>("DriverBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverBlance", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverSupport", b =>
                {
                    b.Property<int>("DriverSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverSupportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpQuestionsID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverSupportID");

                    b.HasIndex("DriversID");

                    b.HasIndex("HelpQuestionsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverSupport", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Property<int>("DriversID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("BirthDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CarLicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarPictrue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HijiriInsuranceEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriBirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriIDDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IDDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("InsuranceEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenTransaction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PCOEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PCOEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PCOHijriEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberStc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PhoneType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PrivateHijriLicenseEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrivateLicenseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrivateLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PrivateLicenseTypeEndDate")
                        .HasColumnType("tinyint");

                    b.Property<string>("RequestNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VerifyStc")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifyStcDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DriversID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.Property<int>("TranLogSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<Guid>("TranLogSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionSTCPayID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TranLogSTCPayID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionSTCPayID");

                    b.HasIndex("UserId");

                    b.ToTable("TranLogSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Property<int>("TransactionSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquriyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentOrderReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STCStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionSTCPayID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("TransactionTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionType", "Driver");

                    b.HasData(
                        new
                        {
                            TransactionTypeID = 1,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "شحن رصيد بواسطة الإدارة",
                            NameEN = "Deposit by Operation",
                            TransactionTypeGuid = new Guid("dfe5a2ef-82f6-4084-a139-3c1af6821c68"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 2,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "سحب - جزاء",
                            NameEN = "Withdrawal",
                            TransactionTypeGuid = new Guid("b666a449-6ab5-4c87-81ff-0b501fb4fbb4"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 3,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "علاوة",
                            NameEN = "Bouns",
                            TransactionTypeGuid = new Guid("9b100a0c-ea6e-43bc-a1cf-fdfd78790b90"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 4,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "عقوبة",
                            NameEN = "Punishment",
                            TransactionTypeGuid = new Guid("873628ba-12ef-4c36-b57f-c3ffd19d06cf"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 5,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع للكابتن STC",
                            NameEN = "Pay to Captain STC",
                            TransactionTypeGuid = new Guid("f1766e5b-3a08-459f-a66d-ae928c064017"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 6,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "توصيل طلب",
                            NameEN = "Delivery Order",
                            TransactionTypeGuid = new Guid("77a117f7-2e91-4bc9-9c22-812c80ceec9f"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 7,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع طلب",
                            NameEN = "Pay Order",
                            TransactionTypeGuid = new Guid("ba8fa0f5-6c06-4596-86c7-dc55bf10136f"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 8,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع فاتورة",
                            NameEN = "Pay Invoice",
                            TransactionTypeGuid = new Guid("834a7259-85ce-4b7f-bb3b-4165a7f0fd70"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 9,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "تحويل كاش",
                            NameEN = "Cash Transfer",
                            TransactionTypeGuid = new Guid("3f0df80e-044b-4966-b91a-2d93635f5337"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.Property<int>("EntityEmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDateHijri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDateMilady")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityEmpGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobsID")
                        .HasColumnType("int");

                    b.Property<string>("LastNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MidNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityEmpID");

                    b.HasIndex("CityID");

                    b.HasIndex("JobsID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees", "Emp");

                    b.HasData(
                        new
                        {
                            EntityEmpID = 1,
                            AddressAR = "الاسماعيليه",
                            AddressEN = "ismailia",
                            BirthDateHijri = "",
                            BloodTypeId = 1,
                            CityID = 1,
                            CreateDate = new DateTime(2021, 11, 2, 17, 38, 34, 697, DateTimeKind.Local).AddTicks(2469),
                            Email = "SystemUser@Admin.com",
                            EnableDate = new DateTime(2021, 11, 2, 17, 38, 34, 697, DateTimeKind.Local).AddTicks(2878),
                            EntityEmpGuid = new Guid("2299447c-fc61-4aa4-ba03-8c91e4f4b2d5"),
                            FileNo = "123321",
                            FirstNameAR = "احمد",
                            FirstNameEN = "Ahmed",
                            Gender = 1,
                            IDNo = "",
                            IsDeleted = false,
                            IsEnable = true,
                            JobsID = 1,
                            LastNameAR = "حسين",
                            LastNameEN = "Hussien",
                            Lat = "",
                            Lng = "",
                            MidNameAR = "سيد",
                            MidNameEN = "Sayed",
                            MobileNo = "0595489633",
                            NationalityID = 1,
                            Notes = "",
                            PhoneNumber = "",
                            Photo = "",
                            UserEnable = 1,
                            UserId = 1,
                            Zoom = ""
                        });
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailsID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceDetails", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceHistory", b =>
                {
                    b.Property<int>("InvoiceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InvoiceHistoryID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Property<int>("InvoiceMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceMasterGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("PerHomeMade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("InvoiceMaster", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ListTransfer", b =>
                {
                    b.Property<int>("ListTransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListTransferGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ListTransferID");

                    b.HasIndex("BanksID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.ToTable("ListTransfer", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NotificationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderRateID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int?>("ProdQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int?>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProdQuestionID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Notification", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.Property<int>("OrderHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderHistoryID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderItemsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProdImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderItemsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItems", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.Property<int>("OrderPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderPromoID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Property<int>("OrderRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderRateGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("RateDelivery")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RateOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderRate", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Property<int>("OrderVendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaptainPaidID")
                        .HasColumnType("int");

                    b.Property<int>("CaptainTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryVatPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryVatValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DriverCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderVendorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<decimal>("PackageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("PackagePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerHome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("OrderVendorID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PackageID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("OrderVendor", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Property<int>("OrdersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerLocationID")
                        .HasColumnType("int");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrdersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrdersID");

                    b.HasIndex("CustomerLocationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Property<int>("ProdQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProdQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProdQuestionID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderQuestion", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Property<int>("PromoCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double>("LimitCount")
                        .HasColumnType("float");

                    b.Property<Guid>("PromoCodeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PromoType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("PromoCode", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.Property<int>("VendorPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorPromoID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Property<int>("PermissionActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionActionID");

                    b.ToTable("PermissionAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionActionID = 1,
                            PermissionActionGuid = new Guid("c1d21d85-8816-4702-bcc5-0d1a61da797b"),
                            PermissionActionNameAr = "عرض",
                            PermissionActionNameEn = "View"
                        },
                        new
                        {
                            PermissionActionID = 2,
                            PermissionActionGuid = new Guid("1cd57cba-3ba0-4727-85d6-02e559af3ba3"),
                            PermissionActionNameAr = "اضافة",
                            PermissionActionNameEn = "Insert"
                        },
                        new
                        {
                            PermissionActionID = 3,
                            PermissionActionGuid = new Guid("be18b7ee-5661-42f3-a894-ca3d003193ef"),
                            PermissionActionNameAr = "تعديل",
                            PermissionActionNameEn = "Update"
                        },
                        new
                        {
                            PermissionActionID = 4,
                            PermissionActionGuid = new Guid("c77a8e58-3381-453b-a136-48db3efaa14f"),
                            PermissionActionNameAr = "حذف",
                            PermissionActionNameEn = "Delete"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Property<int>("PermissionControllerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionControllerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionControllerNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionControllerNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionControllerID");

                    b.ToTable("PermissionController", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerID = 1,
                            PermissionControllerGuid = new Guid("e5bacbd6-afe7-4a65-b78c-1f0a4a0d2157"),
                            PermissionControllerNameAr = "الصلاحيات",
                            PermissionControllerNameEn = "Permission"
                        },
                        new
                        {
                            PermissionControllerID = 2,
                            PermissionControllerGuid = new Guid("e56c75e7-dc56-4257-9ee7-c6b9515f6e4f"),
                            PermissionControllerNameAr = "الدور",
                            PermissionControllerNameEn = "Role"
                        },
                        new
                        {
                            PermissionControllerID = 3,
                            PermissionControllerGuid = new Guid("001aa419-6443-47ef-a4b2-8f140775da8a"),
                            PermissionControllerNameAr = "الدولة",
                            PermissionControllerNameEn = "Country"
                        },
                        new
                        {
                            PermissionControllerID = 4,
                            PermissionControllerGuid = new Guid("61948f0a-210d-4368-bd05-8df92442cf5b"),
                            PermissionControllerNameAr = "المنطقة",
                            PermissionControllerNameEn = "Region"
                        },
                        new
                        {
                            PermissionControllerID = 5,
                            PermissionControllerGuid = new Guid("75dce34a-0dde-4408-bc36-0188234fa4e6"),
                            PermissionControllerNameAr = "المدينة",
                            PermissionControllerNameEn = "City"
                        },
                        new
                        {
                            PermissionControllerID = 6,
                            PermissionControllerGuid = new Guid("85864211-cbfe-48b9-8611-e59100407022"),
                            PermissionControllerNameAr = "الوظائف",
                            PermissionControllerNameEn = "Jobs"
                        },
                        new
                        {
                            PermissionControllerID = 7,
                            PermissionControllerGuid = new Guid("82c8a4cd-d884-4eb7-a276-522eb1df8211"),
                            PermissionControllerNameAr = "الاقسام",
                            PermissionControllerNameEn = "Departments"
                        },
                        new
                        {
                            PermissionControllerID = 8,
                            PermissionControllerGuid = new Guid("b26be077-ac44-48cd-8c4a-2cb04d353bb0"),
                            PermissionControllerNameAr = "الموظفين",
                            PermissionControllerNameEn = "Employees"
                        },
                        new
                        {
                            PermissionControllerID = 9,
                            PermissionControllerGuid = new Guid("ac2d4a96-ea19-4357-a230-602916600752"),
                            PermissionControllerNameAr = "الجنسية",
                            PermissionControllerNameEn = "Nationality"
                        },
                        new
                        {
                            PermissionControllerID = 10,
                            PermissionControllerGuid = new Guid("334e1e56-93a5-4e08-a4d4-7edc447c37c9"),
                            PermissionControllerNameAr = "اعدادات الدور",
                            PermissionControllerNameEn = "Role Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 11,
                            PermissionControllerGuid = new Guid("3f875495-5a46-4354-ac58-2de3d16d5d7e"),
                            PermissionControllerNameAr = "الاعدادات",
                            PermissionControllerNameEn = "Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 12,
                            PermissionControllerGuid = new Guid("4e6df746-88e8-4f48-828b-f88c597324bc"),
                            PermissionControllerNameAr = "البنوك",
                            PermissionControllerNameEn = "Bank"
                        },
                        new
                        {
                            PermissionControllerID = 13,
                            PermissionControllerGuid = new Guid("d555751e-4c6e-4577-9488-f0e28567ff6a"),
                            PermissionControllerNameAr = "طرق الدفع",
                            PermissionControllerNameEn = "PaymentWay"
                        },
                        new
                        {
                            PermissionControllerID = 14,
                            PermissionControllerGuid = new Guid("1296b588-4e07-483c-9170-ce01e2fd1a06"),
                            PermissionControllerNameAr = "الأنشطة",
                            PermissionControllerNameEn = "Activity"
                        },
                        new
                        {
                            PermissionControllerID = 15,
                            PermissionControllerGuid = new Guid("69d525e6-73dc-4993-affc-e5edd2842334"),
                            PermissionControllerNameAr = "الأحياء",
                            PermissionControllerNameEn = "Block"
                        },
                        new
                        {
                            PermissionControllerID = 16,
                            PermissionControllerGuid = new Guid("ce6823b5-6a51-48d4-9278-2760f7e208df"),
                            PermissionControllerNameAr = "باقات التجار",
                            PermissionControllerNameEn = "Package"
                        },
                        new
                        {
                            PermissionControllerID = 17,
                            PermissionControllerGuid = new Guid("71399e9b-5f70-4d85-87f3-54298238641c"),
                            PermissionControllerNameAr = "حالات الدفع",
                            PermissionControllerNameEn = "PaymentStatus"
                        },
                        new
                        {
                            PermissionControllerID = 18,
                            PermissionControllerGuid = new Guid("491b8569-a489-4cfd-a34f-73c183fdada6"),
                            PermissionControllerNameAr = "اعدادت الشركه",
                            PermissionControllerNameEn = " Company Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 19,
                            PermissionControllerGuid = new Guid("542543f9-c0d7-4f48-98b9-0ba2f620e9f8"),
                            PermissionControllerNameAr = "اعدادت الدفع",
                            PermissionControllerNameEn = "Payment Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 20,
                            PermissionControllerGuid = new Guid("fbd5f64d-cc53-42a7-a543-b29a22233470"),
                            PermissionControllerNameAr = "التصنيفات الرئسيه",
                            PermissionControllerNameEn = "Main categories"
                        },
                        new
                        {
                            PermissionControllerID = 21,
                            PermissionControllerGuid = new Guid("7b8ce39e-ae3e-4f05-869e-4f3d60292b8c"),
                            PermissionControllerNameAr = "البنرات",
                            PermissionControllerNameEn = "Sliders"
                        },
                        new
                        {
                            PermissionControllerID = 22,
                            PermissionControllerGuid = new Guid("ffe4d6f4-b887-4a84-8b07-2a20f2a40323"),
                            PermissionControllerNameAr = "شركات الشحن",
                            PermissionControllerNameEn = "Shipping Company"
                        },
                        new
                        {
                            PermissionControllerID = 23,
                            PermissionControllerGuid = new Guid("cb9973dc-32ce-4267-8b5e-80af7d1e57c2"),
                            PermissionControllerNameAr = "الاستفسارات",
                            PermissionControllerNameEn = "Inqueries"
                        },
                        new
                        {
                            PermissionControllerID = 24,
                            PermissionControllerGuid = new Guid("0b5156c3-b26d-43cb-bd1e-0512a42831cc"),
                            PermissionControllerNameAr = "الصفحات الرئيسية",
                            PermissionControllerNameEn = "Main Pages"
                        },
                        new
                        {
                            PermissionControllerID = 25,
                            PermissionControllerGuid = new Guid("bc1a582a-20dc-40dd-aab3-e8bb3068521a"),
                            PermissionControllerNameAr = "المتاجر",
                            PermissionControllerNameEn = "Vendors"
                        },
                        new
                        {
                            PermissionControllerID = 26,
                            PermissionControllerGuid = new Guid("52186410-19f2-4471-9bfb-b8ce3b7e2f16"),
                            PermissionControllerNameAr = "الزبائن",
                            PermissionControllerNameEn = "Customer"
                        },
                        new
                        {
                            PermissionControllerID = 27,
                            PermissionControllerGuid = new Guid("1363f566-9f23-458a-bd8b-325d192b6800"),
                            PermissionControllerNameAr = "المنتجات",
                            PermissionControllerNameEn = "Product"
                        },
                        new
                        {
                            PermissionControllerID = 28,
                            PermissionControllerGuid = new Guid("514be8d8-bc9f-4a80-8393-25cec5daed9a"),
                            PermissionControllerNameAr = "أنواع العناوين",
                            PermissionControllerNameEn = "Address Types"
                        },
                        new
                        {
                            PermissionControllerID = 29,
                            PermissionControllerGuid = new Guid("7b4e5aa2-f7d4-473c-b462-00b7d6f0203d"),
                            PermissionControllerNameAr = "الكلمات المفتاحية",
                            PermissionControllerNameEn = "KeyWords"
                        },
                        new
                        {
                            PermissionControllerID = 30,
                            PermissionControllerGuid = new Guid("2363ac47-63ed-4c82-b33f-f409aa0304d3"),
                            PermissionControllerNameAr = "منتجات الاوبريشن",
                            PermissionControllerNameEn = "Product Operation"
                        },
                        new
                        {
                            PermissionControllerID = 31,
                            PermissionControllerGuid = new Guid("30f3f779-8527-4eff-9b99-67a6dcffc40c"),
                            PermissionControllerNameAr = "طلبات الاوبريشن",
                            PermissionControllerNameEn = "Operation Orders"
                        },
                        new
                        {
                            PermissionControllerID = 32,
                            PermissionControllerGuid = new Guid("d429adb2-6bef-4caf-9e85-c80390ca6302"),
                            PermissionControllerNameAr = "طلبات المتجر",
                            PermissionControllerNameEn = "Vendor Orders"
                        },
                        new
                        {
                            PermissionControllerID = 33,
                            PermissionControllerGuid = new Guid("42d4379e-2e4a-4fae-9d67-fd2a9153ea90"),
                            PermissionControllerNameAr = "الفروع",
                            PermissionControllerNameEn = "Branches"
                        },
                        new
                        {
                            PermissionControllerID = 34,
                            PermissionControllerGuid = new Guid("0f2fd299-5517-450b-82e0-b132290568ef"),
                            PermissionControllerNameAr = "اكواد الخصم",
                            PermissionControllerNameEn = "Promo Code"
                        },
                        new
                        {
                            PermissionControllerID = 35,
                            PermissionControllerGuid = new Guid("d6afcdd9-3236-4ff7-b76e-a8d4eb213a2a"),
                            PermissionControllerNameAr = "سجل الاجازات",
                            PermissionControllerNameEn = "Vac History"
                        },
                        new
                        {
                            PermissionControllerID = 36,
                            PermissionControllerGuid = new Guid("04349292-c76a-43c3-8284-fbd97aacf5cf"),
                            PermissionControllerNameAr = "سجل ايقاف الاشتراكات",
                            PermissionControllerNameEn = "Enable History"
                        },
                        new
                        {
                            PermissionControllerID = 37,
                            PermissionControllerGuid = new Guid("34768c79-7878-4b41-89e6-7852e04fcf23"),
                            PermissionControllerNameAr = "الطلبات الجديده للسائق",
                            PermissionControllerNameEn = "Driver New Requests"
                        },
                        new
                        {
                            PermissionControllerID = 38,
                            PermissionControllerGuid = new Guid("a6ae081e-7aa1-4a6e-b89f-bdec4d37b131"),
                            PermissionControllerNameAr = "الطلبات الملغية للسائق",
                            PermissionControllerNameEn = "Driver Rejected Requests"
                        },
                        new
                        {
                            PermissionControllerID = 39,
                            PermissionControllerGuid = new Guid("95a736d2-7651-4b69-8905-547efede0c01"),
                            PermissionControllerNameAr = "طلبات انتظار التفعيل للسائق",
                            PermissionControllerNameEn = "Driver Waiting Activation"
                        },
                        new
                        {
                            PermissionControllerID = 40,
                            PermissionControllerGuid = new Guid("d6887e62-6b92-4814-ba33-a52074b42dce"),
                            PermissionControllerNameAr = "طلبات تحت المراجعة للسائق",
                            PermissionControllerNameEn = "Driver Under Requests"
                        },
                        new
                        {
                            PermissionControllerID = 41,
                            PermissionControllerGuid = new Guid("10db69d2-1758-4eea-b3f2-36b7bf0a912a"),
                            PermissionControllerNameAr = "الفواتير",
                            PermissionControllerNameEn = "Invoices"
                        },
                        new
                        {
                            PermissionControllerID = 42,
                            PermissionControllerGuid = new Guid("b8a9f094-d4cb-47f5-965c-0975fc3d3275"),
                            PermissionControllerNameAr = "فواتير المتجر",
                            PermissionControllerNameEn = "Store Invoice"
                        },
                        new
                        {
                            PermissionControllerID = 43,
                            PermissionControllerGuid = new Guid("7660bd98-fe14-4bc7-805e-e4c408e0f154"),
                            PermissionControllerNameAr = "الخصم و الضريبة",
                            PermissionControllerNameEn = "Vat Discount"
                        },
                        new
                        {
                            PermissionControllerID = 44,
                            PermissionControllerGuid = new Guid("3843eb8b-4399-49a9-8148-354d2b0d14f6"),
                            PermissionControllerNameAr = "ماليات الكباتن",
                            PermissionControllerNameEn = "Captain Financial"
                        },
                        new
                        {
                            PermissionControllerID = 45,
                            PermissionControllerGuid = new Guid("04a2b32d-fa51-4586-bf22-3dc930bad69d"),
                            PermissionControllerNameAr = "ارسال رسالة",
                            PermissionControllerNameEn = "Send Message"
                        },
                        new
                        {
                            PermissionControllerID = 46,
                            PermissionControllerGuid = new Guid("9dc70fe2-b7c6-469e-aef6-4328fa07f9ca"),
                            PermissionControllerNameAr = "المدن المغطاة",
                            PermissionControllerNameEn = "Cities Covered"
                        },
                        new
                        {
                            PermissionControllerID = 47,
                            PermissionControllerGuid = new Guid("c61fe546-596f-4967-b95b-7ca276c0619e"),
                            PermissionControllerNameAr = "مناطق الكابتن",
                            PermissionControllerNameEn = "Captain Zone"
                        },
                        new
                        {
                            PermissionControllerID = 48,
                            PermissionControllerGuid = new Guid("725f6a39-cbff-4c04-bf57-039ca54f1413"),
                            PermissionControllerNameAr = "تعيين سائق",
                            PermissionControllerNameEn = "Assign Driver"
                        },
                        new
                        {
                            PermissionControllerID = 49,
                            PermissionControllerGuid = new Guid("74f9860b-60ac-4ffa-a55e-fc9be73f9238"),
                            PermissionControllerNameAr = "عملاء المتاجر",
                            PermissionControllerNameEn = "Vendor Customer"
                        },
                        new
                        {
                            PermissionControllerID = 50,
                            PermissionControllerGuid = new Guid("5b2e773e-7499-4848-b100-4603d93f35c0"),
                            PermissionControllerNameAr = "سجل اجازات المتاجر",
                            PermissionControllerNameEn = "Vendor Vac History"
                        },
                        new
                        {
                            PermissionControllerID = 51,
                            PermissionControllerGuid = new Guid("e6e8a834-ff66-424c-81b7-67ad9400ac3c"),
                            PermissionControllerNameAr = "سجل ايقاف اشتراكات المتاجر",
                            PermissionControllerNameEn = "Vendor Enable History"
                        },
                        new
                        {
                            PermissionControllerID = 52,
                            PermissionControllerGuid = new Guid("85227edd-4236-4a94-aa85-ffe1ec7c52a1"),
                            PermissionControllerNameAr = "اسئلة المنتج",
                            PermissionControllerNameEn = "Product Question"
                        },
                        new
                        {
                            PermissionControllerID = 53,
                            PermissionControllerGuid = new Guid("60f0a933-4fc2-4c1e-9824-d8a02ec97ca0"),
                            PermissionControllerNameAr = "تقييم الطلب",
                            PermissionControllerNameEn = "Order Rate"
                        },
                        new
                        {
                            PermissionControllerID = 54,
                            PermissionControllerGuid = new Guid("cdf32ff1-e540-42da-8273-d469067eb1d6"),
                            PermissionControllerNameAr = "اسئلة المنتج للمتجر",
                            PermissionControllerNameEn = "Vendor Product Question"
                        },
                        new
                        {
                            PermissionControllerID = 55,
                            PermissionControllerGuid = new Guid("67d6586b-a525-49d8-ba40-328b67cbd833"),
                            PermissionControllerNameAr = "تقييم الطلب للمتجر",
                            PermissionControllerNameEn = "Vendor Order Rate"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Property<int>("PermissionControllerActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionControllerActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionControllerID")
                        .HasColumnType("int");

                    b.HasKey("PermissionControllerActionID");

                    b.HasIndex("PermissionActionID");

                    b.HasIndex("PermissionControllerID");

                    b.ToTable("PermissionControllerAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerActionID = 1,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e707ed66-e946-4dfc-9577-a986bd7569bc"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 2,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0ecc7393-66f2-417d-a545-f891881da5c7"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 3,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("faf1f981-51b3-4f82-b8c2-ba3400402937"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 4,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5c32d2b9-5caa-4b86-b5ae-2091dfe9d9cd"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 5,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("69e2ce1c-9bde-4e41-8358-da8d9c2176f9"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 6,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a750ec8c-0734-4307-9742-1021f9d05d58"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 7,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("52a518d1-962e-4394-9641-ef7f703df2ae"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 8,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6311d336-c19a-46bd-89c8-d3e2dd20efab"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 9,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d24c4eac-06cf-4562-9faf-9b80bcfff1be"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 10,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("82c00ea4-84c5-4d94-9e3d-b9ad045d69af"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 11,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f25e0858-9908-4991-a0a2-56a5fec0fd2a"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 12,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("f81d5153-a4be-4b80-9ca8-57c22a0b3fbc"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 13,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("f22bc967-6a33-4ae3-a373-abac70e4bcff"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 14,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d00fff68-1a8d-411d-adc8-30f4d6354efd"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 15,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d15eaacd-14e1-4bec-9dd3-23cd494c547b"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 16,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("04d86c40-88b0-41fa-b221-d8942518960e"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 17,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("cd776471-bd19-448d-860b-25126c463544"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 18,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("61e326f2-92fb-450b-9844-12532380d25a"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 19,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("b62eb88b-8b52-4ef6-9ba9-06ce2c921841"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 20,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("94798558-fef0-4e73-a1f3-6580afb9906a"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 21,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("641c67c6-9a24-4602-8a6e-bb12b4dc6d34"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 22,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("adfbc8ca-acd5-46da-bad8-1072a51c7d55"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 23,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a3d245af-c9a7-4012-99ab-c5385ac51aea"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 24,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("16686f39-90e3-434c-a0f6-c4d4ab3c566d"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 25,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("66ec68f8-e01f-4b4f-afc2-fbc49f36495a"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 26,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("cb03a3fd-34a9-42c1-a00c-d233da93fdef"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 27,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("012dac7d-5c17-4f96-a4bd-7ec15ea16138"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 28,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("aedbcc62-b980-450a-a592-b8491a2501b9"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 29,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a54f2bef-2cdd-4658-9443-421df4929e5d"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 30,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c82e6a0b-46ec-4e18-ab87-34a01a1a4fbe"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 31,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("93e97405-f0f6-4893-a4cf-89a8b91ad799"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 32,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2e2caa18-668c-43fb-b603-51c6e1b13d14"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 33,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8044f44e-f923-46a8-847a-1ed51d6d235f"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 34,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("acbd1736-54cf-45eb-af65-58b1e62564da"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 35,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("073c7a50-5c34-46d3-bdab-f3d8b94afc28"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 36,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d807231d-f8ef-4c59-ae14-4c0fc6d6deac"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 37,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9b5f2f08-7d29-4751-a84d-35ed146b5939"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 38,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("13068527-9a47-4bf2-992a-921e08da1be6"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 39,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8404fb02-9577-459b-bfdf-f282b15e8cab"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 40,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8c3bd76e-f4ea-4a45-8e23-fe3d1ea6c9a5"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 41,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("38f772ba-3071-47e3-941d-0b6ec5839a46"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 42,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3802df54-07b0-4c0d-b3d2-38dddb7992eb"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 43,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5d6b8b8f-6424-4314-bacc-8571a009e270"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 44,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("fab1245f-c77f-43df-ad64-12392ce94a7c"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 45,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9d24f028-55b0-43ce-999b-c41464f094a7"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 46,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("df65b497-6db2-4970-afa8-8063b062bdfe"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 47,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("20031f0f-68a5-411d-87fe-8e28eba1ff47"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 48,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("57eb68a8-cbe0-4601-b7cb-399dd73c3e72"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 49,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2afc1061-dc2e-4a34-8bee-0e7b4925a7eb"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 50,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5c5d22c0-2b96-4c57-a78e-31642d881567"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 51,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("ab5d64d1-36ea-4794-9402-aae2bbdee80f"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 52,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4137c2bd-30e3-4595-92e3-bc472ce9372f"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 53,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b549c5d9-32a7-4175-9b58-e525a5a3a3d2"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 54,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("93aec0b5-64c9-4367-98cf-65a16769bad4"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 55,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5183515a-9c23-4dbd-9eff-d52248e19077"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 56,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("11518443-c2e1-484f-97f7-45b190578d17"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 57,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ca8b376d-a505-4ffb-ab98-f9ab3375e926"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 58,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d9b7a2b4-3009-4731-b1ae-a55ec85494d1"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 59,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("9905c9ed-5b5e-4171-97ea-4e4f7138e0c6"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 60,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e6593cf4-0da0-4e1d-bef8-78395af28ceb"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 61,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ca8ff207-1dd3-4864-8c50-5b9864e1a226"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 62,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("fa8a5d85-eb1e-4b33-85fd-988880f811cf"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 63,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2a117046-37d6-46d2-b726-819cdf49645f"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 64,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6b718153-a5c9-4fa3-8e8e-939e3f55a6d8"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 65,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("eae27148-b7b4-4144-bb7c-50e160a8c062"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 66,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3c20e106-8b2d-4761-898e-fdc8f8a6fe76"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 67,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f056972b-c8ec-45dc-80ca-737053d0a3c4"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 68,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("0ebae921-7d28-4cea-88a2-54c0f309e991"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 69,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d2aaa6e7-46e8-4285-97e0-9c6784a2a414"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 70,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("18ac5873-338d-47a6-af8c-583fecfc3ad2"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 71,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("18a01cd9-fd57-4adb-9241-df137050362d"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 72,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("a8288f07-65f2-479a-aaad-1eca0b7b9234"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 73,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("89a1d88d-508d-4733-bd5d-21d718e6e27d"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 74,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("fc2481ae-cfa6-4f49-b5b4-3185558eb5ca"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 75,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("1ac1dd19-d69c-4096-bfce-cf5bb9c1a43c"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 76,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("840227a5-b75b-4f30-b550-301f43eaee0e"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 77,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("861c2af7-006a-4032-8105-e02acf973374"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 78,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("b8e8603c-a888-48f7-917e-caf1c0164c73"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 79,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7b913dcf-b9f2-4568-bf62-0ab17e15b681"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 80,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d54e23cd-d00b-4777-a23f-561f59eda8a4"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 81,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("65e421c2-98e7-43e5-a7aa-8fe9b99040f1"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 82,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("aef14f60-a1c3-4300-b268-09c423835d8e"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 83,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("38c514e1-82ac-4899-96e8-512b086b06e5"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 84,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4caf885a-dd5c-4c73-a365-e28a37a1c4ba"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 85,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9b53d149-8af0-4179-b638-83a45367bdc1"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 86,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("2d375a94-2d22-42c7-8120-791d029907f0"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 87,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("ecf65a3c-856d-4a4d-8f99-e714632c943a"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 88,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("1e5f330d-ea7c-4b46-96b6-bc02f27f7fe0"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 89,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("f5f43688-e28c-45d5-92d9-d83fcaf9b368"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 90,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("1f7bbb96-11e9-454d-9f6e-690e07044194"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 91,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("bb324524-7349-4a5d-9dd9-db3a00397ef2"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 92,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e16fd50c-adc9-4d0b-8be2-76b07a9cb22e"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 93,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("29cdd9ca-c34f-4cbb-96e5-05e6445a3365"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 94,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a801d65c-aecd-427f-86b7-b6f0b1ca94a3"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 95,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("0662d259-5971-4aba-8f61-c44fe82b33b6"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 96,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4a6af1d4-2b84-4db8-a08c-0e52fdde45a4"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 97,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("77d6be73-dd5b-414c-bc61-625019c6b9c1"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 98,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("17277015-a05a-4dfb-9278-15ee7d735b30"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 99,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("51869508-3b4f-4f91-9779-56c2b8e3e393"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 100,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("12864b2b-4479-4809-88e7-6446bc42b022"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 101,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e070a806-1595-47f4-ba80-2c26876b27d0"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 102,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("bfff3aee-1d71-4b22-9148-2d037f0092d9"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 103,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("63b4779e-1076-4a4e-b0c2-8f6b214a058c"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 104,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("cd342431-5e6f-46cf-ba8c-502265d4078b"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 105,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b52eab3b-bfcb-4108-990c-8b45e01cc27a"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 106,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5a925bd2-b21a-4e0a-a2df-2aefc56dc2f7"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 107,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("0f998e8c-b398-48d9-bffa-0f2bbfcbb179"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 108,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("19beb5e5-ab55-4138-aedb-5b04f8b282e9"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 109,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9c78f9d5-706f-4685-b6ff-d5021b532baa"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 110,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5f4da203-3c2a-4ee9-aa75-bd2787db9291"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 111,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5dc5aea1-ee52-45de-898b-657f9b30575e"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 112,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("034f32ed-d0b6-4c79-86b6-2f30b2c2b078"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 113,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("88feeece-217f-4d72-8e4e-05b99fb33e77"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 114,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("33965bd1-f743-486d-9197-83333445b949"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 115,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d4a8e00e-bea0-4118-a532-5216729a3448"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 116,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2162c716-307e-42dc-857d-0277ac17dd43"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 117,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9b25906b-5306-42c9-886d-6f80adad2048"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 118,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5b2fd68f-cb99-4c15-a67e-999d29665e2f"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 119,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("16e7738e-033a-4946-8a84-46604da0ab81"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 120,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e7ae3cc7-84e1-4b02-8a49-df125fad5b28"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 121,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("4c5510b7-28ea-421f-be56-4e88b8232269"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 122,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0a0270d7-7b70-4403-9c4d-fc4b90db3dbe"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 123,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("68120308-d2ee-46ad-abf8-68d3cc3546b1"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 124,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("042b17eb-9f04-412b-ab42-19b876a17d8f"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 125,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5a77c91e-ddf8-4bcc-8f31-543716af0b16"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 126,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("14edfbba-373a-429f-a7b8-380a676f47ef"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 127,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("ddcd53f2-6cca-4b07-9b66-ea2ce8fbc74f"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 128,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("887854ba-50bc-4641-8817-1ce3080c60f7"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 129,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a7ba8b1f-1047-4e78-a509-fe329ead735e"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 130,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("11c9efc1-1946-4132-81d3-e6702efd3b9c"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 131,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("68868839-0672-4883-ae3b-14492b270781"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 132,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("fb87e2bc-786b-4c6e-bab2-6abaf551561b"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 133,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2b414833-4f50-41e1-960e-c73589e783b9"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 134,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("19d80a47-7770-4ee5-8241-a124fcadae43"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 135,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("392c7eb5-5d55-41c3-ab65-1e1bdb310bc1"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 136,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("1b4b6d99-fcdf-4ca9-8415-0f6c594736a1"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 137,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("72268e51-2674-446f-9ce9-6e64ac4dca52"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 138,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("bbc14402-7a5c-4ca1-950b-c2820c32d5d3"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 139,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("56a2d79e-5c20-4298-b500-2321ce61e2d2"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 140,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("43a34f0f-f82f-449d-a5d5-5bd10732460d"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 141,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ee0dd73c-4d5b-4cbd-b98b-5df3f6f7b841"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 142,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("9db47fd8-88fe-48b6-9be5-9da940a76808"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 143,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("bbd710b3-549d-4e19-b89e-acfd45920ada"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 144,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e7971dec-f364-4805-b8bd-f7feaaaccf35"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 145,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("f847b992-9234-4090-bdf1-017169ed6bc2"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 146,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("56b0adca-ca5c-4dd1-a274-fb20e74f845e"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 147,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8f1b8ade-f490-47e6-92a5-5651301e2c57"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 148,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("a1c087b7-87f2-4cb0-a9ba-2f8ae5e895a7"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 149,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9fbfb27f-d009-48fa-8676-0ef54f91003c"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 150,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0807ccd6-a34d-48d9-82c7-4b9a71b1522f"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 151,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3520a91e-2e03-419b-9f5d-1393d2cf84dd"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 152,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("78a99e40-70e4-44c1-8244-6f18af8e2662"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 153,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("063e2c70-2441-4302-8db9-b9e30ac2a8b8"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 154,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("00193444-ec32-41a5-ad62-117f4bd65f49"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 155,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("ad5834d1-a0ac-4e8b-a89a-408fe832fbe5"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 156,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("3339a781-b045-4dd5-a9d7-2cd20bba5a34"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 157,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("3bc3b651-16d4-405b-ac64-9fc258fd6394"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 158,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("4027bf95-de7c-4bcd-9628-2c80deeb8ab2"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 159,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("29a4e56e-debc-4dfb-a77e-e7b8cdd37148"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 160,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ed0d025c-0e94-4101-9b7d-f50e6ca4a8a0"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 161,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d2cb54fd-20e2-4223-87c2-a7340c4f85f7"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 162,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("6d4b17a8-8ff8-436a-a49d-bd01c7f8e8b8"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 163,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("38171b5e-0b8a-415c-b508-eeff403ec08f"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 164,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("72f0326e-6179-464e-940a-260ba386fd8f"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 165,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5c9cd328-e8cc-4569-9953-3108dde780c8"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 166,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("72015388-d587-43be-afd0-f73c61e4cad0"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 167,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("74a5654c-6245-448d-b99c-d1cfa46eef60"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 168,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2eef8c09-9621-411f-94d5-dbbff6d8a03c"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 169,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("21769a29-8fa3-479a-a972-8bddbb41e415"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 170,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("99f97302-db96-463c-bb0b-136a048b5157"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 171,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("08369a61-436d-44bd-a477-993a1313395e"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 172,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("b6b09ff2-b22f-4df8-a6c6-c939589f3595"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 173,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("cec0485a-f5fa-4e29-81eb-8c81bb99f71f"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 174,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("dc079411-1b27-4880-866a-2c6e208b3575"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 175,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8031b788-3986-4a71-9a1d-2b615da55bd7"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 176,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("47855bca-155f-4589-8da5-db34e85c9b29"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 177,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("75eed5db-63b2-42a3-854f-197cf9312eca"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 178,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("58b39535-f75c-4f8e-a3dd-0c6c338009af"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 179,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("daffe6e4-a349-4a52-a84a-90827acf41d5"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 180,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e2d17129-f322-4ef5-a67b-860ac8483e19"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 181,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1ac05305-a6b1-4b58-9877-e8fb8232c966"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 182,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("04257a30-c41e-41ad-a255-d65e21882b3c"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 183,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("69c902bd-a806-47ff-8847-8a061175592a"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 184,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("95d48598-e9a8-4149-8516-d66846172274"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 185,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("4d3a1676-4386-445a-becd-1b0ddafca49f"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 186,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("fb54a396-25ef-45e5-88bc-532933c2cbd4"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 187,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("b140779e-173c-4072-add7-a9ed5d9c4cb8"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 188,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e813c8fc-5ca7-49a6-9dc5-e6173969dd01"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 189,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("0a7b3e31-dbbd-47d9-932b-65670922bb21"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 190,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("de472f8d-c083-4093-82f4-7ffedcbcbfe0"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 191,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("35e21b48-e7c9-44e3-84c6-c24649963431"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 192,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("63b80f00-eca6-4e56-a27a-300d146641e1"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 193,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9f1b3619-bb2e-4b65-8f6a-74e3abacd74c"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 194,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("043ddfe7-eb1b-4fe1-aa36-003c6d4eb44f"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 195,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f86fdbc8-e85a-4f2d-8590-787eed38a20e"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 196,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("163c6a0a-76a8-4d8b-8603-270a0ecb4087"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 197,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ef85000b-86e4-4813-a794-3dd490018fa4"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 198,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d6c86da6-6b9e-44f5-8e0c-01bc0c847794"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 199,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("93baf054-2eac-4360-b414-7a6b24a11205"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 200,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("cdf39f53-f276-4a62-900a-1343b6af0fb1"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 201,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("83e9daab-d61d-48fe-b7eb-fd171ae8dac6"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 202,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("de3b897a-8f19-4afa-bfe9-3a0938fdaa0c"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 203,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("fa9f424b-1e96-4346-943e-347b73fd3bdf"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 204,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7958480a-3b4d-442e-8029-91ecfa61461a"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 205,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("0a6d651b-e589-4512-8aaf-9d26174490fe"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 206,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("b71be482-f5ff-4023-8cae-d20dec583284"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 207,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("dad90bc7-c2e2-48aa-9ec8-05f0b7e559f8"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 208,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("427ce7dc-9cc3-4dfa-b9dc-8f98f463e1d7"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 209,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5e95b054-e049-40ee-b7ca-fa42cd632f62"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 210,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a69d54f0-b660-497f-9cae-70e4df5897aa"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 211,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("168c5ebe-54da-4438-948b-4d7d8a4a4381"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 212,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("1e81eaa3-9915-4831-b1c0-f7555c9c3bc4"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 213,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("dbed5539-4331-4f4d-8c26-65c31ea43456"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 214,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("53be61a1-8cd7-4f4b-8083-473880906d2d"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 215,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f821125b-154e-4ece-bd1e-3f346fa6137d"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 216,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("03b935a7-47e3-4035-89ff-54622c245506"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 217,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("dad0752c-7a44-4c34-bdea-8a6cf4aac118"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 218,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("7905317d-acd4-4587-813a-23061368cabf"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 219,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("acd12a66-8020-42ea-a061-8ba2a2784d26"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 220,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("127a63f3-998e-47c2-b989-2538e97f2b7e"),
                            PermissionControllerID = 55
                        });
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.Property<int>("RoleConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleConfigID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleConfig", "Permission");

                    b.HasData(
                        new
                        {
                            RoleConfigID = 1,
                            PermissionControllerActionID = 1,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 2,
                            PermissionControllerActionID = 2,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 3,
                            PermissionControllerActionID = 3,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 4,
                            PermissionControllerActionID = 4,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 5,
                            PermissionControllerActionID = 5,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 6,
                            PermissionControllerActionID = 6,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 7,
                            PermissionControllerActionID = 7,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 8,
                            PermissionControllerActionID = 8,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 9,
                            PermissionControllerActionID = 9,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 10,
                            PermissionControllerActionID = 10,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 11,
                            PermissionControllerActionID = 11,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 12,
                            PermissionControllerActionID = 12,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 13,
                            PermissionControllerActionID = 13,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 14,
                            PermissionControllerActionID = 14,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 15,
                            PermissionControllerActionID = 15,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 16,
                            PermissionControllerActionID = 16,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 17,
                            PermissionControllerActionID = 17,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 18,
                            PermissionControllerActionID = 18,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 19,
                            PermissionControllerActionID = 19,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 20,
                            PermissionControllerActionID = 20,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 21,
                            PermissionControllerActionID = 21,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 22,
                            PermissionControllerActionID = 22,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 23,
                            PermissionControllerActionID = 23,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 24,
                            PermissionControllerActionID = 24,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 25,
                            PermissionControllerActionID = 25,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 26,
                            PermissionControllerActionID = 26,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 27,
                            PermissionControllerActionID = 27,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 28,
                            PermissionControllerActionID = 28,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 29,
                            PermissionControllerActionID = 29,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 30,
                            PermissionControllerActionID = 30,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 31,
                            PermissionControllerActionID = 31,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 32,
                            PermissionControllerActionID = 32,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 33,
                            PermissionControllerActionID = 33,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 34,
                            PermissionControllerActionID = 34,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 35,
                            PermissionControllerActionID = 35,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 36,
                            PermissionControllerActionID = 36,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 37,
                            PermissionControllerActionID = 37,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 38,
                            PermissionControllerActionID = 38,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 39,
                            PermissionControllerActionID = 39,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 40,
                            PermissionControllerActionID = 40,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 41,
                            PermissionControllerActionID = 41,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 42,
                            PermissionControllerActionID = 42,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 43,
                            PermissionControllerActionID = 43,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 44,
                            PermissionControllerActionID = 44,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 45,
                            PermissionControllerActionID = 45,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 46,
                            PermissionControllerActionID = 46,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 47,
                            PermissionControllerActionID = 47,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 48,
                            PermissionControllerActionID = 48,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 49,
                            PermissionControllerActionID = 49,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 50,
                            PermissionControllerActionID = 50,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 51,
                            PermissionControllerActionID = 51,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 52,
                            PermissionControllerActionID = 52,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 53,
                            PermissionControllerActionID = 53,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 54,
                            PermissionControllerActionID = 54,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 55,
                            PermissionControllerActionID = 55,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 56,
                            PermissionControllerActionID = 56,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 57,
                            PermissionControllerActionID = 57,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 58,
                            PermissionControllerActionID = 58,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 59,
                            PermissionControllerActionID = 59,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 60,
                            PermissionControllerActionID = 60,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 61,
                            PermissionControllerActionID = 61,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 62,
                            PermissionControllerActionID = 62,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 63,
                            PermissionControllerActionID = 63,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 64,
                            PermissionControllerActionID = 64,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 65,
                            PermissionControllerActionID = 65,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 66,
                            PermissionControllerActionID = 66,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 67,
                            PermissionControllerActionID = 67,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 68,
                            PermissionControllerActionID = 68,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 69,
                            PermissionControllerActionID = 69,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 70,
                            PermissionControllerActionID = 70,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 71,
                            PermissionControllerActionID = 71,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 72,
                            PermissionControllerActionID = 72,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 73,
                            PermissionControllerActionID = 73,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 74,
                            PermissionControllerActionID = 74,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 75,
                            PermissionControllerActionID = 75,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 76,
                            PermissionControllerActionID = 76,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 77,
                            PermissionControllerActionID = 77,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 78,
                            PermissionControllerActionID = 78,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 79,
                            PermissionControllerActionID = 79,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 80,
                            PermissionControllerActionID = 80,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 81,
                            PermissionControllerActionID = 81,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 82,
                            PermissionControllerActionID = 82,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 83,
                            PermissionControllerActionID = 83,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 84,
                            PermissionControllerActionID = 84,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 85,
                            PermissionControllerActionID = 85,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 86,
                            PermissionControllerActionID = 86,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 87,
                            PermissionControllerActionID = 87,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 88,
                            PermissionControllerActionID = 88,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 89,
                            PermissionControllerActionID = 89,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 90,
                            PermissionControllerActionID = 90,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 91,
                            PermissionControllerActionID = 91,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 92,
                            PermissionControllerActionID = 92,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 93,
                            PermissionControllerActionID = 93,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 94,
                            PermissionControllerActionID = 94,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 95,
                            PermissionControllerActionID = 95,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 96,
                            PermissionControllerActionID = 96,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 97,
                            PermissionControllerActionID = 97,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 98,
                            PermissionControllerActionID = 98,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 99,
                            PermissionControllerActionID = 99,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 100,
                            PermissionControllerActionID = 100,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 101,
                            PermissionControllerActionID = 101,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 102,
                            PermissionControllerActionID = 102,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 103,
                            PermissionControllerActionID = 103,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 104,
                            PermissionControllerActionID = 104,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 109,
                            PermissionControllerActionID = 109,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 110,
                            PermissionControllerActionID = 110,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 111,
                            PermissionControllerActionID = 111,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 112,
                            PermissionControllerActionID = 112,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 113,
                            PermissionControllerActionID = 113,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 114,
                            PermissionControllerActionID = 114,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 115,
                            PermissionControllerActionID = 115,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 116,
                            PermissionControllerActionID = 116,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 117,
                            PermissionControllerActionID = 117,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 118,
                            PermissionControllerActionID = 118,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 119,
                            PermissionControllerActionID = 119,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 120,
                            PermissionControllerActionID = 120,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 121,
                            PermissionControllerActionID = 121,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 122,
                            PermissionControllerActionID = 122,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 123,
                            PermissionControllerActionID = 123,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 124,
                            PermissionControllerActionID = 124,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 129,
                            PermissionControllerActionID = 129,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 130,
                            PermissionControllerActionID = 130,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 131,
                            PermissionControllerActionID = 131,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 132,
                            PermissionControllerActionID = 132,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 133,
                            PermissionControllerActionID = 133,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 134,
                            PermissionControllerActionID = 134,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 135,
                            PermissionControllerActionID = 135,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 136,
                            PermissionControllerActionID = 136,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 137,
                            PermissionControllerActionID = 137,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 138,
                            PermissionControllerActionID = 138,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 139,
                            PermissionControllerActionID = 139,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 140,
                            PermissionControllerActionID = 140,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 141,
                            PermissionControllerActionID = 141,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 142,
                            PermissionControllerActionID = 142,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 143,
                            PermissionControllerActionID = 143,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 144,
                            PermissionControllerActionID = 144,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 145,
                            PermissionControllerActionID = 145,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 146,
                            PermissionControllerActionID = 146,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 147,
                            PermissionControllerActionID = 147,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 148,
                            PermissionControllerActionID = 148,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 149,
                            PermissionControllerActionID = 149,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 150,
                            PermissionControllerActionID = 150,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 151,
                            PermissionControllerActionID = 151,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 152,
                            PermissionControllerActionID = 152,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 153,
                            PermissionControllerActionID = 153,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 154,
                            PermissionControllerActionID = 154,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 155,
                            PermissionControllerActionID = 155,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 156,
                            PermissionControllerActionID = 156,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 157,
                            PermissionControllerActionID = 157,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 158,
                            PermissionControllerActionID = 158,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 159,
                            PermissionControllerActionID = 159,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 160,
                            PermissionControllerActionID = 160,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 161,
                            PermissionControllerActionID = 161,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 162,
                            PermissionControllerActionID = 162,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 163,
                            PermissionControllerActionID = 163,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 164,
                            PermissionControllerActionID = 164,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 169,
                            PermissionControllerActionID = 169,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 170,
                            PermissionControllerActionID = 170,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 171,
                            PermissionControllerActionID = 171,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 172,
                            PermissionControllerActionID = 172,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 173,
                            PermissionControllerActionID = 173,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 174,
                            PermissionControllerActionID = 174,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 175,
                            PermissionControllerActionID = 175,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 176,
                            PermissionControllerActionID = 176,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 178,
                            PermissionControllerActionID = 178,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 179,
                            PermissionControllerActionID = 179,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 180,
                            PermissionControllerActionID = 180,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 181,
                            PermissionControllerActionID = 181,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 182,
                            PermissionControllerActionID = 182,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 183,
                            PermissionControllerActionID = 183,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 184,
                            PermissionControllerActionID = 184,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 185,
                            PermissionControllerActionID = 185,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 186,
                            PermissionControllerActionID = 186,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 187,
                            PermissionControllerActionID = 187,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 188,
                            PermissionControllerActionID = 188,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 189,
                            PermissionControllerActionID = 189,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 190,
                            PermissionControllerActionID = 190,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 191,
                            PermissionControllerActionID = 191,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 192,
                            PermissionControllerActionID = 192,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 205,
                            PermissionControllerActionID = 205,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 206,
                            PermissionControllerActionID = 206,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 207,
                            PermissionControllerActionID = 207,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 208,
                            PermissionControllerActionID = 208,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 209,
                            PermissionControllerActionID = 209,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 210,
                            PermissionControllerActionID = 210,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 211,
                            PermissionControllerActionID = 211,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 212,
                            PermissionControllerActionID = 212,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 105,
                            PermissionControllerActionID = 105,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 106,
                            PermissionControllerActionID = 106,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 107,
                            PermissionControllerActionID = 107,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 108,
                            PermissionControllerActionID = 108,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 125,
                            PermissionControllerActionID = 125,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 126,
                            PermissionControllerActionID = 126,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 127,
                            PermissionControllerActionID = 127,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 128,
                            PermissionControllerActionID = 128,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 165,
                            PermissionControllerActionID = 165,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 166,
                            PermissionControllerActionID = 166,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 167,
                            PermissionControllerActionID = 167,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 168,
                            PermissionControllerActionID = 168,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 193,
                            PermissionControllerActionID = 193,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 194,
                            PermissionControllerActionID = 194,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 195,
                            PermissionControllerActionID = 195,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 196,
                            PermissionControllerActionID = 196,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 197,
                            PermissionControllerActionID = 197,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 198,
                            PermissionControllerActionID = 198,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 199,
                            PermissionControllerActionID = 199,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 200,
                            PermissionControllerActionID = 200,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 201,
                            PermissionControllerActionID = 201,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 202,
                            PermissionControllerActionID = 202,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 203,
                            PermissionControllerActionID = 203,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 204,
                            PermissionControllerActionID = 204,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 213,
                            PermissionControllerActionID = 213,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 214,
                            PermissionControllerActionID = 214,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 215,
                            PermissionControllerActionID = 215,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 216,
                            PermissionControllerActionID = 216,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 217,
                            PermissionControllerActionID = 217,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 218,
                            PermissionControllerActionID = 218,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 219,
                            PermissionControllerActionID = 219,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 220,
                            PermissionControllerActionID = 220,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("UserId");

                    b.ToTable("Activity", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Property<int>("AddressTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddressTypesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("AddressTypesID");

                    b.HasIndex("UserId");

                    b.ToTable("AddressTypes", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Property<int>("BanksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BankGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("Banks", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Property<int>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BlockGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Block", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.Property<int>("BranchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BranchesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BranchesID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Branches", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CaptainZone", b =>
                {
                    b.Property<int>("CaptainZoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<Guid>("CaptainZoneGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CaptainZoneID");

                    b.HasIndex("BlockID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("CaptainZone", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CitiesCovered", b =>
                {
                    b.Property<int>("CitiesCoveredID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CitiesCoveredGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CitiesCoveredID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("CitiesCovered", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.HasIndex("RegionID");

                    b.HasIndex("UserId");

                    b.ToTable("City", "Setting");

                    b.HasData(
                        new
                        {
                            CityID = 1,
                            CityGuid = new Guid("be693b80-0b1a-49d2-9204-5ba66d94adf0"),
                            CreateDate = new DateTime(2021, 11, 2, 17, 38, 34, 691, DateTimeKind.Local).AddTicks(6779),
                            EnableDate = new DateTime(2021, 11, 2, 17, 38, 34, 691, DateTimeKind.Local).AddTicks(7743),
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            Place = "",
                            RegionID = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.Property<int>("ConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryPriceVatPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryPriceWithoutVat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmsSend")
                        .HasColumnType("bit");

                    b.Property<decimal>("LastSmsBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxDeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinDeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationID");

                    b.HasIndex("UserId");

                    b.ToTable("Configuration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CountryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Country", "Setting");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            CountryGuid = new Guid("67cf9538-c548-4a15-a3a5-dd9dc0d7d9f0"),
                            CreateDate = new DateTime(2021, 11, 2, 17, 38, 34, 687, DateTimeKind.Local).AddTicks(7602),
                            EnableDate = new DateTime(2021, 11, 2, 17, 38, 34, 689, DateTimeKind.Local).AddTicks(6855),
                            Extension = "00966",
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "السعودية",
                            NameEN = "SA",
                            Place = "",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Property<int>("DepartmentsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Isunique")
                        .HasColumnType("bit");

                    b.Property<int>("MainCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("SiteImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsID");

                    b.HasIndex("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Departments", "Setting");

                    b.HasData(
                        new
                        {
                            DepartmentsID = 1,
                            CreateDate = new DateTime(2021, 11, 2, 17, 38, 34, 695, DateTimeKind.Local).AddTicks(9486),
                            DepartmentsGuid = new Guid("810e84bd-c293-43ac-ae10-9ec7fc621b3e"),
                            EnableDate = new DateTime(2021, 11, 2, 17, 38, 34, 696, DateTimeKind.Local).AddTicks(67),
                            IsDeleted = false,
                            IsEnable = true,
                            Isunique = false,
                            MainCategoryID = 1,
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiscountGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiscountTypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DiscountID");

                    b.HasIndex("UserId");

                    b.ToTable("Discount", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.Property<int>("HelpQuestionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HelpQuestionsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HelpUserType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForOrder")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("HelpQuestionsID");

                    b.HasIndex("UserId");

                    b.ToTable("HelpQuestions", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Inqueries", b =>
                {
                    b.Property<int>("InqueriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InqueriesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InqueriesID");

                    b.ToTable("Inqueries", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Property<int>("JobsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("JobsID");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs", "Setting");

                    b.HasData(
                        new
                        {
                            JobsID = 1,
                            CreateDate = new DateTime(2021, 11, 2, 17, 38, 34, 694, DateTimeKind.Local).AddTicks(8658),
                            EnableDate = new DateTime(2021, 11, 2, 17, 38, 34, 694, DateTimeKind.Local).AddTicks(9232),
                            IsDeleted = false,
                            IsEnable = true,
                            JobTypeId = 2,
                            JobsGuid = new Guid("75b34307-17ef-4b6e-876b-9a82cd998fab"),
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.Property<int>("KeyWordsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("KeyWordsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("KeyWordsID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.ToTable("KeyWords", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.LogTextMessage", b =>
                {
                    b.Property<int>("LogTextMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSend")
                        .HasColumnType("bit");

                    b.Property<Guid>("LogTextMessageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageReasonId")
                        .HasColumnType("int");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("LogTextMessageID");

                    b.ToTable("LogTextMessage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Property<int>("MainCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainCategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("MainCategory", "Setting");

                    b.HasData(
                        new
                        {
                            MainCategoryID = 1,
                            CreateDate = new DateTime(2021, 11, 2, 17, 38, 34, 695, DateTimeKind.Local).AddTicks(3664),
                            EnableDate = new DateTime(2021, 11, 2, 17, 38, 34, 695, DateTimeKind.Local).AddTicks(4255),
                            IsDeleted = false,
                            IsEnable = true,
                            MainCategoryGuid = new Guid("2e356d79-44a7-4219-9341-08a2937fb82e"),
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Property<int>("MainPageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Property<int>("MainPageDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageDetailsID");

                    b.HasIndex("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageDetails", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.Property<int>("MainPageImagesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("MainPageDetailsID")
                        .HasColumnType("int");

                    b.Property<Guid>("MainPageImagesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageImagesID");

                    b.HasIndex("MainPageDetailsID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageImages", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Property<int>("NationalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("NationalityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Nationality", "Setting");

                    b.HasData(
                        new
                        {
                            NationalityID = 1,
                            CreateDate = new DateTime(2021, 11, 2, 17, 38, 34, 692, DateTimeKind.Local).AddTicks(4914),
                            EnableDate = new DateTime(2021, 11, 2, 17, 38, 34, 692, DateTimeKind.Local).AddTicks(5472),
                            IsDeleted = false,
                            IsEnable = true,
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            NationalityGuid = new Guid("0c30670e-d71a-4b21-a88b-8845ea07eb2b"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("DescEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("OrderStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderStatusType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PackageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Package", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.Property<int>("PaymentConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BanksID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBANnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAnrdoid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<string>("UserIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VendorAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorIOS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentConfigurationID");

                    b.HasIndex("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentConfiguration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.Property<int>("PaymentWayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentWayGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentWayID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentWay", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Region", "Setting");

                    b.HasData(
                        new
                        {
                            RegionID = 1,
                            CountryID = 1,
                            CreateDate = new DateTime(2021, 11, 2, 17, 38, 34, 690, DateTimeKind.Local).AddTicks(4957),
                            EnableDate = new DateTime(2021, 11, 2, 17, 38, 34, 690, DateTimeKind.Local).AddTicks(5550),
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            Place = "",
                            RegionGuid = new Guid("dfc38d65-ecd4-443d-bee3-1e8708a5ed3b"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Property<int>("ShippingCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShippingCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ShippingCompanyID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.Property<int>("SliderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayIn")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("SliderGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SliderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("SliderID");

                    b.HasIndex("UserId");

                    b.ToTable("Slider", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.StatusCompany", b =>
                {
                    b.Property<int>("StatusCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("StatusCoId")
                        .HasColumnType("int");

                    b.Property<Guid>("StatusCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusHomeMadeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("StatusCompanyID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.ToTable("StatusCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Subscribe", b =>
                {
                    b.Property<int>("SubscribeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscribeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscribeID");

                    b.ToTable("Subscribe", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Tokens", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("TokenVal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.Property<int>("CartDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CartDetailsGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CartMasterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartDetailsID");

                    b.HasIndex("CartMasterID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Property<int>("CartMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<Guid>("CartMasterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CartMasterStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Promocode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PromocodeDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SessionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("tax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CartMasterID");

                    b.HasIndex("CustomersID");

                    b.ToTable("CartMaster", "Site");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.Property<int>("TempPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("TempPermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TempPermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("TempPermission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserJWTToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab11e939-0e7e-4746-9059-59d869a8ea13",
                            Email = "SystemUser@Admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SystemUser@Admin.com",
                            NormalizedUserName = "SYSTEMUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEP65QXLX6e94ehLc9ntv07Q7n/aO6wf8y6j/z15XE7hfgyZLCNvHmM3Ar6SaTwzC3g==",
                            PhoneNumber = "012",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "13252685-9c16-42da-bb87-69a129bc1580",
                            TwoFactorEnabled = false,
                            UserName = "SystemUser",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.Property<int>("EnableHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnableHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("EnableHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("EnableHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TimeTakenProcess")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Product", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductImage", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.Property<int>("ProductQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductQuestionID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductQuestion", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.Property<int>("VacHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<DateTime>("VacFrom")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VacHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VacTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VacHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VacHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorBalance", b =>
                {
                    b.Property<int>("VendorBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorBlanceID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorBalance", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorSupport", b =>
                {
                    b.Property<int>("VendorSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpQuestionsID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorSupportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorSupportID");

                    b.HasIndex("HelpQuestionsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorSupport", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Property<int>("VendorsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutStoreAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutStoreEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActivityID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .HasColumnType("int");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("CRPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVac")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaarofNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyTarget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NationalityID")
                        .HasColumnType("int");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterType")
                        .HasColumnType("int");

                    b.Property<string>("SeconedNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkingTimes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorsID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("BanksID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors", "Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TransactionCard")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.HasOne("Homemade.Model.BankTransaction.TransactionCard", "TransactionCard")
                        .WithMany("TransactionCardLog")
                        .HasForeignKey("TransactionCardTransactionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.HasOne("Homemade.Model.Setting.AddressTypes", "AddressTypes")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("AddressTypesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AddressTypes");

                    b.Navigation("Block");

                    b.Navigation("Customers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Customers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DeliverySetting", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DeliverySetting")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverBlance")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("DriverBlance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("DriverBlance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverBlance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverSupport", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverSupport")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.HelpQuestions", "HelpQuestions")
                        .WithMany("DriverSupport")
                        .HasForeignKey("HelpQuestionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("DriverSupport")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverSupport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("HelpQuestions");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Drivers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Drivers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.TransactionSTCPay", "TransactionSTCPay")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("TransactionSTCPayID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionType")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Jobs", "Jobs")
                        .WithMany("Employees")
                        .HasForeignKey("JobsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Jobs");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceMaster");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceHistory", b =>
                {
                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceHistory")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.ListTransfer", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("ListTransfer")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("ListTransfer")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ListTransfer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Notification")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("Notification")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("Notification")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderRate", "OrderRate")
                        .WithMany("Notification")
                        .HasForeignKey("OrderRateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("Notification")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.ProdQuestion", "ProdQuestion")
                        .WithMany("Notification")
                        .HasForeignKey("ProdQuestionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Notification")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("OrderRate");

                    b.Navigation("OrderVendor");

                    b.Navigation("ProdQuestion");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderPromo")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("OrderPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderRate")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderRate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("OrderVendor")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("OrderVendor")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("OrderVendor")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderVendor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("OrderVendor")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drivers");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("Package");

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.HasOne("Homemade.Model.Customer.CustomerLocation", "CustomerLocation")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("Orders")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("OrderStatus");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PromoCode")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("VendorPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorPromo")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.HasOne("Homemade.Model.PermissionAction", "PermissionActions")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.PermissionController", "PermissionControllers")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionControllerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionActions");

                    b.Navigation("PermissionControllers");
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("RoleConfig")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("RoleConfig")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Activity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("AddressTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Banks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Block")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Block")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Branches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CaptainZone", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CaptainZone")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("CaptainZone")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CaptainZone")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Block");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CitiesCovered", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("CitiesCovered")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CitiesCovered")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Region", "Region")
                        .WithMany("City")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("City")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Configuration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Country")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainCategory", "MainCategory")
                        .WithMany("Departments")
                        .HasForeignKey("MainCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Departments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Discount", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Discount")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("HelpQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("KeyWords")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("KeyWords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Departments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainCategory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPage", "MainPage")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("MainPageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPageDetails", "MainPageDetails")
                        .WithMany("MainPageImages")
                        .HasForeignKey("MainPageDetailsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPageDetails");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Nationality")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Package")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentWay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Country", "Country")
                        .WithMany("Region")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Region")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Slider")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.StatusCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("StatusCompany")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("StatusCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.HasOne("Homemade.Model.Site.CartMaster", "CartMaster")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CartMaster");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CartMaster")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("TempPermission")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("TempPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("EnableHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("EnableHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("Product")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Product")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Product")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductImage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VacHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VacHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorBalance", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("VendorBalance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("VendorBalance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorBalance")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorSupport", b =>
                {
                    b.HasOne("Homemade.Model.Setting.HelpQuestions", "HelpQuestions")
                        .WithMany("VendorSupport")
                        .HasForeignKey("HelpQuestionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("VendorSupport")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorSupport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorSupport")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HelpQuestions");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Activity", "Activity")
                        .WithMany("Vendors")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("Vendors")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("Vendors")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Vendors")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Vendors")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("Vendors")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Vendors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activity");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Navigation("TransactionCardLog");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Navigation("CartMaster");

                    b.Navigation("CustomerBalance");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Notification");

                    b.Navigation("Orders");

                    b.Navigation("ProdQuestion");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Navigation("Notification");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Navigation("CaptainZone");

                    b.Navigation("DriverBlance");

                    b.Navigation("DriverSupport");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Navigation("TranLogSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Navigation("CustomerBalance");

                    b.Navigation("DriverBlance");

                    b.Navigation("VendorBalance");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceHistory");

                    b.Navigation("ListTransfer");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Navigation("CustomerBalance");

                    b.Navigation("DriverBlance");

                    b.Navigation("DriverSupport");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderRate");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("Orders");

                    b.Navigation("VendorPromo");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Navigation("ListTransfer");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Navigation("CaptainZone");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("CitiesCovered");

                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Navigation("Region");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Navigation("KeyWords");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.Navigation("DriverSupport");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Navigation("MainPageDetails");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Navigation("MainPageImages");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Navigation("OrderHistory");

                    b.Navigation("Orders");

                    b.Navigation("OrderVendor");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Navigation("OrderVendor");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Navigation("OrderVendor");

                    b.Navigation("StatusCompany");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("AddressTypes");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("CaptainZone");

                    b.Navigation("CitiesCovered");

                    b.Navigation("City");

                    b.Navigation("Configuration");

                    b.Navigation("Country");

                    b.Navigation("CustomerBalance");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("DeliverySetting");

                    b.Navigation("Departments");

                    b.Navigation("Discount");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("DriverSupport");

                    b.Navigation("Employees");

                    b.Navigation("EnableHistory");

                    b.Navigation("HelpQuestions");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Jobs");

                    b.Navigation("KeyWords");

                    b.Navigation("ListTransfer");

                    b.Navigation("MainCategory");

                    b.Navigation("MainPage");

                    b.Navigation("MainPageDetails");

                    b.Navigation("MainPageImages");

                    b.Navigation("Nationality");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderPromo");

                    b.Navigation("OrderRate");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("Package");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("PaymentStatus");

                    b.Navigation("PaymentWay");

                    b.Navigation("ProdQuestion");

                    b.Navigation("Product");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");

                    b.Navigation("PromoCode");

                    b.Navigation("Region");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Slider");

                    b.Navigation("StatusCompany");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("TransactionType");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorPromo");

                    b.Navigation("Vendors");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("ProdQuestion");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Navigation("EnableHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorPromo");

                    b.Navigation("VendorSupport");
                });
#pragma warning restore 612, 618
        }
    }
}
