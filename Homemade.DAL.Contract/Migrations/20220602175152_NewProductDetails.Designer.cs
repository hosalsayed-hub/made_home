// <auto-generated />
using System;
using Homemade.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Homemade.DAL.Contract.Migrations
{
    [DbContext(typeof(HomemadeContext))]
    [Migration("20220602175152_NewProductDetails")]
    partial class NewProductDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRedirect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMSSentToUser")
                        .HasColumnType("bit");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TransactionCard", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.Property<int>("TransactionCardLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionCardLogGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TransactionCardTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("TransactionCardLogID");

                    b.HasIndex("TransactionCardTransactionID");

                    b.ToTable("TransactionCardLog", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "6c38d9c4-453f-43a7-ba2d-7468c6e80676",
                            Name = "Admin",
                            RoleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "ce48653f-07b5-4f9a-9e13-b488e3a8e621",
                            Name = "Vendor",
                            RoleTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "7589d275-b749-46ff-94aa-3cd022d10ba1",
                            Name = "Customer",
                            RoleTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "05e768ac-f9a1-4ab4-a69b-cb938f5ea068",
                            Name = "Employee",
                            RoleTypeId = 2
                        });
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.Property<int>("CustomerBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerBlanceID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerBalance", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.Property<int>("CustomerFavouritesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerFavouritesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerFavouritesID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerFavourites", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Property<int>("CustomerLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressTypesID")
                        .HasColumnType("int");

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerLocationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerfiy")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerLocationID");

                    b.HasIndex("AddressTypesID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerLocation", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Property<int>("CustomersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomersID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DeliverySetting", b =>
                {
                    b.Property<int>("DeliverySettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseFare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliverySettingGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DriverCommision")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OverKmFare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DeliverySettingID");

                    b.HasIndex("UserId");

                    b.ToTable("DeliverySetting", "Driver");

                    b.HasData(
                        new
                        {
                            DeliverySettingID = 1,
                            BaseFare = 20m,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliverySettingGuid = new Guid("d67b97cc-9169-4abf-bb1f-2122acdcf2bf"),
                            DriverCommision = 15m,
                            IsDeleted = false,
                            IsEnable = true,
                            MinKM = 3m,
                            OverKmFare = 5m,
                            Tax = 0m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Property<int>("DriverBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverBlance", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverSupport", b =>
                {
                    b.Property<int>("DriverSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverSupportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpQuestionsID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverSupportID");

                    b.HasIndex("DriversID");

                    b.HasIndex("HelpQuestionsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverSupport", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Property<int>("DriversID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("BirthDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CarLicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarPictrue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HijiriInsuranceEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriBirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriIDDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IDDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("InsuranceEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenTransaction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PCOEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PCOEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PCOHijriEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberStc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PhoneType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PrivateHijriLicenseEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrivateLicenseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrivateLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PrivateLicenseTypeEndDate")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RegionCityID")
                        .HasColumnType("int");

                    b.Property<string>("RequestNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VerifyStc")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifyStcDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DriversID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("RegionCityID");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.Property<int>("TranLogSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<Guid>("TranLogSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionSTCPayID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TranLogSTCPayID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionSTCPayID");

                    b.HasIndex("UserId");

                    b.ToTable("TranLogSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Property<int>("TransactionSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquriyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentOrderReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STCStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionSTCPayID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("TransactionTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionType", "Driver");

                    b.HasData(
                        new
                        {
                            TransactionTypeID = 1,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "شحن رصيد بواسطة الإدارة",
                            NameEN = "Deposit by Operation",
                            TransactionTypeGuid = new Guid("9df94e33-4815-4d95-b748-de20283e80fd"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 2,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "سحب - جزاء",
                            NameEN = "Withdrawal",
                            TransactionTypeGuid = new Guid("7a8608d9-bb3c-4302-9176-8409a2395f41"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 3,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "علاوة",
                            NameEN = "Bouns",
                            TransactionTypeGuid = new Guid("38a35cc6-4c61-4d84-83cf-546ebe5b8190"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 4,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "عقوبة",
                            NameEN = "Punishment",
                            TransactionTypeGuid = new Guid("2bcc886f-65dc-40f2-be81-60116d34eefc"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 5,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع للكابتن STC",
                            NameEN = "Pay to Captain STC",
                            TransactionTypeGuid = new Guid("334fd4ed-5a79-4331-b7ee-aa0829f6f9b1"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 6,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "توصيل طلب",
                            NameEN = "Delivery Order",
                            TransactionTypeGuid = new Guid("a1ca0f27-c8d0-497f-91e1-c593bc060f57"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 7,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع طلب",
                            NameEN = "Pay Order",
                            TransactionTypeGuid = new Guid("b9640bc0-3fc5-4a72-b4ce-fbc69aec3bd3"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 8,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع فاتورة",
                            NameEN = "Pay Invoice",
                            TransactionTypeGuid = new Guid("c6192be8-9a67-4f30-8e4e-6072affb960a"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 9,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "تحويل كاش",
                            NameEN = "Cash Transfer",
                            TransactionTypeGuid = new Guid("45d98316-f164-4de4-a25a-1ef64843978a"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 10,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "شحن محفظة",
                            NameEN = "Charge Wallet",
                            TransactionTypeGuid = new Guid("477eb624-acc8-41f3-86d4-4b17b2d61820"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.Property<int>("EntityEmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDateHijri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDateMilady")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityEmpGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobsID")
                        .HasColumnType("int");

                    b.Property<string>("LastNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MidNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityEmpID");

                    b.HasIndex("CityID");

                    b.HasIndex("JobsID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees", "Emp");

                    b.HasData(
                        new
                        {
                            EntityEmpID = 1,
                            AddressAR = "الاسماعيليه",
                            AddressEN = "ismailia",
                            BirthDateHijri = "",
                            BloodTypeId = 1,
                            CityID = 1,
                            CreateDate = new DateTime(2022, 6, 2, 19, 51, 48, 261, DateTimeKind.Local).AddTicks(8453),
                            Email = "SystemUser@Admin.com",
                            EnableDate = new DateTime(2022, 6, 2, 19, 51, 48, 261, DateTimeKind.Local).AddTicks(8792),
                            EntityEmpGuid = new Guid("2299447c-fc61-4aa4-ba03-8c91e4f4b2d5"),
                            FileNo = "123321",
                            FirstNameAR = "احمد",
                            FirstNameEN = "Ahmed",
                            Gender = 1,
                            IDNo = "",
                            IsDeleted = false,
                            IsEnable = true,
                            JobsID = 1,
                            LastNameAR = "حسين",
                            LastNameEN = "Hussien",
                            Lat = "",
                            Lng = "",
                            MidNameAR = "سيد",
                            MidNameEN = "Sayed",
                            MobileNo = "0595489633",
                            NationalityID = 1,
                            Notes = "",
                            PhoneNumber = "",
                            Photo = "",
                            UserEnable = 1,
                            UserId = 1,
                            Zoom = ""
                        });
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailsID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceDetails", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceHistory", b =>
                {
                    b.Property<int>("InvoiceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InvoiceHistoryID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Property<int>("InvoiceMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceMasterGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("PerHomeMade")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("InvoiceMaster", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ListTransfer", b =>
                {
                    b.Property<int>("ListTransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListTransferGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ListTransferID");

                    b.HasIndex("BanksID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.ToTable("ListTransfer", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NotificationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderRateID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int?>("ProdQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int?>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProdQuestionID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Notification", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.Property<int>("OrderHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<Guid>("OrderHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderHistoryID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncreaseItem")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderItemsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceBeforeVat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProdImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("VatValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItems", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.Property<int>("OrderPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderPromoID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Property<int>("OrderRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderRateGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("RateDelivery")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RateOrder")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderRate", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Property<int>("OrderVendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("CaptainPaidID")
                        .HasColumnType("int");

                    b.Property<int>("CaptainTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryVatValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DistanceKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DriverCharge")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncreaseQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderVendorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<decimal>("PackageAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("PackagePercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerHome")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCompanyPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBaseItems")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("VatPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatProduct")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("OrderVendorID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PackageID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("OrderVendor", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Property<int>("OrdersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerLocationID")
                        .HasColumnType("int");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrdersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrdersID");

                    b.HasIndex("CustomerLocationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Property<int>("ProdQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProdQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProdQuestionID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderQuestion", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Property<int>("PromoCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double>("LimitCount")
                        .HasColumnType("float");

                    b.Property<Guid>("PromoCodeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PromoType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("PromoCode", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequest", b =>
                {
                    b.Property<int>("QuantitiesRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuantitiesRequestGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("QuantitiesRequestID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("QuantitiesRequest", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequestProduct", b =>
                {
                    b.Property<int>("QuantitiesRequestProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantitiesRequestID")
                        .HasColumnType("int");

                    b.Property<Guid>("QuantitiesRequestProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityAllowed")
                        .HasColumnType("float");

                    b.Property<double>("QuantityInventory")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("QuantitiesRequestProductID");

                    b.HasIndex("ProductID");

                    b.HasIndex("QuantitiesRequestID");

                    b.HasIndex("UserId");

                    b.ToTable("QuantitiesRequestProduct", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ShipCompanyHistory", b =>
                {
                    b.Property<int>("ShipCompanyHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseStatusId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShipCompanyHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("ShippingStatusId")
                        .HasColumnType("int");

                    b.HasKey("ShipCompanyHistoryID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ShippingCompanyID");

                    b.ToTable("ShipCompanyHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.TabCharge", b =>
                {
                    b.Property<int>("TabChargeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("CustomerBalanceID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRedirect")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RedirectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseRedirect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TabChargeEnum")
                        .HasColumnType("int");

                    b.Property<Guid>("TabChargeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TapChargeID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TabChargeID");

                    b.HasIndex("CustomerBalanceID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TabCharge", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.TabChargeExLog", b =>
                {
                    b.Property<int>("TabChargeExLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<int>("ErrorFrom")
                        .HasColumnType("int");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseRedirect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TabChargeEnum")
                        .HasColumnType("int");

                    b.Property<int>("TabChargeExLogGuid")
                        .HasColumnType("int");

                    b.HasKey("TabChargeExLogID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TabChargeExLog", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.Property<int>("VendorPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorPromoID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Property<int>("PermissionActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionActionID");

                    b.ToTable("PermissionAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionActionID = 1,
                            PermissionActionGuid = new Guid("d815f46c-06ca-4bd5-829d-2fefa4bf6407"),
                            PermissionActionNameAr = "عرض",
                            PermissionActionNameEn = "View"
                        },
                        new
                        {
                            PermissionActionID = 2,
                            PermissionActionGuid = new Guid("57ab3fbf-1933-431d-b1fa-8df47d2da5f5"),
                            PermissionActionNameAr = "اضافة",
                            PermissionActionNameEn = "Insert"
                        },
                        new
                        {
                            PermissionActionID = 3,
                            PermissionActionGuid = new Guid("bd216960-863d-4b9c-a5b4-b53c6d088db3"),
                            PermissionActionNameAr = "تعديل",
                            PermissionActionNameEn = "Update"
                        },
                        new
                        {
                            PermissionActionID = 4,
                            PermissionActionGuid = new Guid("2d102fcd-84dc-4fa5-85d4-848b57f3c174"),
                            PermissionActionNameAr = "حذف",
                            PermissionActionNameEn = "Delete"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Property<int>("PermissionControllerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionControllerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionControllerNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionControllerNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionControllerID");

                    b.ToTable("PermissionController", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerID = 1,
                            PermissionControllerGuid = new Guid("03c70619-bad4-4f66-aed4-8efeef3a9e42"),
                            PermissionControllerNameAr = "الصلاحيات",
                            PermissionControllerNameEn = "Permission"
                        },
                        new
                        {
                            PermissionControllerID = 2,
                            PermissionControllerGuid = new Guid("f67369ea-c355-42fc-ab0d-b33ead9df42b"),
                            PermissionControllerNameAr = "الدور",
                            PermissionControllerNameEn = "Role"
                        },
                        new
                        {
                            PermissionControllerID = 3,
                            PermissionControllerGuid = new Guid("324c781c-7550-4518-9337-be6c7d118634"),
                            PermissionControllerNameAr = "الدولة",
                            PermissionControllerNameEn = "Country"
                        },
                        new
                        {
                            PermissionControllerID = 4,
                            PermissionControllerGuid = new Guid("aa95e845-ec49-4578-85f6-308d53448799"),
                            PermissionControllerNameAr = "المنطقة",
                            PermissionControllerNameEn = "Region"
                        },
                        new
                        {
                            PermissionControllerID = 5,
                            PermissionControllerGuid = new Guid("e89d82b6-2c7d-4901-bbbb-52a8d54ec994"),
                            PermissionControllerNameAr = "المدينة",
                            PermissionControllerNameEn = "City"
                        },
                        new
                        {
                            PermissionControllerID = 6,
                            PermissionControllerGuid = new Guid("7c1ac3a0-6563-43e3-814c-8c7fdff97063"),
                            PermissionControllerNameAr = "الوظائف",
                            PermissionControllerNameEn = "Jobs"
                        },
                        new
                        {
                            PermissionControllerID = 7,
                            PermissionControllerGuid = new Guid("b931d49e-63ca-45f5-bc29-4d3abe6cb08a"),
                            PermissionControllerNameAr = "الاقسام",
                            PermissionControllerNameEn = "Departments"
                        },
                        new
                        {
                            PermissionControllerID = 8,
                            PermissionControllerGuid = new Guid("218f7ba4-5d32-444b-9b72-6cd7e6cdadda"),
                            PermissionControllerNameAr = "الموظفين",
                            PermissionControllerNameEn = "Employees"
                        },
                        new
                        {
                            PermissionControllerID = 9,
                            PermissionControllerGuid = new Guid("3a8b3726-88d2-4485-9fda-11f1ce693fe4"),
                            PermissionControllerNameAr = "الجنسية",
                            PermissionControllerNameEn = "Nationality"
                        },
                        new
                        {
                            PermissionControllerID = 10,
                            PermissionControllerGuid = new Guid("143eb2c9-03c1-46b7-83dd-264aa80dfc80"),
                            PermissionControllerNameAr = "اعدادات الدور",
                            PermissionControllerNameEn = "Role Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 11,
                            PermissionControllerGuid = new Guid("0e356224-dc9b-4cc8-8ef3-12ac9dcb832a"),
                            PermissionControllerNameAr = "الاعدادات",
                            PermissionControllerNameEn = "Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 12,
                            PermissionControllerGuid = new Guid("6f94f835-3c69-46ff-81a8-f486678e543a"),
                            PermissionControllerNameAr = "البنوك",
                            PermissionControllerNameEn = "Bank"
                        },
                        new
                        {
                            PermissionControllerID = 13,
                            PermissionControllerGuid = new Guid("6e02b2ba-2970-476d-996b-d9018109add3"),
                            PermissionControllerNameAr = "طرق الدفع",
                            PermissionControllerNameEn = "PaymentWay"
                        },
                        new
                        {
                            PermissionControllerID = 14,
                            PermissionControllerGuid = new Guid("255b79f9-ae50-4fac-a689-b4bb61334343"),
                            PermissionControllerNameAr = "الأنشطة",
                            PermissionControllerNameEn = "Activity"
                        },
                        new
                        {
                            PermissionControllerID = 15,
                            PermissionControllerGuid = new Guid("68873c59-c9ab-4749-ad16-298b52b61901"),
                            PermissionControllerNameAr = "الأحياء",
                            PermissionControllerNameEn = "Block"
                        },
                        new
                        {
                            PermissionControllerID = 16,
                            PermissionControllerGuid = new Guid("4ed6a486-d3bd-4903-9aac-02bf179524ab"),
                            PermissionControllerNameAr = "باقات التجار",
                            PermissionControllerNameEn = "Package"
                        },
                        new
                        {
                            PermissionControllerID = 17,
                            PermissionControllerGuid = new Guid("49b18a2a-8729-4fac-89c8-6a9988417a21"),
                            PermissionControllerNameAr = "حالات الدفع",
                            PermissionControllerNameEn = "PaymentStatus"
                        },
                        new
                        {
                            PermissionControllerID = 18,
                            PermissionControllerGuid = new Guid("bcadcabb-8f68-4817-bb1e-8e5bb1b6bb73"),
                            PermissionControllerNameAr = "اعدادت الشركه",
                            PermissionControllerNameEn = " Company Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 19,
                            PermissionControllerGuid = new Guid("b24ca552-875b-4f53-906a-dbc44206eb50"),
                            PermissionControllerNameAr = "اعدادت الدفع",
                            PermissionControllerNameEn = "Payment Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 20,
                            PermissionControllerGuid = new Guid("b1906368-d54c-46ab-af0b-f51edf982ba8"),
                            PermissionControllerNameAr = "التصنيفات الرئسيه",
                            PermissionControllerNameEn = "Main categories"
                        },
                        new
                        {
                            PermissionControllerID = 21,
                            PermissionControllerGuid = new Guid("cc80c900-7759-48eb-a841-2d85a0009d7d"),
                            PermissionControllerNameAr = "البنرات",
                            PermissionControllerNameEn = "Sliders"
                        },
                        new
                        {
                            PermissionControllerID = 22,
                            PermissionControllerGuid = new Guid("1239ecaa-82d6-4267-825a-5ff42452c490"),
                            PermissionControllerNameAr = "شركات الشحن",
                            PermissionControllerNameEn = "Shipping Company"
                        },
                        new
                        {
                            PermissionControllerID = 23,
                            PermissionControllerGuid = new Guid("70c72246-e2f2-4f07-9e31-11ba06b95db8"),
                            PermissionControllerNameAr = "الاستفسارات",
                            PermissionControllerNameEn = "Inqueries"
                        },
                        new
                        {
                            PermissionControllerID = 24,
                            PermissionControllerGuid = new Guid("9e406250-4588-4514-b9ed-ecee76b71aa1"),
                            PermissionControllerNameAr = "الصفحات الرئيسية",
                            PermissionControllerNameEn = "Main Pages"
                        },
                        new
                        {
                            PermissionControllerID = 25,
                            PermissionControllerGuid = new Guid("8d3c24f4-c3d8-4efd-bb92-2e58b511a3d5"),
                            PermissionControllerNameAr = "المتاجر",
                            PermissionControllerNameEn = "Vendors"
                        },
                        new
                        {
                            PermissionControllerID = 26,
                            PermissionControllerGuid = new Guid("737880d3-5a47-4054-a4e7-0a35d053a682"),
                            PermissionControllerNameAr = "الزبائن",
                            PermissionControllerNameEn = "Customer"
                        },
                        new
                        {
                            PermissionControllerID = 27,
                            PermissionControllerGuid = new Guid("379e08fa-829b-45b4-a111-cade77f4ffb0"),
                            PermissionControllerNameAr = "المنتجات",
                            PermissionControllerNameEn = "Product"
                        },
                        new
                        {
                            PermissionControllerID = 28,
                            PermissionControllerGuid = new Guid("dcc0b6bf-040a-46d2-bf97-248c366fd1c3"),
                            PermissionControllerNameAr = "أنواع العناوين",
                            PermissionControllerNameEn = "Address Types"
                        },
                        new
                        {
                            PermissionControllerID = 29,
                            PermissionControllerGuid = new Guid("f831712a-2f56-4e92-b44f-0f6a72a922ac"),
                            PermissionControllerNameAr = "الكلمات المفتاحية",
                            PermissionControllerNameEn = "KeyWords"
                        },
                        new
                        {
                            PermissionControllerID = 30,
                            PermissionControllerGuid = new Guid("7b319b0e-8f4b-402e-ba3f-f50d039c1e34"),
                            PermissionControllerNameAr = "منتجات الاوبريشن",
                            PermissionControllerNameEn = "Product Operation"
                        },
                        new
                        {
                            PermissionControllerID = 31,
                            PermissionControllerGuid = new Guid("502fe77f-bdaa-4c73-8e19-05219905cfa4"),
                            PermissionControllerNameAr = "طلبات الاوبريشن",
                            PermissionControllerNameEn = "Operation Orders"
                        },
                        new
                        {
                            PermissionControllerID = 32,
                            PermissionControllerGuid = new Guid("b855bdc2-3a98-4863-8ab2-d0312ce4d0ec"),
                            PermissionControllerNameAr = "طلبات المتجر",
                            PermissionControllerNameEn = "Vendor Orders"
                        },
                        new
                        {
                            PermissionControllerID = 33,
                            PermissionControllerGuid = new Guid("777c0e51-c7eb-4864-a25e-e7b41972a004"),
                            PermissionControllerNameAr = "الفروع",
                            PermissionControllerNameEn = "Branches"
                        },
                        new
                        {
                            PermissionControllerID = 34,
                            PermissionControllerGuid = new Guid("b9f434f5-c6cb-4261-96ae-4ff4acb9ffd9"),
                            PermissionControllerNameAr = "اكواد الخصم",
                            PermissionControllerNameEn = "Promo Code"
                        },
                        new
                        {
                            PermissionControllerID = 35,
                            PermissionControllerGuid = new Guid("96b98dc2-bbd7-4af3-b416-82f83d3617a8"),
                            PermissionControllerNameAr = "سجل الاجازات",
                            PermissionControllerNameEn = "Vac History"
                        },
                        new
                        {
                            PermissionControllerID = 36,
                            PermissionControllerGuid = new Guid("2e98aecd-ac32-43f8-902f-954029d31ae9"),
                            PermissionControllerNameAr = "سجل ايقاف الاشتراكات",
                            PermissionControllerNameEn = "Enable History"
                        },
                        new
                        {
                            PermissionControllerID = 37,
                            PermissionControllerGuid = new Guid("49cd806a-ea78-44dc-9847-e240cf755e17"),
                            PermissionControllerNameAr = "الطلبات الجديده للسائق",
                            PermissionControllerNameEn = "Driver New Requests"
                        },
                        new
                        {
                            PermissionControllerID = 38,
                            PermissionControllerGuid = new Guid("17dbc605-0ee4-43a0-8105-da8948915ba3"),
                            PermissionControllerNameAr = "الطلبات الملغية للسائق",
                            PermissionControllerNameEn = "Driver Rejected Requests"
                        },
                        new
                        {
                            PermissionControllerID = 39,
                            PermissionControllerGuid = new Guid("337770a5-c60e-43f6-b65d-37c146e5ae10"),
                            PermissionControllerNameAr = "طلبات انتظار التفعيل للسائق",
                            PermissionControllerNameEn = "Driver Waiting Activation"
                        },
                        new
                        {
                            PermissionControllerID = 40,
                            PermissionControllerGuid = new Guid("51681a80-e630-4810-8192-a6d5133d735c"),
                            PermissionControllerNameAr = "طلبات تحت المراجعة للسائق",
                            PermissionControllerNameEn = "Driver Under Requests"
                        },
                        new
                        {
                            PermissionControllerID = 41,
                            PermissionControllerGuid = new Guid("9fad15c2-b28d-4d9c-8b43-e86db95ef6a6"),
                            PermissionControllerNameAr = "الفواتير",
                            PermissionControllerNameEn = "Invoices"
                        },
                        new
                        {
                            PermissionControllerID = 42,
                            PermissionControllerGuid = new Guid("d4e1162c-30bf-4fec-ad26-5a95d91b6edf"),
                            PermissionControllerNameAr = "فواتير المتجر",
                            PermissionControllerNameEn = "Store Invoice"
                        },
                        new
                        {
                            PermissionControllerID = 43,
                            PermissionControllerGuid = new Guid("b1019058-4f3f-419b-817d-b14c6c395150"),
                            PermissionControllerNameAr = "الخصم و الضريبة",
                            PermissionControllerNameEn = "Vat Discount"
                        },
                        new
                        {
                            PermissionControllerID = 44,
                            PermissionControllerGuid = new Guid("7e50441d-3212-41bc-95cf-bc724abbd925"),
                            PermissionControllerNameAr = "ماليات الكباتن",
                            PermissionControllerNameEn = "Captain Financial"
                        },
                        new
                        {
                            PermissionControllerID = 45,
                            PermissionControllerGuid = new Guid("257cc1a3-bb51-4c14-bd44-7ab0632ed1f3"),
                            PermissionControllerNameAr = "ارسال رسالة",
                            PermissionControllerNameEn = "Send Message"
                        },
                        new
                        {
                            PermissionControllerID = 46,
                            PermissionControllerGuid = new Guid("a707398e-c0a9-4902-b269-413b8c65fc54"),
                            PermissionControllerNameAr = "المدن المغطاة",
                            PermissionControllerNameEn = "Cities Covered"
                        },
                        new
                        {
                            PermissionControllerID = 47,
                            PermissionControllerGuid = new Guid("70f8d6e3-0f35-4248-b708-892b3c99b874"),
                            PermissionControllerNameAr = "مناطق الكابتن",
                            PermissionControllerNameEn = "Captain Zone"
                        },
                        new
                        {
                            PermissionControllerID = 48,
                            PermissionControllerGuid = new Guid("7656d60a-4cc3-462a-8952-1d1e0fcbc11b"),
                            PermissionControllerNameAr = "تعيين سائق",
                            PermissionControllerNameEn = "Assign Driver"
                        },
                        new
                        {
                            PermissionControllerID = 49,
                            PermissionControllerGuid = new Guid("c4f83432-b704-4177-be95-79440a7e98e2"),
                            PermissionControllerNameAr = "عملاء المتاجر",
                            PermissionControllerNameEn = "Vendor Customer"
                        },
                        new
                        {
                            PermissionControllerID = 50,
                            PermissionControllerGuid = new Guid("2ab1c980-b526-4409-b789-ba8b80bf7c4e"),
                            PermissionControllerNameAr = "سجل اجازات المتاجر",
                            PermissionControllerNameEn = "Vendor Vac History"
                        },
                        new
                        {
                            PermissionControllerID = 51,
                            PermissionControllerGuid = new Guid("c2d83f33-8ebe-444c-ad68-2b794e5bb563"),
                            PermissionControllerNameAr = "سجل ايقاف اشتراكات المتاجر",
                            PermissionControllerNameEn = "Vendor Enable History"
                        },
                        new
                        {
                            PermissionControllerID = 52,
                            PermissionControllerGuid = new Guid("7c77b0f7-758f-42b9-9999-4611da146c9d"),
                            PermissionControllerNameAr = "اسئلة المنتج",
                            PermissionControllerNameEn = "Product Question"
                        },
                        new
                        {
                            PermissionControllerID = 53,
                            PermissionControllerGuid = new Guid("a7698f56-796f-49a1-82ec-98d9277046fa"),
                            PermissionControllerNameAr = "تقييم الطلب",
                            PermissionControllerNameEn = "Order Rate"
                        },
                        new
                        {
                            PermissionControllerID = 54,
                            PermissionControllerGuid = new Guid("ed819c51-113f-4a50-b1c0-48f960ff6282"),
                            PermissionControllerNameAr = "اسئلة المنتج للمتجر",
                            PermissionControllerNameEn = "Vendor Product Question"
                        },
                        new
                        {
                            PermissionControllerID = 55,
                            PermissionControllerGuid = new Guid("085524d3-f33a-49a0-a9a1-073612172495"),
                            PermissionControllerNameAr = "تقييم الطلب للمتجر",
                            PermissionControllerNameEn = "Vendor Order Rate"
                        },
                        new
                        {
                            PermissionControllerID = 56,
                            PermissionControllerGuid = new Guid("674bd156-5197-4d0c-a1bf-f93d858b9cf7"),
                            PermissionControllerNameAr = "الطلبات المجدولة للاوبريشن",
                            PermissionControllerNameEn = "Operation Schedule Orders"
                        },
                        new
                        {
                            PermissionControllerID = 57,
                            PermissionControllerGuid = new Guid("7b895255-a440-41b4-9d42-daad216b70f5"),
                            PermissionControllerNameAr = "الطلبات المجدولة للمتجر",
                            PermissionControllerNameEn = "Vendor Schedule Orders"
                        },
                        new
                        {
                            PermissionControllerID = 58,
                            PermissionControllerGuid = new Guid("8f611f0b-ba9e-46d0-87a9-b42a6f43bab8"),
                            PermissionControllerNameAr = "الرئيسية للاوبريشن",
                            PermissionControllerNameEn = "Operation Dashboard"
                        },
                        new
                        {
                            PermissionControllerID = 59,
                            PermissionControllerGuid = new Guid("20d2d330-d832-4c72-88c3-c68ab67ea5b5"),
                            PermissionControllerNameAr = "الرئيسية للمتجر",
                            PermissionControllerNameEn = "Vendor Dashboard"
                        },
                        new
                        {
                            PermissionControllerID = 60,
                            PermissionControllerGuid = new Guid("14d939cb-f366-42cd-b313-88179ff8925d"),
                            PermissionControllerNameAr = "استفسارات الكباتن",
                            PermissionControllerNameEn = "Driver Support"
                        },
                        new
                        {
                            PermissionControllerID = 61,
                            PermissionControllerGuid = new Guid("10cbff95-7278-4505-9b21-d6b42ecabf6f"),
                            PermissionControllerNameAr = "بريد الاشتراكات",
                            PermissionControllerNameEn = "Subscribes"
                        },
                        new
                        {
                            PermissionControllerID = 62,
                            PermissionControllerGuid = new Guid("b2f6f5ae-f3ec-40c0-9aff-63f1d324ff37"),
                            PermissionControllerNameAr = "رصيد العميل",
                            PermissionControllerNameEn = "Customer Balance"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Property<int>("PermissionControllerActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionControllerActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionControllerID")
                        .HasColumnType("int");

                    b.HasKey("PermissionControllerActionID");

                    b.HasIndex("PermissionActionID");

                    b.HasIndex("PermissionControllerID");

                    b.ToTable("PermissionControllerAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerActionID = 1,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5e1f141d-54a0-4fab-a06b-ab28d8d8c5f6"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 2,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("7b71ced8-89c8-4b7a-92c6-7a68143fb22e"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 3,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a7deef02-e587-4b0e-ae7a-d9f7a76981f1"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 4,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ba5b9148-5b30-45e2-89f9-d133daf77376"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 5,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("64953414-ca4e-4500-b22a-737e69db56ec"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 6,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("53ecfca0-00e0-43c6-8d8f-2b0ec3be00d2"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 7,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("1d0ed4b3-24fa-454e-a8f3-b75dc4ba2874"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 8,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6e170621-3646-4d0e-8f1a-4d5506059b45"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 9,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("08875f72-35fd-4cf9-a756-b45681b7f28b"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 10,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("658820d6-35e9-4634-8f3a-fc7ad02e583f"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 11,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3b1c0e9c-ce00-4b51-aae3-87270d5d9cf4"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 12,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("92199d6a-7d8d-4357-ada8-0eadfaa61f00"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 13,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("36db0d08-0293-4628-a544-e69622313e4b"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 14,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("67c4b8a0-28fc-4aa4-8c4f-442011dc3f38"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 15,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("dc18c9ca-8e11-45e9-9113-7431d9425f7e"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 16,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7de70beb-9dd6-42a4-b27c-66c2ea1eef9d"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 17,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8e1f7144-567e-4979-8331-da9ca23f98f0"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 18,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d7e63f6c-26f6-46fb-bf2f-4543e9ff7e60"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 19,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("54ca3a94-562c-48eb-be29-27895834beca"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 20,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4047f8b5-7e1d-4de6-833a-f24c6ef53478"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 21,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1c7fa080-163d-4e52-a0e8-51d18202262b"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 22,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("16793e1c-27a8-4ca6-b766-4f617abf37ee"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 23,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("ee8e167e-9e89-48d3-bb37-8dc9e0f756e7"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 24,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("bd4d7bd5-084d-4eaf-bd36-c269a4c15616"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 25,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e903d7b5-6100-45fb-8a7b-7928f0e4c5e8"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 26,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("2de00cfb-d7f7-4477-b91e-81415fe4d344"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 27,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("153c1057-ae84-4fc2-bb66-ac67f9de8b04"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 28,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8cdcd9de-ef13-42b2-b694-427d13e2fcbd"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 29,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8b4ef773-4681-4a64-9819-afb3a068cf0d"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 30,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("db79b2fb-e0e4-44a5-a492-030dd880ce71"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 31,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f7981fc1-65bf-4d9e-96fe-9f4beb6ede69"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 32,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("1a3b23e6-a93b-41a0-954c-4028d5683142"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 33,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e4874465-f9df-4c91-a232-dd49382bbbd6"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 34,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("974ae22a-4e4b-4cb1-bb16-a0362d8bffff"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 35,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("01dd4a4c-6379-4dcf-a26e-4f0cbce7884e"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 36,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("69bba612-0d7f-4594-9768-ab375d93f2c2"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 37,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("6631bcd5-5c80-46b4-ac73-704fa82a83c5"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 38,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("ae802022-afa5-4985-b2e5-4b0abfbb74ec"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 39,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("6f3a74a2-27d1-4ac5-bfce-69e5517f35f2"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 40,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e102ec50-f239-4adb-b09e-326a97fbfae0"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 41,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d0dcf00c-597e-4425-a031-4582a27c0a2d"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 42,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("56ffd4b9-03b0-4ae9-b2c7-c220b034340f"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 43,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7e99d588-b45f-4430-a192-c9307b4089f5"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 44,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5d744fec-d8aa-49f0-b80f-b3f679a9c62d"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 45,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9e76238f-3bbf-47fc-8d41-582001f3649e"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 46,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("de84c26b-0701-4004-831b-09cd2f230f33"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 47,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("4cabeb0c-3b2b-4cdb-8838-29d5b105c017"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 48,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("c7fedd12-3852-4fb3-9df1-e617113449a7"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 49,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ffb61629-1e29-471e-91b4-5e55b297ad38"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 50,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("7c68888b-453c-4d7d-9cbd-92ddcdcc884b"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 51,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("134fc2e2-6509-4e63-85a1-da5df9c43a07"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 52,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("09e36458-9855-455a-8d1b-e1082c4b4348"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 53,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b0472a8b-caac-47ef-99a7-cb6aabe1a13e"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 54,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("725c0253-a7f4-4c81-8724-b6dbf23a26b6"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 55,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("24b31dba-e112-426f-bdad-045a79816334"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 56,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("497e52ba-a434-4eb7-98f1-2cd1cb9d3025"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 57,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("94f9d44c-83ad-4d3d-a882-5bf6ca7d54ad"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 58,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("267b4f6a-9dfb-403c-8b83-434ad1138e75"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 59,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("33ca66c4-fd48-4a28-b476-e1a96e3c1105"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 60,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d758f4f4-366e-42b6-a097-98f78abe4883"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 61,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("3bb5224d-c180-4b2f-b959-0cf6152a0de4"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 62,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("b731fee4-34e0-4ef4-9587-b9b227636c7d"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 63,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("deaa49d7-3381-4cac-9805-c2d86efee61b"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 64,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("82ff07df-bec3-4360-bfa0-461d9f9f162a"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 65,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("0e6e334e-41ea-4499-9da9-c3dc9c60ea82"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 66,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("65d38107-7c6e-41e3-96e9-b6be40b61125"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 67,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("9d6dde04-7c4e-466b-b808-430a8a730117"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 68,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("47cd1909-0d21-4cdd-a96f-03ddf3a6a902"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 69,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("4f09d79f-b9e0-4b9d-9bba-e67c9a7c06ec"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 70,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("27b4e8b9-3651-4260-80a0-09d2488544ed"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 71,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2423025b-c5df-491a-904e-2afdb963cbd6"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 72,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5ea0ea49-5067-454a-9d00-6ba909a5e1fe"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 73,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("220ca3ae-f6b7-44f0-9c4f-2afefe67fb2c"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 74,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f9695500-5375-40b1-aa3f-5e5fa6197298"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 75,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("e098ee97-1641-4ba0-b9a3-9c3d0dd253d3"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 76,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7c6ffee3-f6f1-4677-b063-02b9f7d1c971"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 77,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("62e57fca-5310-4e63-88e8-9a48b96cb4b2"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 78,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0561aeb6-f13a-4697-bad0-e398449e710a"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 79,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2c27361b-dd43-43af-a905-8992682bbc60"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 80,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ca7e1441-0ea5-450e-8b8e-6c928c752c10"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 81,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("7e8c5d19-c68d-4fd1-a94e-216573069db4"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 82,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("e775fe50-860b-42aa-9a5d-f8700d70ed0c"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 83,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3d0f6398-cd34-4909-b4c3-f51e1ccc5a61"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 84,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("111bbe1c-46a5-4d6c-a02c-c702804d54d7"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 85,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("db810067-c25c-41a6-ac4d-c6b4d8b6b00b"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 86,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("218f6d62-5195-44d6-b7ab-86cd8eaced26"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 87,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5e3b4cf4-858d-49e7-807c-80494fbb66b9"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 88,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("173898fe-f0a1-4ce7-a692-41b07e8998da"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 89,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("dedb36a3-db58-4c95-8cab-c825aa40cbeb"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 90,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("854215dd-bada-46d1-be82-32e30eb6041b"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 91,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("66893eb0-401e-4eed-a2d5-7b7b12d5ff38"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 92,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6b292e67-25ff-416d-9269-9a25f3a78387"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 93,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("129cf331-070f-4b76-a822-dc893fefef7d"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 94,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("ecb9c2ef-c9fa-4648-8fa6-5c77f79b6bf9"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 95,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("e02e02ca-f503-406d-9406-e97e8c80f164"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 96,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("0003ebdb-734e-4909-82c4-bf438fb45c58"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 97,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b65b1104-8480-4e88-b6c2-104597bb3ff3"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 98,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("ecf57a27-c8be-40be-be4c-fd14f5d3b294"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 99,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2fa91fa9-84df-4a06-b689-75ad091fadfa"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 100,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("cc684cf5-16f6-42d9-812a-75d2848d1e94"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 101,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a0aaec07-a7ef-4651-8362-410c0b1bca12"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 102,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("e7d18147-c36a-41a9-95c5-652bfda9edb1"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 103,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("25a677d7-f092-4000-b4c1-cc9790c67c37"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 104,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5d6f0285-66df-433a-b684-53fdc90111b7"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 105,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("4a3907f0-1edf-493f-b08d-39bf905283d1"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 106,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("60f754ea-78de-49ef-9bde-d8610f96f767"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 107,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("55fabf89-86e0-478f-bb1c-671c379da4f6"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 108,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("eb775ae3-14b2-41c5-a975-9ae0bd264b71"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 109,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("17f65732-b2e9-4b88-b1a8-d11ab0f0753f"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 110,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3e0c7641-123d-4327-8434-b626a73b7ac0"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 111,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7104f747-4a29-4dbd-80f5-1d67d783b6dd"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 112,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("bf6c8169-c5a9-453d-b78e-59c99c98c3c0"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 113,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("eabf739e-32b9-4f83-b5ef-9fb6495ff018"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 114,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("94cc727a-4f3b-4714-8925-19e8d5df6979"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 115,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("75c0b731-eec9-43b2-a964-645c42864c6c"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 116,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2c030cf0-c254-4226-93a8-0787f8004912"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 117,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("3a2ab2a9-3b25-4be8-ba24-b9414cd41362"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 118,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("23b71f17-9681-4c1a-8718-eba52ca5f527"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 119,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c886c11d-ce3d-4648-bbf7-5ff88d7ff1a6"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 120,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6ebfab70-d874-4411-894c-81c104a0bc77"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 121,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5fee3e6c-9d3b-4e01-ad8f-f77624c90b7b"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 122,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("2173e835-464b-4195-bd5d-a9fd84d85eec"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 123,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d0a32457-9b29-489b-803d-53da45a5e307"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 124,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("fccc3efe-990e-40f8-81e0-3abe9466cc98"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 125,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("dcdc1f9f-968b-486c-a776-f96778d4f331"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 126,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("14e2554f-1a71-47bf-adb4-f9e9ecca043f"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 127,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("9e28d215-518a-4e0a-80c8-7648406529eb"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 128,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("1948c37a-36de-4d46-b132-a06169f7df18"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 129,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("83fadfd1-413f-4f5a-8c5c-1c6c4543036e"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 130,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c8a065a8-3655-4a54-946c-11959055f5f6"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 131,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("461399ef-b492-4169-ab09-7a65c7493698"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 132,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("167c91c3-f306-4ab1-b563-6d92ce956625"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 133,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("62c17cb6-0181-432a-bbdc-8de0219c509e"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 134,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("4f7e962b-63fc-4b7b-b95b-fdd25a131523"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 135,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a17d2a8d-ed9d-456d-9d62-d9579afd0794"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 136,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e0b85d28-b37d-4cc2-9d7e-f9e7e9bdfbd5"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 137,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d0a5ba36-f2d3-45a8-9608-258265203092"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 138,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("cccda402-5298-4655-9370-1d0daafeb9f2"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 139,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2f213b2b-1817-4a26-bb6c-7d619f52bb70"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 140,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("312fb90a-5879-4e27-b024-dcebc9481fd3"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 141,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("fbfd04b7-cb46-462d-a58e-fe34fb684ca2"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 142,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("4b61b55e-336d-42fb-81b9-fe57899689cd"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 143,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("6037f382-010a-410b-831c-7fb8fba83f81"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 144,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7778c332-95b4-4198-b99d-9c00324d9a70"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 145,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("fa1f26dd-2be9-4e29-888a-d41e84f4a9a5"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 146,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("873c34eb-8baa-4af6-a315-148c2e410454"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 147,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5e346650-1248-4284-9ae0-af7c8dabc2fd"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 148,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("69adbe70-39cf-4aa9-8d03-a58fc17ce6b4"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 149,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("293163dc-efa0-431f-8aef-e7431502bcaf"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 150,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("62ae9f31-0a5a-4d1b-a398-cb8a4bf8a1b6"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 151,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("df16d096-04bf-45ef-a3d4-15f3160af120"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 152,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("c02e75b2-35f7-4080-b560-3f9d73a8a28a"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 153,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("0f44e2c0-1362-43ec-b22f-db74cafb2267"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 154,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3b152dda-6b9b-428e-8f8c-ac279a1b3c80"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 155,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("20e0fb43-7b1e-4cd1-ad0d-f641e7395882"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 156,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e4eb779b-b3e2-4387-af85-8db65e540732"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 157,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d437e565-e77e-4353-9e19-44437056a41a"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 158,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3d84a5c3-d410-4e52-a43a-b7caa429ec69"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 159,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("659a6f94-85af-47a7-86c4-087fc202f87b"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 160,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("54e5203e-8aed-4fb5-8da7-49b32e2e9569"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 161,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("aa5c117a-b1da-46ed-9500-a24c8ff59776"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 162,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f444787b-b569-46fc-b61e-8f7d74ebdebf"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 163,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("363badc8-153c-4df2-81e6-a705b5278f1f"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 164,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("29734a66-1604-4bf6-88aa-e448483b89ac"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 165,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ecba3dfd-6ca1-4250-8d49-cdc47d55d34e"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 166,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("bce40cc8-fc4b-4953-8e0c-df9b8b768b7b"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 167,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5b2a5076-09e0-4c30-b54b-3abb080c661b"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 168,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("b8dcfacd-3e63-46ea-ae82-c3ab017a7ca4"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 169,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c2573bb4-b1b1-4ca8-8265-c080699e692d"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 170,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a7166e88-674f-43d0-bb3b-be11ce252db5"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 171,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("ecc4bacf-9054-48c2-bd82-1c766b56dd15"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 172,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("62323a17-749a-4d0d-b084-f726277a9620"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 173,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1d525a3f-4a61-495c-a456-fe4499e8bde2"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 174,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("88f16c49-4537-411f-a980-1b4c49e0ed34"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 175,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("059e83bf-5d0e-4205-886b-637a4311dc99"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 176,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6d2c8f8a-e786-4b03-bf6a-accbd0554582"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 177,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c483318a-d1fb-4d8c-af57-7b3fa2a6fcf6"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 178,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("9da64536-b271-40e1-9e4a-da3973361e8b"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 179,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("86ca7d4f-e798-4280-bb33-4dd967bde648"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 180,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("a67166fa-fbbe-45b7-953d-d3b7db868be2"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 181,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("3a929e40-99e7-4a8e-a134-e16728e18144"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 182,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f5f67a1d-c630-4718-b2c1-7a671e9693b4"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 183,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("85bc2136-8628-40ab-b322-2787fc34191b"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 184,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6eca76f2-d307-4708-9c3f-981825188f7d"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 185,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("460cd8da-ff59-40e8-854f-17c96f9b22ce"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 186,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("e3fc3ba1-5791-4d18-8813-d08a6bd0d07b"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 187,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("fe9bd09d-86bb-409d-8b50-fdfb341a4685"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 188,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ff11f4b8-ec01-4c6a-b245-7dd3f4cb5df1"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 189,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9c4982bd-e91d-4e01-b057-27d8a452c5ce"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 190,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("da0a4980-62fe-49d4-9cc3-46c7755eb840"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 191,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("eb62e267-9c2f-4e77-8d82-52a147a72fc5"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 192,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5c57b7dc-9ccf-4c69-8ffc-d0aefee0c31a"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 193,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("024025a6-1cff-4965-8fc7-e5f754f6aa2f"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 194,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("79ee81f4-afe5-41ab-bcd7-7d7abd84161f"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 195,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d130fdac-4a6b-4cbc-9e7f-0e5878aec83f"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 196,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8864dd24-4b0d-4de5-b101-5ea6a3cabdbc"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 197,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("87324c0f-da3d-44b8-a622-0964ca7c1b31"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 198,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("8d91e0b0-d6ac-4eec-92fe-f18e9aebb638"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 199,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f3531c43-5784-4dbf-b774-7402bb5f300a"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 200,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("983b247d-5100-47ab-a16b-4c5e4ae98417"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 201,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e41d50c9-cabd-4884-9467-f12cbb535b57"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 202,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("68814dd3-9734-447e-81b1-03057773891a"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 203,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f35a414c-30f2-4d6b-b6c9-2e861ba9ff19"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 204,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8eff2c71-6ee4-4fef-bb44-b6a53cd77673"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 205,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2203160c-4000-4c6a-9ccc-e274e9b76850"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 206,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("8fb36a55-81c2-412e-82df-3782eee437cd"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 207,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8d3daf1a-ce61-49c9-b775-3bcbb4167c7d"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 208,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8686cfe0-281a-463b-a602-ddc5ec63c8ca"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 209,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5bce1ff5-db38-4d2c-89eb-3873f976c5c5"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 210,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5f563766-992f-4413-ae2d-af9518c00103"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 211,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d50c94fd-3ef2-49e2-b4ef-bb261a8ba8ea"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 212,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("9218e251-b96c-4106-b3d7-745adfd17563"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 213,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1d57664c-2768-4816-964a-42f61ac5e48f"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 214,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("17ebd9e7-ae3e-4469-9309-96cff2f1df90"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 215,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("894971c8-3e1e-46b0-8a3f-882e8820241f"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 216,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("9b8bb4d1-73ad-4ca0-81bb-4696082c68b0"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 217,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("cf20d829-141a-483b-a047-f7cc88452d11"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 218,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("4f5b6c86-7cd1-4175-8135-017197397d28"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 219,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8992daf5-500c-4c28-aa32-c22caf1e4270"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 220,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("84fb5834-426a-4a1e-960c-0a5ad6e30723"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 221,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d591c44a-da6d-4e92-a0a6-6ab971ef5dc5"),
                            PermissionControllerID = 56
                        },
                        new
                        {
                            PermissionControllerActionID = 222,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("6a675981-ac35-4d32-b061-91f2be591287"),
                            PermissionControllerID = 56
                        },
                        new
                        {
                            PermissionControllerActionID = 223,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("1bc6063d-20b5-4c4a-bf68-c8eaed6cef9e"),
                            PermissionControllerID = 56
                        },
                        new
                        {
                            PermissionControllerActionID = 224,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("49194e0a-03f5-487f-9e3b-b0d481afeb84"),
                            PermissionControllerID = 56
                        },
                        new
                        {
                            PermissionControllerActionID = 225,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a84bee83-b493-4317-865e-98fc5fe66141"),
                            PermissionControllerID = 57
                        },
                        new
                        {
                            PermissionControllerActionID = 226,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c200fb07-b68e-4195-8969-9854e1801460"),
                            PermissionControllerID = 57
                        },
                        new
                        {
                            PermissionControllerActionID = 227,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("463f43a4-d23b-4e14-831d-d96554caa63f"),
                            PermissionControllerID = 57
                        },
                        new
                        {
                            PermissionControllerActionID = 228,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("66e11a37-73f6-4357-b079-0d7cf3899eac"),
                            PermissionControllerID = 57
                        },
                        new
                        {
                            PermissionControllerActionID = 229,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("24057d96-bd89-4516-b452-3b7e060bfe13"),
                            PermissionControllerID = 58
                        },
                        new
                        {
                            PermissionControllerActionID = 230,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("fd6c45b9-d714-4d9d-8b04-501bcf083a9f"),
                            PermissionControllerID = 58
                        },
                        new
                        {
                            PermissionControllerActionID = 231,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("14f8c90b-18b4-4d62-8558-a99b1bdef2ff"),
                            PermissionControllerID = 58
                        },
                        new
                        {
                            PermissionControllerActionID = 232,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("0a4f52c5-e411-4186-82e5-c2aee6d5cf1a"),
                            PermissionControllerID = 58
                        },
                        new
                        {
                            PermissionControllerActionID = 233,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c7216d65-2946-4591-8c63-6c6d3c1f60a1"),
                            PermissionControllerID = 59
                        },
                        new
                        {
                            PermissionControllerActionID = 234,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5ceb4f07-5e10-4c60-bf8e-25270ad28ae6"),
                            PermissionControllerID = 59
                        },
                        new
                        {
                            PermissionControllerActionID = 235,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5e7498b8-06c6-4a63-aa19-2525103cebf8"),
                            PermissionControllerID = 59
                        },
                        new
                        {
                            PermissionControllerActionID = 236,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("fb4e836c-6b56-4d43-bd79-4eb75ee37975"),
                            PermissionControllerID = 59
                        },
                        new
                        {
                            PermissionControllerActionID = 237,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("75ed7177-7200-40ad-827c-aa4e9cb3f43a"),
                            PermissionControllerID = 60
                        },
                        new
                        {
                            PermissionControllerActionID = 238,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0d667036-f3fb-454d-82d8-4abd64e4b641"),
                            PermissionControllerID = 60
                        },
                        new
                        {
                            PermissionControllerActionID = 239,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("370013bd-192a-4af5-aa26-9fbe00f4fa9d"),
                            PermissionControllerID = 60
                        },
                        new
                        {
                            PermissionControllerActionID = 240,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("869fe8c7-f734-4ae0-b192-8c37645ac56a"),
                            PermissionControllerID = 60
                        },
                        new
                        {
                            PermissionControllerActionID = 241,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("83ef1b1f-5595-4231-a38c-000699bdb85d"),
                            PermissionControllerID = 61
                        },
                        new
                        {
                            PermissionControllerActionID = 242,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("6ba85889-29cf-4872-86f6-6577e408a07a"),
                            PermissionControllerID = 61
                        },
                        new
                        {
                            PermissionControllerActionID = 243,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("bb635bd0-6c38-4319-9929-4d8e7f76407d"),
                            PermissionControllerID = 61
                        },
                        new
                        {
                            PermissionControllerActionID = 244,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("464699ef-5b92-448a-86a9-09c9d96264b8"),
                            PermissionControllerID = 61
                        },
                        new
                        {
                            PermissionControllerActionID = 245,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("064d9727-2e4a-4072-a6ec-ef7301d4b2b8"),
                            PermissionControllerID = 62
                        },
                        new
                        {
                            PermissionControllerActionID = 246,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("348e4d6d-ce63-4369-9725-252b22040426"),
                            PermissionControllerID = 62
                        },
                        new
                        {
                            PermissionControllerActionID = 247,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("21cbf86c-6196-45ef-bb49-7f8bcdff7ede"),
                            PermissionControllerID = 62
                        },
                        new
                        {
                            PermissionControllerActionID = 248,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7f607ad5-53c3-4ea4-b4cd-489195e5f4dd"),
                            PermissionControllerID = 62
                        });
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.Property<int>("RoleConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleConfigID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleConfig", "Permission");

                    b.HasData(
                        new
                        {
                            RoleConfigID = 1,
                            PermissionControllerActionID = 1,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 2,
                            PermissionControllerActionID = 2,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 3,
                            PermissionControllerActionID = 3,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 4,
                            PermissionControllerActionID = 4,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 5,
                            PermissionControllerActionID = 5,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 6,
                            PermissionControllerActionID = 6,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 7,
                            PermissionControllerActionID = 7,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 8,
                            PermissionControllerActionID = 8,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 9,
                            PermissionControllerActionID = 9,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 10,
                            PermissionControllerActionID = 10,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 11,
                            PermissionControllerActionID = 11,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 12,
                            PermissionControllerActionID = 12,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 13,
                            PermissionControllerActionID = 13,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 14,
                            PermissionControllerActionID = 14,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 15,
                            PermissionControllerActionID = 15,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 16,
                            PermissionControllerActionID = 16,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 17,
                            PermissionControllerActionID = 17,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 18,
                            PermissionControllerActionID = 18,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 19,
                            PermissionControllerActionID = 19,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 20,
                            PermissionControllerActionID = 20,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 21,
                            PermissionControllerActionID = 21,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 22,
                            PermissionControllerActionID = 22,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 23,
                            PermissionControllerActionID = 23,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 24,
                            PermissionControllerActionID = 24,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 25,
                            PermissionControllerActionID = 25,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 26,
                            PermissionControllerActionID = 26,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 27,
                            PermissionControllerActionID = 27,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 28,
                            PermissionControllerActionID = 28,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 29,
                            PermissionControllerActionID = 29,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 30,
                            PermissionControllerActionID = 30,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 31,
                            PermissionControllerActionID = 31,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 32,
                            PermissionControllerActionID = 32,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 33,
                            PermissionControllerActionID = 33,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 34,
                            PermissionControllerActionID = 34,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 35,
                            PermissionControllerActionID = 35,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 36,
                            PermissionControllerActionID = 36,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 37,
                            PermissionControllerActionID = 37,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 38,
                            PermissionControllerActionID = 38,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 39,
                            PermissionControllerActionID = 39,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 40,
                            PermissionControllerActionID = 40,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 41,
                            PermissionControllerActionID = 41,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 42,
                            PermissionControllerActionID = 42,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 43,
                            PermissionControllerActionID = 43,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 44,
                            PermissionControllerActionID = 44,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 45,
                            PermissionControllerActionID = 45,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 46,
                            PermissionControllerActionID = 46,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 47,
                            PermissionControllerActionID = 47,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 48,
                            PermissionControllerActionID = 48,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 49,
                            PermissionControllerActionID = 49,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 50,
                            PermissionControllerActionID = 50,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 51,
                            PermissionControllerActionID = 51,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 52,
                            PermissionControllerActionID = 52,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 53,
                            PermissionControllerActionID = 53,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 54,
                            PermissionControllerActionID = 54,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 55,
                            PermissionControllerActionID = 55,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 56,
                            PermissionControllerActionID = 56,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 57,
                            PermissionControllerActionID = 57,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 58,
                            PermissionControllerActionID = 58,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 59,
                            PermissionControllerActionID = 59,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 60,
                            PermissionControllerActionID = 60,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 61,
                            PermissionControllerActionID = 61,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 62,
                            PermissionControllerActionID = 62,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 63,
                            PermissionControllerActionID = 63,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 64,
                            PermissionControllerActionID = 64,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 65,
                            PermissionControllerActionID = 65,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 66,
                            PermissionControllerActionID = 66,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 67,
                            PermissionControllerActionID = 67,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 68,
                            PermissionControllerActionID = 68,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 69,
                            PermissionControllerActionID = 69,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 70,
                            PermissionControllerActionID = 70,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 71,
                            PermissionControllerActionID = 71,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 72,
                            PermissionControllerActionID = 72,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 73,
                            PermissionControllerActionID = 73,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 74,
                            PermissionControllerActionID = 74,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 75,
                            PermissionControllerActionID = 75,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 76,
                            PermissionControllerActionID = 76,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 77,
                            PermissionControllerActionID = 77,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 78,
                            PermissionControllerActionID = 78,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 79,
                            PermissionControllerActionID = 79,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 80,
                            PermissionControllerActionID = 80,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 81,
                            PermissionControllerActionID = 81,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 82,
                            PermissionControllerActionID = 82,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 83,
                            PermissionControllerActionID = 83,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 84,
                            PermissionControllerActionID = 84,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 85,
                            PermissionControllerActionID = 85,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 86,
                            PermissionControllerActionID = 86,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 87,
                            PermissionControllerActionID = 87,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 88,
                            PermissionControllerActionID = 88,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 89,
                            PermissionControllerActionID = 89,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 90,
                            PermissionControllerActionID = 90,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 91,
                            PermissionControllerActionID = 91,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 92,
                            PermissionControllerActionID = 92,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 93,
                            PermissionControllerActionID = 93,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 94,
                            PermissionControllerActionID = 94,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 95,
                            PermissionControllerActionID = 95,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 96,
                            PermissionControllerActionID = 96,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 97,
                            PermissionControllerActionID = 97,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 98,
                            PermissionControllerActionID = 98,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 99,
                            PermissionControllerActionID = 99,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 100,
                            PermissionControllerActionID = 100,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 101,
                            PermissionControllerActionID = 101,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 102,
                            PermissionControllerActionID = 102,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 103,
                            PermissionControllerActionID = 103,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 104,
                            PermissionControllerActionID = 104,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 109,
                            PermissionControllerActionID = 109,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 110,
                            PermissionControllerActionID = 110,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 111,
                            PermissionControllerActionID = 111,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 112,
                            PermissionControllerActionID = 112,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 113,
                            PermissionControllerActionID = 113,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 114,
                            PermissionControllerActionID = 114,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 115,
                            PermissionControllerActionID = 115,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 116,
                            PermissionControllerActionID = 116,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 117,
                            PermissionControllerActionID = 117,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 118,
                            PermissionControllerActionID = 118,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 119,
                            PermissionControllerActionID = 119,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 120,
                            PermissionControllerActionID = 120,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 121,
                            PermissionControllerActionID = 121,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 122,
                            PermissionControllerActionID = 122,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 123,
                            PermissionControllerActionID = 123,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 124,
                            PermissionControllerActionID = 124,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 129,
                            PermissionControllerActionID = 129,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 130,
                            PermissionControllerActionID = 130,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 131,
                            PermissionControllerActionID = 131,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 132,
                            PermissionControllerActionID = 132,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 133,
                            PermissionControllerActionID = 133,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 134,
                            PermissionControllerActionID = 134,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 135,
                            PermissionControllerActionID = 135,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 136,
                            PermissionControllerActionID = 136,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 137,
                            PermissionControllerActionID = 137,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 138,
                            PermissionControllerActionID = 138,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 139,
                            PermissionControllerActionID = 139,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 140,
                            PermissionControllerActionID = 140,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 141,
                            PermissionControllerActionID = 141,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 142,
                            PermissionControllerActionID = 142,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 143,
                            PermissionControllerActionID = 143,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 144,
                            PermissionControllerActionID = 144,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 145,
                            PermissionControllerActionID = 145,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 146,
                            PermissionControllerActionID = 146,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 147,
                            PermissionControllerActionID = 147,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 148,
                            PermissionControllerActionID = 148,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 149,
                            PermissionControllerActionID = 149,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 150,
                            PermissionControllerActionID = 150,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 151,
                            PermissionControllerActionID = 151,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 152,
                            PermissionControllerActionID = 152,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 153,
                            PermissionControllerActionID = 153,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 154,
                            PermissionControllerActionID = 154,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 155,
                            PermissionControllerActionID = 155,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 156,
                            PermissionControllerActionID = 156,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 157,
                            PermissionControllerActionID = 157,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 158,
                            PermissionControllerActionID = 158,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 159,
                            PermissionControllerActionID = 159,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 160,
                            PermissionControllerActionID = 160,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 161,
                            PermissionControllerActionID = 161,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 162,
                            PermissionControllerActionID = 162,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 163,
                            PermissionControllerActionID = 163,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 164,
                            PermissionControllerActionID = 164,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 169,
                            PermissionControllerActionID = 169,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 170,
                            PermissionControllerActionID = 170,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 171,
                            PermissionControllerActionID = 171,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 172,
                            PermissionControllerActionID = 172,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 173,
                            PermissionControllerActionID = 173,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 174,
                            PermissionControllerActionID = 174,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 175,
                            PermissionControllerActionID = 175,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 176,
                            PermissionControllerActionID = 176,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 178,
                            PermissionControllerActionID = 178,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 179,
                            PermissionControllerActionID = 179,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 180,
                            PermissionControllerActionID = 180,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 181,
                            PermissionControllerActionID = 181,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 182,
                            PermissionControllerActionID = 182,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 183,
                            PermissionControllerActionID = 183,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 184,
                            PermissionControllerActionID = 184,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 185,
                            PermissionControllerActionID = 185,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 186,
                            PermissionControllerActionID = 186,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 187,
                            PermissionControllerActionID = 187,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 188,
                            PermissionControllerActionID = 188,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 189,
                            PermissionControllerActionID = 189,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 190,
                            PermissionControllerActionID = 190,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 191,
                            PermissionControllerActionID = 191,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 192,
                            PermissionControllerActionID = 192,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 205,
                            PermissionControllerActionID = 205,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 206,
                            PermissionControllerActionID = 206,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 207,
                            PermissionControllerActionID = 207,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 208,
                            PermissionControllerActionID = 208,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 209,
                            PermissionControllerActionID = 209,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 210,
                            PermissionControllerActionID = 210,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 211,
                            PermissionControllerActionID = 211,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 212,
                            PermissionControllerActionID = 212,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 221,
                            PermissionControllerActionID = 221,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 222,
                            PermissionControllerActionID = 222,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 223,
                            PermissionControllerActionID = 223,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 224,
                            PermissionControllerActionID = 224,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 229,
                            PermissionControllerActionID = 229,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 230,
                            PermissionControllerActionID = 230,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 231,
                            PermissionControllerActionID = 231,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 232,
                            PermissionControllerActionID = 232,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 237,
                            PermissionControllerActionID = 237,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 238,
                            PermissionControllerActionID = 238,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 239,
                            PermissionControllerActionID = 239,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 240,
                            PermissionControllerActionID = 240,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 241,
                            PermissionControllerActionID = 241,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 242,
                            PermissionControllerActionID = 242,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 243,
                            PermissionControllerActionID = 243,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 244,
                            PermissionControllerActionID = 244,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 245,
                            PermissionControllerActionID = 245,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 246,
                            PermissionControllerActionID = 246,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 247,
                            PermissionControllerActionID = 247,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 248,
                            PermissionControllerActionID = 248,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 105,
                            PermissionControllerActionID = 105,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 106,
                            PermissionControllerActionID = 106,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 107,
                            PermissionControllerActionID = 107,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 108,
                            PermissionControllerActionID = 108,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 125,
                            PermissionControllerActionID = 125,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 126,
                            PermissionControllerActionID = 126,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 127,
                            PermissionControllerActionID = 127,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 128,
                            PermissionControllerActionID = 128,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 165,
                            PermissionControllerActionID = 165,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 166,
                            PermissionControllerActionID = 166,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 167,
                            PermissionControllerActionID = 167,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 168,
                            PermissionControllerActionID = 168,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 193,
                            PermissionControllerActionID = 193,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 194,
                            PermissionControllerActionID = 194,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 195,
                            PermissionControllerActionID = 195,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 196,
                            PermissionControllerActionID = 196,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 197,
                            PermissionControllerActionID = 197,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 198,
                            PermissionControllerActionID = 198,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 199,
                            PermissionControllerActionID = 199,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 200,
                            PermissionControllerActionID = 200,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 201,
                            PermissionControllerActionID = 201,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 202,
                            PermissionControllerActionID = 202,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 203,
                            PermissionControllerActionID = 203,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 204,
                            PermissionControllerActionID = 204,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 213,
                            PermissionControllerActionID = 213,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 214,
                            PermissionControllerActionID = 214,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 215,
                            PermissionControllerActionID = 215,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 216,
                            PermissionControllerActionID = 216,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 217,
                            PermissionControllerActionID = 217,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 218,
                            PermissionControllerActionID = 218,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 219,
                            PermissionControllerActionID = 219,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 220,
                            PermissionControllerActionID = 220,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 225,
                            PermissionControllerActionID = 225,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 226,
                            PermissionControllerActionID = 226,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 227,
                            PermissionControllerActionID = 227,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 228,
                            PermissionControllerActionID = 228,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 233,
                            PermissionControllerActionID = 233,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 234,
                            PermissionControllerActionID = 234,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 235,
                            PermissionControllerActionID = 235,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 236,
                            PermissionControllerActionID = 236,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("UserId");

                    b.ToTable("Activity", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Property<int>("AddressTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddressTypesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("AddressTypesID");

                    b.HasIndex("UserId");

                    b.ToTable("AddressTypes", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Property<int>("BanksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BankGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("Banks", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Property<int>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BlockGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Block", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.Property<int>("BranchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BranchesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BranchesID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Branches", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CaptainZone", b =>
                {
                    b.Property<int>("CaptainZoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<Guid>("CaptainZoneGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CaptainZoneID");

                    b.HasIndex("BlockID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("CaptainZone", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CitiesCovered", b =>
                {
                    b.Property<int>("CitiesCoveredID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CitiesCoveredGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CitiesCoveredID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("CitiesCovered", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.HasIndex("RegionID");

                    b.HasIndex("UserId");

                    b.ToTable("City", "Setting");

                    b.HasData(
                        new
                        {
                            CityID = 1,
                            CityGuid = new Guid("fa819ce4-9f96-4a91-8cff-e3d85b5b3433"),
                            CreateDate = new DateTime(2022, 6, 2, 19, 51, 48, 256, DateTimeKind.Local).AddTicks(6109),
                            EnableDate = new DateTime(2022, 6, 2, 19, 51, 48, 256, DateTimeKind.Local).AddTicks(6732),
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            Place = "",
                            RegionID = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.CompanyWorkingHours", b =>
                {
                    b.Property<int>("CompanyWorkingHoursID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CompanyWorkingHoursGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaysVac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstShiftVacWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstShiftVacWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstShiftWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstShiftWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SecondShiftVacWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondShiftVacWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondShiftWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondShiftWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CompanyWorkingHoursID");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyWorkingHours", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.Property<int>("ConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryPriceVatPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryPriceWithoutVat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCloseCompletePurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmsSend")
                        .HasColumnType("bit");

                    b.Property<decimal>("LastSmsBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxDeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinDeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverKmFare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapchatLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsappLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationID");

                    b.HasIndex("UserId");

                    b.ToTable("Configuration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CountryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Country", "Setting");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            CountryGuid = new Guid("cec17a49-6e66-4f4e-a719-c193c4d8506a"),
                            CreateDate = new DateTime(2022, 6, 2, 19, 51, 48, 248, DateTimeKind.Local).AddTicks(8137),
                            EnableDate = new DateTime(2022, 6, 2, 19, 51, 48, 254, DateTimeKind.Local).AddTicks(8730),
                            Extension = "00966",
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "السعودية",
                            NameEN = "SA",
                            Place = "",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Property<int>("DepartmentsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Isunique")
                        .HasColumnType("bit");

                    b.Property<int>("MainCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("SiteImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsID");

                    b.HasIndex("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Departments", "Setting");

                    b.HasData(
                        new
                        {
                            DepartmentsID = 1,
                            CreateDate = new DateTime(2022, 6, 2, 19, 51, 48, 260, DateTimeKind.Local).AddTicks(8840),
                            DepartmentsGuid = new Guid("40b819d0-fa34-49d5-92fd-636232c6bbcc"),
                            EnableDate = new DateTime(2022, 6, 2, 19, 51, 48, 260, DateTimeKind.Local).AddTicks(9400),
                            IsDeleted = false,
                            IsEnable = true,
                            Isunique = false,
                            MainCategoryID = 1,
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiscountGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiscountTypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DiscountID");

                    b.HasIndex("UserId");

                    b.ToTable("Discount", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.Property<int>("HelpQuestionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HelpQuestionsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HelpUserType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForOrder")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("HelpQuestionsID");

                    b.HasIndex("UserId");

                    b.ToTable("HelpQuestions", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Inqueries", b =>
                {
                    b.Property<int>("InqueriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InqueriesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InqueriesID");

                    b.ToTable("Inqueries", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Property<int>("JobsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("JobsID");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs", "Setting");

                    b.HasData(
                        new
                        {
                            JobsID = 1,
                            CreateDate = new DateTime(2022, 6, 2, 19, 51, 48, 259, DateTimeKind.Local).AddTicks(7575),
                            EnableDate = new DateTime(2022, 6, 2, 19, 51, 48, 259, DateTimeKind.Local).AddTicks(8246),
                            IsDeleted = false,
                            IsEnable = true,
                            JobTypeId = 2,
                            JobsGuid = new Guid("b3698327-9f65-4296-9ab9-601085d27dd5"),
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.Property<int>("KeyWordsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("KeyWordsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("KeyWordsID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.ToTable("KeyWords", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.LogTextMessage", b =>
                {
                    b.Property<int>("LogTextMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSend")
                        .HasColumnType("bit");

                    b.Property<Guid>("LogTextMessageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageReasonId")
                        .HasColumnType("int");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("LogTextMessageID");

                    b.ToTable("LogTextMessage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Property<int>("MainCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainCategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("MainCategory", "Setting");

                    b.HasData(
                        new
                        {
                            MainCategoryID = 1,
                            CreateDate = new DateTime(2022, 6, 2, 19, 51, 48, 260, DateTimeKind.Local).AddTicks(3043),
                            EnableDate = new DateTime(2022, 6, 2, 19, 51, 48, 260, DateTimeKind.Local).AddTicks(3616),
                            IsDeleted = false,
                            IsEnable = true,
                            MainCategoryGuid = new Guid("d65da8a9-c7f4-4256-9133-bacc6286575e"),
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Property<int>("MainPageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Property<int>("MainPageDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageDetailsID");

                    b.HasIndex("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageDetails", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.Property<int>("MainPageImagesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("MainPageDetailsID")
                        .HasColumnType("int");

                    b.Property<Guid>("MainPageImagesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageImagesID");

                    b.HasIndex("MainPageDetailsID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageImages", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Property<int>("NationalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("NationalityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Nationality", "Setting");

                    b.HasData(
                        new
                        {
                            NationalityID = 1,
                            CreateDate = new DateTime(2022, 6, 2, 19, 51, 48, 257, DateTimeKind.Local).AddTicks(3793),
                            EnableDate = new DateTime(2022, 6, 2, 19, 51, 48, 257, DateTimeKind.Local).AddTicks(4344),
                            IsDeleted = false,
                            IsEnable = true,
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            NationalityGuid = new Guid("c8ce8ec1-b195-415a-a9f1-7596b69bb053"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("DescEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("OrderStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderStatusType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PackageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<decimal>("Percent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Package", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.Property<int>("PaymentConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BanksID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBANnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAnrdoid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<string>("UserIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VendorAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorIOS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentConfigurationID");

                    b.HasIndex("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentConfiguration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.Property<int>("PaymentWayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentWayGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentWayID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentWay", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Region", "Setting");

                    b.HasData(
                        new
                        {
                            RegionID = 1,
                            CountryID = 1,
                            CreateDate = new DateTime(2022, 6, 2, 19, 51, 48, 255, DateTimeKind.Local).AddTicks(6517),
                            EnableDate = new DateTime(2022, 6, 2, 19, 51, 48, 255, DateTimeKind.Local).AddTicks(7084),
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            Place = "",
                            RegionGuid = new Guid("608a4c04-df90-4c25-95ba-9a43b556262f"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.RegionCity", b =>
                {
                    b.Property<int>("RegionCityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("RegionCityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("RegionCityID");

                    b.HasIndex("UserId");

                    b.ToTable("RegionCity", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Property<int>("ShippingCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlockCovered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShippingCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingEnum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ShippingCompanyID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompanyBlocks", b =>
                {
                    b.Property<int>("ShippingCompanyBlocksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ShippingCompanyBlocksGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ShippingCompanyBlocksID");

                    b.HasIndex("BlockID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingCompanyBlocks", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.Property<int>("SliderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayIn")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("SliderGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SliderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("SliderID");

                    b.HasIndex("UserId");

                    b.ToTable("Slider", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.StatusCompany", b =>
                {
                    b.Property<int>("StatusCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("StatusCoId")
                        .HasColumnType("int");

                    b.Property<Guid>("StatusCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusHomeMadeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("StatusCompanyID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.ToTable("StatusCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Subscribe", b =>
                {
                    b.Property<int>("SubscribeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscribeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscribeID");

                    b.ToTable("Subscribe", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Tokens", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("TokenVal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.Property<int>("CartDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CartDetailsGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CartMasterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("deliveryprice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("distanceKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartDetailsID");

                    b.HasIndex("CartMasterID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Property<int>("CartMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<Guid>("CartMasterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CartMasterStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Promocode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PromocodeDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("tax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CartMasterID");

                    b.HasIndex("CustomersID");

                    b.ToTable("CartMaster", "Site");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.Property<int>("TempPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("TempPermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TempPermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("TempPermission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserJWTToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb3454de-33be-4579-8276-40a1b8193826",
                            Email = "SystemUser@Admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SystemUser@Admin.com",
                            NormalizedUserName = "SYSTEMUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEP65QXLX6e94ehLc9ntv07Q7n/aO6wf8y6j/z15XE7hfgyZLCNvHmM3Ar6SaTwzC3g==",
                            PhoneNumber = "012",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ad3d8047-7234-4521-ac63-aef667b73d61",
                            TwoFactorEnabled = false,
                            UserName = "SystemUser",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.Property<int>("EnableHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnableHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("EnableHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("EnableHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DailyQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TimeTakenProcess")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Product", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductImage", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.Property<int>("ProductQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductQuestionID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductQuestion", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.Property<int>("VacHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<DateTime>("VacFrom")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VacHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VacTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VacHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VacHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorBalance", b =>
                {
                    b.Property<int>("VendorBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorBlanceID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorBalance", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorSupport", b =>
                {
                    b.Property<int>("VendorSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpQuestionsID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorSupportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorSupportID");

                    b.HasIndex("HelpQuestionsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorSupport", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Property<int>("VendorsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutStoreAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutStoreEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActivityID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .HasColumnType("int");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("CRPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaysVac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDaysVac")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaysWork")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowContact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVac")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaarofNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyTarget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NationalityID")
                        .HasColumnType("int");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("PickupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterType")
                        .HasColumnType("int");

                    b.Property<string>("SeconedNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VacWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VacWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VendorsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("WorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkingTimes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorsID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("BanksID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors", "Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TransactionCard")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.HasOne("Homemade.Model.BankTransaction.TransactionCard", "TransactionCard")
                        .WithMany("TransactionCardLog")
                        .HasForeignKey("TransactionCardTransactionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.HasOne("Homemade.Model.Setting.AddressTypes", "AddressTypes")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("AddressTypesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AddressTypes");

                    b.Navigation("Block");

                    b.Navigation("Customers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Customers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DeliverySetting", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DeliverySetting")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverBlance")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("DriverBlance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("DriverBlance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverBlance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverSupport", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverSupport")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.HelpQuestions", "HelpQuestions")
                        .WithMany("DriverSupport")
                        .HasForeignKey("HelpQuestionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("DriverSupport")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverSupport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("HelpQuestions");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Drivers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Drivers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.RegionCity", "RegionCity")
                        .WithMany("Drivers")
                        .HasForeignKey("RegionCityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("RegionCity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.TransactionSTCPay", "TransactionSTCPay")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("TransactionSTCPayID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionType")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Jobs", "Jobs")
                        .WithMany("Employees")
                        .HasForeignKey("JobsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Jobs");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceMaster");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceHistory", b =>
                {
                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceHistory")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.ListTransfer", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("ListTransfer")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("ListTransfer")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ListTransfer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Notification")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("Notification")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("Notification")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderRate", "OrderRate")
                        .WithMany("Notification")
                        .HasForeignKey("OrderRateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("Notification")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.ProdQuestion", "ProdQuestion")
                        .WithMany("Notification")
                        .HasForeignKey("ProdQuestionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Notification")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("OrderRate");

                    b.Navigation("OrderVendor");

                    b.Navigation("ProdQuestion");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderPromo")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("OrderPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderRate")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderRate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("OrderVendor")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("OrderVendor")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("OrderVendor")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderVendor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("OrderVendor")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drivers");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("Package");

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.HasOne("Homemade.Model.Customer.CustomerLocation", "CustomerLocation")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("Orders")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("OrderStatus");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PromoCode")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequest", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("QuantitiesRequest")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("QuantitiesRequest")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequestProduct", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("QuantitiesRequestProduct")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.QuantitiesRequest", "QuantitiesRequest")
                        .WithMany("QuantitiesRequestProduct")
                        .HasForeignKey("QuantitiesRequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("QuantitiesRequestProduct")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("QuantitiesRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.ShipCompanyHistory", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("ShipCompanyHistory")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("ShipCompanyHistory")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderVendor");

                    b.Navigation("ShippingCompany");
                });

            modelBuilder.Entity("Homemade.Model.Order.TabCharge", b =>
                {
                    b.HasOne("Homemade.Model.Customer.CustomerBalance", "CustomerBalance")
                        .WithMany("TabCharge")
                        .HasForeignKey("CustomerBalanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("TabCharge")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TabCharge")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerBalance");

                    b.Navigation("Customers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Order.TabChargeExLog", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("TabChargeExLog")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TabChargeExLog")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("VendorPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorPromo")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.HasOne("Homemade.Model.PermissionAction", "PermissionActions")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.PermissionController", "PermissionControllers")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionControllerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionActions");

                    b.Navigation("PermissionControllers");
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("RoleConfig")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("RoleConfig")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Activity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("AddressTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Banks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Block")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Block")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Branches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CaptainZone", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CaptainZone")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("CaptainZone")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CaptainZone")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Block");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CitiesCovered", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("CitiesCovered")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CitiesCovered")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Region", "Region")
                        .WithMany("City")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("City")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CompanyWorkingHours", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CompanyWorkingHours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Configuration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Country")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainCategory", "MainCategory")
                        .WithMany("Departments")
                        .HasForeignKey("MainCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Departments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Discount", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Discount")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("HelpQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("KeyWords")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("KeyWords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Departments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainCategory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPage", "MainPage")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("MainPageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPageDetails", "MainPageDetails")
                        .WithMany("MainPageImages")
                        .HasForeignKey("MainPageDetailsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPageDetails");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Nationality")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Package")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentWay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Country", "Country")
                        .WithMany("Region")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Region")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.RegionCity", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("RegionCity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompanyBlocks", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("ShippingCompanyBlocks")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("ShippingCompanyBlocks")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ShippingCompanyBlocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Block");

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Slider")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.StatusCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("StatusCompany")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("StatusCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.HasOne("Homemade.Model.Site.CartMaster", "CartMaster")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CartMaster");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CartMaster")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("TempPermission")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("TempPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("EnableHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("EnableHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("Product")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Product")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Product")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductImage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VacHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VacHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorBalance", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("VendorBalance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("VendorBalance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorBalance")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorSupport", b =>
                {
                    b.HasOne("Homemade.Model.Setting.HelpQuestions", "HelpQuestions")
                        .WithMany("VendorSupport")
                        .HasForeignKey("HelpQuestionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("VendorSupport")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorSupport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorSupport")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HelpQuestions");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Activity", "Activity")
                        .WithMany("Vendors")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("Vendors")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("Vendors")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Vendors")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Vendors")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("Vendors")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Vendors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activity");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Navigation("TransactionCardLog");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.Navigation("TabCharge");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Navigation("CartMaster");

                    b.Navigation("CustomerBalance");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Notification");

                    b.Navigation("Orders");

                    b.Navigation("ProdQuestion");

                    b.Navigation("TabCharge");

                    b.Navigation("TabChargeExLog");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Navigation("Notification");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Navigation("CaptainZone");

                    b.Navigation("DriverBlance");

                    b.Navigation("DriverSupport");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Navigation("TranLogSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Navigation("CustomerBalance");

                    b.Navigation("DriverBlance");

                    b.Navigation("VendorBalance");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceHistory");

                    b.Navigation("ListTransfer");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Navigation("CustomerBalance");

                    b.Navigation("DriverBlance");

                    b.Navigation("DriverSupport");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderRate");

                    b.Navigation("ShipCompanyHistory");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("OrderVendor");

                    b.Navigation("TabCharge");

                    b.Navigation("TabChargeExLog");

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("Orders");

                    b.Navigation("VendorPromo");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequest", b =>
                {
                    b.Navigation("QuantitiesRequestProduct");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Navigation("ListTransfer");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Navigation("CaptainZone");

                    b.Navigation("CustomerLocation");

                    b.Navigation("ShippingCompanyBlocks");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("CitiesCovered");

                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Navigation("Region");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Navigation("KeyWords");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.Navigation("DriverSupport");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Navigation("MainPageDetails");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Navigation("MainPageImages");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Navigation("OrderHistory");

                    b.Navigation("Orders");

                    b.Navigation("OrderVendor");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Navigation("OrderVendor");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Homemade.Model.Setting.RegionCity", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Navigation("OrderVendor");

                    b.Navigation("ShipCompanyHistory");

                    b.Navigation("ShippingCompanyBlocks");

                    b.Navigation("StatusCompany");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("AddressTypes");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("CaptainZone");

                    b.Navigation("CitiesCovered");

                    b.Navigation("City");

                    b.Navigation("CompanyWorkingHours");

                    b.Navigation("Configuration");

                    b.Navigation("Country");

                    b.Navigation("CustomerBalance");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("DeliverySetting");

                    b.Navigation("Departments");

                    b.Navigation("Discount");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("DriverSupport");

                    b.Navigation("Employees");

                    b.Navigation("EnableHistory");

                    b.Navigation("HelpQuestions");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Jobs");

                    b.Navigation("KeyWords");

                    b.Navigation("ListTransfer");

                    b.Navigation("MainCategory");

                    b.Navigation("MainPage");

                    b.Navigation("MainPageDetails");

                    b.Navigation("MainPageImages");

                    b.Navigation("Nationality");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderPromo");

                    b.Navigation("OrderRate");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("Package");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("PaymentStatus");

                    b.Navigation("PaymentWay");

                    b.Navigation("ProdQuestion");

                    b.Navigation("Product");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");

                    b.Navigation("PromoCode");

                    b.Navigation("QuantitiesRequest");

                    b.Navigation("QuantitiesRequestProduct");

                    b.Navigation("Region");

                    b.Navigation("RegionCity");

                    b.Navigation("ShippingCompany");

                    b.Navigation("ShippingCompanyBlocks");

                    b.Navigation("Slider");

                    b.Navigation("StatusCompany");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("TransactionType");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorPromo");

                    b.Navigation("Vendors");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("OrderItems");

                    b.Navigation("ProdQuestion");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");

                    b.Navigation("QuantitiesRequestProduct");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Navigation("EnableHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("QuantitiesRequest");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorPromo");

                    b.Navigation("VendorSupport");
                });
#pragma warning restore 612, 618
        }
    }
}
