// <auto-generated />
using System;
using Homemade.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Homemade.DAL.Contract.Migrations
{
    [DbContext(typeof(HomemadeContext))]
    [Migration("20211003192011_NewEditPermissionDriver")]
    partial class NewEditPermissionDriver
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRedirect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMSSentToUser")
                        .HasColumnType("bit");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TransactionCard", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.Property<int>("TransactionCardLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionCardLogGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TransactionCardTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("TransactionCardLogID");

                    b.HasIndex("TransactionCardTransactionID");

                    b.ToTable("TransactionCardLog", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.Property<int>("CustomerFavouritesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerFavouritesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerFavouritesID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerFavourites", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Property<int>("CustomerLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressTypesID")
                        .HasColumnType("int");

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerLocationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerfiy")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerLocationID");

                    b.HasIndex("AddressTypesID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerLocation", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Property<int>("CustomersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomersID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Property<int>("DriverBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("After")
                        .HasColumnType("float");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Before")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverBlance", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Property<int>("DriversID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("BirthDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CarLicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarPictrue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HijiriInsuranceEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriBirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriIDDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IDDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("InsuranceEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenTransaction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PCOEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PCOEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PCOHijriEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberStc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PhoneType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PrivateHijriLicenseEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrivateLicenseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrivateLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PrivateLicenseTypeEndDate")
                        .HasColumnType("tinyint");

                    b.Property<string>("RequestNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VerifyStc")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifyStcDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DriversID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.Property<int>("TranLogSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<Guid>("TranLogSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionSTCPayID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TranLogSTCPayID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionSTCPayID");

                    b.HasIndex("UserId");

                    b.ToTable("TranLogSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Property<int>("TransactionSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquriyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentOrderReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STCStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionSTCPayID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("TransactionTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionType", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.Property<int>("EntityEmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDateHijri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDateMilady")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityEmpGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobsID")
                        .HasColumnType("int");

                    b.Property<string>("LastNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MidNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityEmpID");

                    b.HasIndex("CityID");

                    b.HasIndex("JobsID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees", "Emp");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceDetailsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceDetails", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Property<int>("InvoiceMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceMasterGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("PerHomeMade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("InvoiceMaster", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NotificationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderRateID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int?>("ProdQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int?>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProdQuestionID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Notification", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.Property<int>("OrderHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderHistoryID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderItemsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProdImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderItemsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItems", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.Property<int>("OrderPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderPromoID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Property<int>("OrderRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderRateGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("RateDelivery")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RateOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderRate", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Property<int>("OrderVendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderVendorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("OrderVendorID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("OrderVendor", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Property<int>("OrdersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerLocationID")
                        .HasColumnType("int");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrdersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrdersID");

                    b.HasIndex("CustomerLocationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Property<int>("ProdQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProdQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProdQuestionID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderQuestion", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Property<int>("PromoCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double>("LimitCount")
                        .HasColumnType("float");

                    b.Property<Guid>("PromoCodeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PromoType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("PromoCode", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.Property<int>("VendorPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorPromoID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Property<int>("PermissionActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionActionID");

                    b.ToTable("PermissionAction", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Property<int>("PermissionControllerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionControllerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionControllerNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionControllerNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionControllerID");

                    b.ToTable("PermissionController", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerID = 1,
                            PermissionControllerGuid = new Guid("c08a8982-862c-48db-81f1-410f8d51173f"),
                            PermissionControllerNameAr = "الصلاحيات",
                            PermissionControllerNameEn = "Permission"
                        },
                        new
                        {
                            PermissionControllerID = 2,
                            PermissionControllerGuid = new Guid("fa59e28e-616b-468b-8265-986b1fbb7152"),
                            PermissionControllerNameAr = "الدور",
                            PermissionControllerNameEn = "Role"
                        },
                        new
                        {
                            PermissionControllerID = 3,
                            PermissionControllerGuid = new Guid("d8291b2b-b422-4004-aea5-671e123c5a96"),
                            PermissionControllerNameAr = "الدولة",
                            PermissionControllerNameEn = "Country"
                        },
                        new
                        {
                            PermissionControllerID = 4,
                            PermissionControllerGuid = new Guid("e28ca851-9cdf-4c23-8fea-e4930e05330a"),
                            PermissionControllerNameAr = "المنطقة",
                            PermissionControllerNameEn = "Region"
                        },
                        new
                        {
                            PermissionControllerID = 5,
                            PermissionControllerGuid = new Guid("38de289a-7953-498f-b417-121250b6949a"),
                            PermissionControllerNameAr = "المدينة",
                            PermissionControllerNameEn = "City"
                        },
                        new
                        {
                            PermissionControllerID = 6,
                            PermissionControllerGuid = new Guid("e6ded42a-0e40-4b9e-bd39-8b0d5fca3086"),
                            PermissionControllerNameAr = "الوظائف",
                            PermissionControllerNameEn = "Jobs"
                        },
                        new
                        {
                            PermissionControllerID = 7,
                            PermissionControllerGuid = new Guid("c47d169d-94fd-4a82-b139-40da93eca9cd"),
                            PermissionControllerNameAr = "الاقسام",
                            PermissionControllerNameEn = "Departments"
                        },
                        new
                        {
                            PermissionControllerID = 8,
                            PermissionControllerGuid = new Guid("48a9a60d-ae8f-473c-a4ce-a6ebeb7800e4"),
                            PermissionControllerNameAr = "الموظفين",
                            PermissionControllerNameEn = "Employees"
                        },
                        new
                        {
                            PermissionControllerID = 9,
                            PermissionControllerGuid = new Guid("f6d81eef-371c-446a-be40-15b6ff253b55"),
                            PermissionControllerNameAr = "الجنسية",
                            PermissionControllerNameEn = "Nationality"
                        },
                        new
                        {
                            PermissionControllerID = 10,
                            PermissionControllerGuid = new Guid("9812fb5d-f9a2-43c8-959d-6d4fe5b2e765"),
                            PermissionControllerNameAr = "اعدادات الدور",
                            PermissionControllerNameEn = "Role Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 11,
                            PermissionControllerGuid = new Guid("867a6242-45b2-4585-b6dd-098ca2e92f7a"),
                            PermissionControllerNameAr = "الاعدادات",
                            PermissionControllerNameEn = "Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 12,
                            PermissionControllerGuid = new Guid("75ad1170-2d7f-463f-b5d7-ae26b630e8df"),
                            PermissionControllerNameAr = "البنوك",
                            PermissionControllerNameEn = "Bank"
                        },
                        new
                        {
                            PermissionControllerID = 13,
                            PermissionControllerGuid = new Guid("8efc9439-49d5-4878-b1a6-c75358eca180"),
                            PermissionControllerNameAr = "طرق الدفع",
                            PermissionControllerNameEn = "PaymentWay"
                        },
                        new
                        {
                            PermissionControllerID = 14,
                            PermissionControllerGuid = new Guid("07a80ab9-7a72-4a25-8ddc-2f9ba9055bf7"),
                            PermissionControllerNameAr = "الأنشطة",
                            PermissionControllerNameEn = "Activity"
                        },
                        new
                        {
                            PermissionControllerID = 15,
                            PermissionControllerGuid = new Guid("f48bc3b5-076e-4cf7-ab5f-dcd1d984278d"),
                            PermissionControllerNameAr = "الأحياء",
                            PermissionControllerNameEn = "Block"
                        },
                        new
                        {
                            PermissionControllerID = 16,
                            PermissionControllerGuid = new Guid("bd887ce1-7c23-4c74-b652-3b95fc73feeb"),
                            PermissionControllerNameAr = "باقات التجار",
                            PermissionControllerNameEn = "Package"
                        },
                        new
                        {
                            PermissionControllerID = 17,
                            PermissionControllerGuid = new Guid("8c99af5d-3a48-4bf8-be35-55a1cfd81e3f"),
                            PermissionControllerNameAr = "حالات الدفع",
                            PermissionControllerNameEn = "PaymentStatus"
                        },
                        new
                        {
                            PermissionControllerID = 18,
                            PermissionControllerGuid = new Guid("8d9922ba-9232-46e6-87a7-7a84d627ac1d"),
                            PermissionControllerNameAr = "اعدادت الشركه",
                            PermissionControllerNameEn = " Company Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 19,
                            PermissionControllerGuid = new Guid("ee198760-0eaa-496d-83ed-268661b93bfd"),
                            PermissionControllerNameAr = "اعدادت الدفع",
                            PermissionControllerNameEn = "Payment Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 20,
                            PermissionControllerGuid = new Guid("cbf35f18-9f34-4a05-92fb-6fb046192d85"),
                            PermissionControllerNameAr = "التصنيفات الرئسيه",
                            PermissionControllerNameEn = "Main categories"
                        },
                        new
                        {
                            PermissionControllerID = 21,
                            PermissionControllerGuid = new Guid("5175eb7c-e8f0-48a0-8394-55d03d030f5c"),
                            PermissionControllerNameAr = "البنرات",
                            PermissionControllerNameEn = "Sliders"
                        },
                        new
                        {
                            PermissionControllerID = 22,
                            PermissionControllerGuid = new Guid("e6be22f0-f37d-43bc-b66c-653e24b187db"),
                            PermissionControllerNameAr = "شركات الشحن",
                            PermissionControllerNameEn = "Shipping Company"
                        },
                        new
                        {
                            PermissionControllerID = 23,
                            PermissionControllerGuid = new Guid("a2531e0f-59a5-481d-822c-bdc722de3df1"),
                            PermissionControllerNameAr = "الاستفسارات",
                            PermissionControllerNameEn = "Inqueries"
                        },
                        new
                        {
                            PermissionControllerID = 24,
                            PermissionControllerGuid = new Guid("033cf203-0fc7-405a-b6be-2623cc5c1251"),
                            PermissionControllerNameAr = "الصفحات الرئيسية",
                            PermissionControllerNameEn = "Main Pages"
                        },
                        new
                        {
                            PermissionControllerID = 25,
                            PermissionControllerGuid = new Guid("f301827a-7284-47e7-bf86-9a87b056bfa0"),
                            PermissionControllerNameAr = "المتاجر",
                            PermissionControllerNameEn = "Vendors"
                        },
                        new
                        {
                            PermissionControllerID = 26,
                            PermissionControllerGuid = new Guid("d6776395-6e7e-4d67-8ecc-c443a31eb01c"),
                            PermissionControllerNameAr = "الزبائن",
                            PermissionControllerNameEn = "Customer"
                        },
                        new
                        {
                            PermissionControllerID = 27,
                            PermissionControllerGuid = new Guid("2edfb667-f56c-4c51-a989-71ac70a6cf7e"),
                            PermissionControllerNameAr = "المنتجات",
                            PermissionControllerNameEn = "Product"
                        },
                        new
                        {
                            PermissionControllerID = 28,
                            PermissionControllerGuid = new Guid("0ee2ca40-4a7b-443f-823c-da8bb43287e9"),
                            PermissionControllerNameAr = "أنواع العناوين",
                            PermissionControllerNameEn = "Address Types"
                        },
                        new
                        {
                            PermissionControllerID = 29,
                            PermissionControllerGuid = new Guid("1e0a7e63-e500-487a-996a-6424d6f4dbef"),
                            PermissionControllerNameAr = "الكلمات المفتاحية",
                            PermissionControllerNameEn = "KeyWords"
                        },
                        new
                        {
                            PermissionControllerID = 30,
                            PermissionControllerGuid = new Guid("53db8640-b28d-4fe9-a8a2-147adc1d5b79"),
                            PermissionControllerNameAr = "منتجات الاوبريشن",
                            PermissionControllerNameEn = "Product Operation"
                        },
                        new
                        {
                            PermissionControllerID = 31,
                            PermissionControllerGuid = new Guid("4f49e6bd-f7bd-4807-b3bc-53cb87e79769"),
                            PermissionControllerNameAr = "طلبات الاوبريشن",
                            PermissionControllerNameEn = "Operation Orders"
                        },
                        new
                        {
                            PermissionControllerID = 32,
                            PermissionControllerGuid = new Guid("fdc2ee82-21e1-4968-8d9e-6493db701c44"),
                            PermissionControllerNameAr = "طلبات المتجر",
                            PermissionControllerNameEn = "Vendor Orders"
                        },
                        new
                        {
                            PermissionControllerID = 33,
                            PermissionControllerGuid = new Guid("f4ef5779-78ed-4ed6-aecc-21a8315306a3"),
                            PermissionControllerNameAr = "الفروع",
                            PermissionControllerNameEn = "Branches"
                        },
                        new
                        {
                            PermissionControllerID = 34,
                            PermissionControllerGuid = new Guid("c0604c78-b1e2-4c61-8a23-8d6652c09249"),
                            PermissionControllerNameAr = "اكواد الخصم",
                            PermissionControllerNameEn = "Promo Code"
                        },
                        new
                        {
                            PermissionControllerID = 35,
                            PermissionControllerGuid = new Guid("8501b483-8b9a-4ef4-8410-c487db345349"),
                            PermissionControllerNameAr = "سجل الاجازات",
                            PermissionControllerNameEn = "Vac History"
                        },
                        new
                        {
                            PermissionControllerID = 36,
                            PermissionControllerGuid = new Guid("da9009de-95bf-418f-8196-ec4feeb65953"),
                            PermissionControllerNameAr = "سجل ايقاف الاشتراكات",
                            PermissionControllerNameEn = "Enable History"
                        },
                        new
                        {
                            PermissionControllerID = 37,
                            PermissionControllerGuid = new Guid("fdf89b5c-f2ec-4c30-9c03-39a290394330"),
                            PermissionControllerNameAr = "الطلبات الجديده للسائق",
                            PermissionControllerNameEn = "Driver New Requests"
                        },
                        new
                        {
                            PermissionControllerID = 38,
                            PermissionControllerGuid = new Guid("2ebc44ff-6b56-46f7-8a71-0069d2b6f58d"),
                            PermissionControllerNameAr = "الطلبات الملغية للسائق",
                            PermissionControllerNameEn = "Driver Rejected Requests"
                        },
                        new
                        {
                            PermissionControllerID = 39,
                            PermissionControllerGuid = new Guid("00c367d1-13a8-4873-b8a0-dadbd49626da"),
                            PermissionControllerNameAr = "طلبات انتظار التفعيل للسائق",
                            PermissionControllerNameEn = "Driver Waiting Activation"
                        },
                        new
                        {
                            PermissionControllerID = 40,
                            PermissionControllerGuid = new Guid("6a632372-e6dc-42d4-9536-0c8c7b91160d"),
                            PermissionControllerNameAr = "طلبات تحت المراجعة للسائق",
                            PermissionControllerNameEn = "Driver Under Requests"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Property<int>("PermissionControllerActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionControllerActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionControllerID")
                        .HasColumnType("int");

                    b.HasKey("PermissionControllerActionID");

                    b.HasIndex("PermissionActionID");

                    b.HasIndex("PermissionControllerID");

                    b.ToTable("PermissionControllerAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerActionID = 1,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ddf73e8d-7e91-4d50-91ab-e848dfa6eadb"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 2,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c53d406c-33a5-4a2e-b7e9-12e753906281"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 3,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2cdec330-fa72-40ef-a210-8cacc92f7911"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 4,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("cc6ed035-f6b0-4437-8158-bcd6cbd3f8da"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 5,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ac9fc880-e8e8-43c8-a422-e3757f33b7e8"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 6,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d86fd95d-16eb-4d9e-b234-9059227d8d07"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 7,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("617339d3-4ad2-42fa-8a1e-e420053e2ab6"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 8,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("07f6eee5-a518-4f38-92fc-c7c12fe4b3da"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 9,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d62c0918-7c03-4f70-8267-3413cdbf2976"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 10,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("15d4c15c-8cb0-405d-9537-d2066acd1422"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 11,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("cdeb8c5f-8e15-408b-b9c6-61db71639714"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 12,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("fd107f83-81c3-49f6-bb5d-f1401bdd0aee"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 13,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a42a2592-f69f-4692-aa61-5d0387a2783e"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 14,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("cf75a4cd-d9ea-42df-8669-1c2d07034a21"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 15,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("fb05b112-7151-4610-a15e-62e82e2646df"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 16,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("9e0af867-bc8f-447e-bc9c-0c6ca3120ecf"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 17,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e59448a1-0436-4481-816b-964101734d9c"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 18,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("373a10d3-0461-4b8a-a642-a0ab7a59d529"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 19,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("684b8e9f-fd0b-478b-937e-a8ae4f971448"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 20,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8dfa3b4e-bb32-497f-94c5-e23543d71388"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 21,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d796c31e-7f21-4426-8166-48debb9eadc7"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 22,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d83f5364-6fbe-418a-ab47-c8007662418a"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 23,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a9370069-099b-40b3-a68e-44648e459982"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 24,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("c5808a97-4966-4018-848d-42a8e56954d2"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 25,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("25ad3980-1994-4c29-81e5-7cb48056b9ae"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 26,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c5bdf02f-551d-4211-9e14-c7811d11a0a6"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 27,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("9c74235f-086a-4c02-aaaf-b18440b6295e"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 28,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("f15eeac3-59f6-412f-a574-782a5d8a52ac"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 29,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2ac1ace1-2bcf-4201-8b2d-1d1137e69eac"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 30,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a5825ce3-82da-43e9-a604-38c8650d2973"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 31,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a235aae7-6394-4a2d-95ef-d19ac6da0e97"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 32,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e05b3d1d-2606-411c-b802-03ed7d54fc7c"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 33,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("947ba72f-2bba-4ef3-a5ca-4377e704f681"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 34,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("20d59bdb-7d61-4104-904a-051bd934c606"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 35,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("63a82262-f081-496a-bc4d-c9156a80c865"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 36,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d25928fb-a092-4759-9958-a962e8c0bd3f"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 37,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("473c99ba-d619-4b1e-951a-2ab961ea0d9a"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 38,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("9ea883b2-c978-47af-9cfb-819528c982a6"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 39,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("317939f3-27d3-454a-8a1c-f3a3e4d148bc"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 40,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4df78d98-89ca-4af7-a460-d802124368a0"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 41,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d916928b-a40a-4bb1-b541-dadc918a933f"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 42,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("cdbe6ab4-7f79-4d3e-8199-6bad254ecb18"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 43,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5b672ba4-4963-47fa-84d9-299ca88fad61"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 44,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("78f77dda-5a99-4a6b-8339-bb525adfafd9"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 45,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8512e527-fe66-4cd5-9cc5-a9c47d549fc2"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 46,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("33b15eb4-47d3-4d23-8f14-a192eaae01eb"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 47,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("621c3512-fb05-4a24-80fd-aaf2af30281c"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 48,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("33074346-4d0d-46fd-9270-afe2482236e9"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 49,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("48e3f3ca-bd2f-4dee-b82c-9d191feb7787"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 50,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("1087dda4-d7a6-419f-848b-804f4e6ad317"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 51,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c1e8cfee-28da-45cf-8483-76e93c4b0245"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 52,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("37a8c9e1-db72-4111-b2e5-7c79ae291d98"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 53,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("382c3543-1487-4a50-9691-43a45c7062ce"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 54,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("dffe06d0-00e1-46e3-b20a-66a41e6f23b6"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 55,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("b4367ef8-5d0c-4d7e-ac54-9e2e6c67f1ca"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 56,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("9216f355-ceb0-4140-9e17-b52a64f15aca"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 57,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("22fd934a-6d5e-422d-858b-89be31862562"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 58,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("cb8173f0-3715-440e-949c-06bcc03f3cb9"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 59,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("b890c51f-fe4b-4c53-abef-5276794878ef"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 60,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7a0b300d-d52c-4042-8b70-c7293488cffc"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 61,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("f173f186-79db-412f-a30f-5b79a2cdb985"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 62,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("18d5a19d-f43c-4273-a89b-ef858a7fd39e"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 63,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("bf5a6071-7c96-4d28-bf0f-d277d5093b91"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 64,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("80809b87-6e0b-4773-9b0e-0241eb40b202"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 65,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1e84bca3-263f-4fe5-b608-54cef27e685f"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 66,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("6eb6cac6-d1f2-4482-88b3-a4a47cd5340b"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 67,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5e76048d-c369-4bdb-810b-c9f42e0e22ed"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 68,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("577c07cc-d93c-40ed-a337-7feb39621a59"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 69,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b6513889-c631-4f6c-8d05-0c1b0b22ffd9"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 70,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("437f5639-bc5f-4b74-89a0-4028bc790141"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 71,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("bc22bb10-1d62-4bbf-8889-a66e1d4fc3cd"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 72,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8de38ad2-c4aa-4f91-b784-50e8d824bced"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 73,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("619cbac5-ab82-40a9-a1dc-6ee4fc5dfecc"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 74,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("519e9bba-36ee-4429-87ab-3218448db775"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 75,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f368196b-78dd-4b5e-a473-d58add492e88"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 76,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("be496bfb-2628-4e02-bd19-1d262744052e"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 77,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("6e44e554-d773-48a9-97a5-1a96102f6d31"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 78,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("eaff5124-1e99-40d0-bb4a-732430c4e7c8"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 79,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("03c24e86-ea1c-443f-96db-1c11a2d16ceb"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 80,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("44da9deb-9755-40dc-98dc-b55ff7d4b153"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 81,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d77a8d90-8260-4dbb-a2f1-1335dbc963c4"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 82,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("49465273-a3d3-4646-b1c8-0f06d1c8f718"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 83,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2dc78ad7-ef06-4fb5-8519-a9454ae78c50"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 84,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2b0ab23a-21b7-43c7-9c81-875bb613548b"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 85,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a72f5022-42b5-4b7e-b6f0-5d272e89e6ef"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 86,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("8af95976-d72a-402d-847d-61ae34fafd50"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 87,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("bee63455-208f-43c5-ac30-2d5abc936aa1"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 88,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("cdbc460f-c945-4b10-9cba-e17197aa14d7"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 89,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c47edd85-096a-4d7a-8562-d30e863a207e"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 90,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f6968fec-b335-438a-92b2-03e6969ac718"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 91,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("db9ce711-22ac-459e-97ef-71fba4531bd2"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 92,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("c7af0ec3-85ce-45e5-9fe4-58bce83d6011"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 93,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c56639be-20b3-4131-895d-43ef5bbe3836"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 94,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c9b43a8b-16bb-4735-86a9-0e2b76b54293"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 95,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7aabb543-e94b-404c-b0da-5a11f299c3a2"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 96,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("dd866848-7512-41b7-b00d-97742c13b20e"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 97,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2d8aa7ad-7d43-47ea-a8a1-420ea0b07182"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 98,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("4f0ccf4d-7fd3-4cd0-94dd-274bbe450e63"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 99,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("15343851-0a92-47e9-8aff-9af1ff289a06"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 100,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("bc5b9cc2-2ffd-48dd-9b4b-3c3016f4ec2e"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 101,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("6f72bde2-6e54-48cc-a0d5-2083bacde13a"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 102,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("7db97bc4-0808-4560-bbab-acf1acf97385"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 103,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("9265b737-de95-4faa-ac20-d12505042e56"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 104,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("23a5807b-984c-4745-ac76-af561ec84c5d"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 105,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8c845877-982a-47c1-8a31-cccdc3cc0fd4"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 106,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("67503b75-b9c3-481a-b596-00c053ada569"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 107,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("6963c35c-86c6-48d0-bcd9-eaec1f134eef"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 108,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2b79fcbc-53be-4ad9-a93e-5490eb7ff3a8"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 109,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("099a13b5-b891-4077-b00c-c14571352263"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 110,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("04c33b72-a812-4009-9eff-72ed2c4b1b99"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 111,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("fc75ab7a-dbdd-403e-8945-362fc6c5b4bd"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 112,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("98cfc2e4-b176-4a0d-a973-b6170e71c8d2"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 113,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("69c9df2f-460a-4718-ab71-103bc928b431"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 114,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("2030eb93-30e1-44a5-aaf7-ba6a554b9f04"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 115,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("327c66d3-d894-4e2f-bc6e-ed681ab93bde"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 116,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("798807e0-03e5-418b-a497-3b77395af2b5"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 117,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("096e91a6-7aa5-460c-ab70-eace8b992ebf"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 118,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("fdfcb987-ef89-4a6f-ae34-687e263b07b8"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 119,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("94ae2ed1-9f57-46fd-b5bc-c03edb256253"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 120,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("c1a60d62-ba3f-454d-97a2-749a6862a021"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 121,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d1c2b80a-c723-4076-8b7c-41d593db572c"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 122,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("7946f0b5-6e18-4169-aa81-5e70ab52cf2c"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 123,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2252c3e0-670b-4325-913b-73342d9dee66"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 124,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6df9661f-dfe6-4e85-a0d5-8ceadc00a08e"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 125,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("be380657-25d0-434f-8026-983899fc7e62"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 126,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("45522229-b37c-47cf-b75f-c3f919dca276"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 127,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("06d8b5a8-b0ff-433b-913d-43c181bee9fc"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 128,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e79a3862-7a27-4c9f-befe-827da3eebd67"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 129,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("6172224c-da59-4a25-9902-b9c5394d8e2b"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 130,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("92609384-6119-41dc-8485-cb7bfcc969d1"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 131,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("12d4a612-194b-401e-b15d-3040aa15dd34"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 132,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5c4febf8-44d6-450d-a100-72166aece327"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 133,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("40779c6d-0e2d-41ed-8c0b-d058620e8242"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 134,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("952ab286-b0a0-485c-8b34-813685d50627"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 135,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("42653474-3638-4534-a42e-04828950f12c"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 136,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("74c99e98-285f-4880-bee5-428be921d0db"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 137,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2f5e9712-e258-44dc-a610-e88320371821"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 138,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("852812e5-4ee0-4010-9ad0-a6a6bb139bd7"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 139,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3ca2d94f-9144-4026-bbf2-6e57e692e03a"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 140,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e414dc1b-6df6-4b33-8b31-672384925b48"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 141,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c7e12887-362b-4805-94be-63f51b8d5266"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 142,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("392f02cf-cd47-475a-9221-ac25d431634d"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 143,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("cea0d2a6-0794-4c34-b1f9-0a95a8e84036"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 144,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("689f8669-f6f4-4c43-9d3c-d0325d52a0c0"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 145,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("73fb3360-3041-4e44-a0cc-d8d5bfdc4696"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 146,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("566ed3b1-8bfa-412a-aa9d-c799221a3d71"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 147,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("1e8a018a-81c8-42cd-934f-d2e534066d21"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 148,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("c1d92f0c-ebd2-4f2a-ae98-40e2a8fa2a2e"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 149,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("dcfba536-c1a7-4681-bc10-ecc4b7008626"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 150,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("ca490d6d-caeb-46db-97e5-23fad5630c9c"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 151,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("34d5475d-66c6-4f84-ab86-534286c931e5"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 152,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("1ba19d32-dc8f-45fe-9142-c70390334f95"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 153,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("87e4bd57-fe1b-463a-a25f-701dc4dc0a3e"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 154,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("eebf12da-acf3-4054-9cc3-b7c66d449965"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 155,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("5a84c4b0-fd28-4fbf-a863-788bdc49877a"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 156,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e7180f18-920c-4e7c-ab8c-e3917b36fb20"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 157,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e64bcb43-5d80-466b-9675-ae84cf0233d1"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 158,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("745e8079-7853-4e90-80e5-0148c9870aaa"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 159,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("13d67d95-f162-4023-940b-75aa9dccea96"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 160,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e73eeee7-f550-4366-b5e8-f1faf2a7b618"),
                            PermissionControllerID = 40
                        });
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.Property<int>("RoleConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleConfigID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleConfig", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("UserId");

                    b.ToTable("Activity", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Property<int>("AddressTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddressTypesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("AddressTypesID");

                    b.HasIndex("UserId");

                    b.ToTable("AddressTypes", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Property<int>("BanksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BankGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("Banks", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Property<int>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BlockGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Block", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.Property<int>("BranchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BranchesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BranchesID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Branches", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.HasIndex("RegionID");

                    b.HasIndex("UserId");

                    b.ToTable("City", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.Property<int>("ConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxDeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinDeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationID");

                    b.HasIndex("UserId");

                    b.ToTable("Configuration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CountryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Country", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Property<int>("DepartmentsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Isunique")
                        .HasColumnType("bit");

                    b.Property<int>("MainCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("SiteImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsID");

                    b.HasIndex("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Departments", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Inqueries", b =>
                {
                    b.Property<int>("InqueriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InqueriesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InqueriesID");

                    b.ToTable("Inqueries", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Property<int>("JobsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("JobsID");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.Property<int>("KeyWordsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("KeyWordsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("KeyWordsID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.ToTable("KeyWords", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Property<int>("MainCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainCategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("MainCategory", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Property<int>("MainPageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Property<int>("MainPageDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageDetailsID");

                    b.HasIndex("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageDetails", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.Property<int>("MainPageImagesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("MainPageDetailsID")
                        .HasColumnType("int");

                    b.Property<Guid>("MainPageImagesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageImagesID");

                    b.HasIndex("MainPageDetailsID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageImages", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Property<int>("NationalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("NationalityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Nationality", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("DescEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("OrderStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PackageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Package", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.Property<int>("PaymentConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BanksID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBANnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAnrdoid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<string>("UserIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VendorAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorIOS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentConfigurationID");

                    b.HasIndex("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentConfiguration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.Property<int>("PaymentWayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentWayGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentWayID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentWay", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Region", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Property<int>("ShippingCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShippingCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ShippingCompanyID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.Property<int>("SliderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayIn")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("SliderGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SliderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("SliderID");

                    b.HasIndex("UserId");

                    b.ToTable("Slider", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Subscribe", b =>
                {
                    b.Property<int>("SubscribeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscribeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscribeID");

                    b.ToTable("Subscribe", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Tokens", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("TokenVal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.Property<int>("CartDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CartDetailsGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CartMasterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProductDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartDetailsID");

                    b.HasIndex("CartMasterID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Property<int>("CartMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CartMasterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CartMasterStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SessionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartMasterID");

                    b.HasIndex("CustomersID");

                    b.ToTable("CartMaster", "Site");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.Property<int>("TempPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("TempPermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TempPermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("TempPermission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserJWTToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.Property<int>("EnableHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnableHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("EnableHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("EnableHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Product", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductImage", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.Property<int>("ProductQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductQuestionID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductQuestion", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.Property<int>("VacHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<DateTime>("VacFrom")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VacHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VacTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VacHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VacHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Property<int>("VendorsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutStoreAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutStoreEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActivityID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .HasColumnType("int");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("CRPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVac")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaarofNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyTarget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NationalityID")
                        .HasColumnType("int");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterType")
                        .HasColumnType("int");

                    b.Property<string>("SeconedNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VendorsID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("BanksID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors", "Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TransactionCard")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.HasOne("Homemade.Model.BankTransaction.TransactionCard", "TransactionCard")
                        .WithMany("TransactionCardLog")
                        .HasForeignKey("TransactionCardTransactionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.HasOne("Homemade.Model.Setting.AddressTypes", "AddressTypes")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("AddressTypesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AddressTypes");

                    b.Navigation("Block");

                    b.Navigation("Customers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Customers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverBlance")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany()
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("DriverBlance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverBlance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Drivers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Drivers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.TransactionSTCPay", "TransactionSTCPay")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("TransactionSTCPayID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionType")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Jobs", "Jobs")
                        .WithMany("Employees")
                        .HasForeignKey("JobsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Jobs");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Notification")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("Notification")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("Notification")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderRate", "OrderRate")
                        .WithMany("Notification")
                        .HasForeignKey("OrderRateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("Notification")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.ProdQuestion", "ProdQuestion")
                        .WithMany("Notification")
                        .HasForeignKey("ProdQuestionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Notification")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("OrderRate");

                    b.Navigation("OrderVendor");

                    b.Navigation("ProdQuestion");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderPromo")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("OrderPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderRate")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderRate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("OrderVendor")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderVendor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("OrderVendor")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drivers");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.HasOne("Homemade.Model.Customer.CustomerLocation", "CustomerLocation")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("Orders")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("OrderStatus");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PromoCode")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("VendorPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorPromo")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.HasOne("Homemade.Model.PermissionAction", "PermissionActions")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.PermissionController", "PermissionControllers")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionControllerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionActions");

                    b.Navigation("PermissionControllers");
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("RoleConfig")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("RoleConfig")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Activity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("AddressTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Banks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Block")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Block")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Branches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Region", "Region")
                        .WithMany("City")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("City")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Configuration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Country")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainCategory", "MainCategory")
                        .WithMany("Departments")
                        .HasForeignKey("MainCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Departments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("KeyWords")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("KeyWords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Departments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainCategory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPage", "MainPage")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("MainPageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPageDetails", "MainPageDetails")
                        .WithMany("MainPageImages")
                        .HasForeignKey("MainPageDetailsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPageDetails");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Nationality")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Package")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentWay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Country", "Country")
                        .WithMany("Region")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Region")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Slider")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.HasOne("Homemade.Model.Site.CartMaster", "CartMaster")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CartMaster");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CartMaster")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("TempPermission")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("TempPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("EnableHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("EnableHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("Product")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Product")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Product")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductImage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VacHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VacHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Activity", "Activity")
                        .WithMany("Vendors")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("Vendors")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("Vendors")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Vendors")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Vendors")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("Vendors")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Vendors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activity");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Navigation("TransactionCardLog");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Navigation("CartMaster");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Notification");

                    b.Navigation("Orders");

                    b.Navigation("ProdQuestion");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Navigation("Notification");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Navigation("DriverBlance");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Navigation("TranLogSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Navigation("DriverBlance");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderRate");

                    b.Navigation("TranLogSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("Orders");

                    b.Navigation("VendorPromo");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Navigation("PaymentConfiguration");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Navigation("CustomerLocation");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Navigation("Region");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Navigation("KeyWords");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Navigation("MainPageDetails");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Navigation("MainPageImages");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Navigation("OrderHistory");

                    b.Navigation("Orders");

                    b.Navigation("OrderVendor");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("AddressTypes");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("City");

                    b.Navigation("Configuration");

                    b.Navigation("Country");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("Departments");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("EnableHistory");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Jobs");

                    b.Navigation("KeyWords");

                    b.Navigation("MainCategory");

                    b.Navigation("MainPage");

                    b.Navigation("MainPageDetails");

                    b.Navigation("MainPageImages");

                    b.Navigation("Nationality");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderPromo");

                    b.Navigation("OrderRate");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("Package");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("PaymentStatus");

                    b.Navigation("PaymentWay");

                    b.Navigation("ProdQuestion");

                    b.Navigation("Product");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");

                    b.Navigation("PromoCode");

                    b.Navigation("Region");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Slider");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("TransactionType");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorPromo");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("ProdQuestion");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Navigation("EnableHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorPromo");
                });
#pragma warning restore 612, 618
        }
    }
}
