// <auto-generated />
using System;
using Homemade.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Homemade.DAL.Contract.Migrations
{
    [DbContext(typeof(HomemadeContext))]
    [Migration("20211030120430_NewEditPermissionAssignDriver")]
    partial class NewEditPermissionAssignDriver
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRedirect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMSSentToUser")
                        .HasColumnType("bit");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TransactionCard", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.Property<int>("TransactionCardLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionCardLogGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TransactionCardTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("TransactionCardLogID");

                    b.HasIndex("TransactionCardTransactionID");

                    b.ToTable("TransactionCardLog", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3dee42a3-b0c6-42df-98e4-d52c92cfccad",
                            Name = "Admin",
                            RoleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "f6342872-0a59-491a-a18d-42ff9387a07f",
                            Name = "Vendor",
                            RoleTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "16e2daf0-b8db-4399-aed1-9ef3bb4141b6",
                            Name = "Customer",
                            RoleTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "776c67bb-ea21-4ca7-8a98-05df66aaa766",
                            Name = "Employee",
                            RoleTypeId = 2
                        });
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.Property<int>("CustomerBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerBlanceID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerBalance", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.Property<int>("CustomerFavouritesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerFavouritesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerFavouritesID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerFavourites", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Property<int>("CustomerLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressTypesID")
                        .HasColumnType("int");

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerLocationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerfiy")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerLocationID");

                    b.HasIndex("AddressTypesID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerLocation", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Property<int>("CustomersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomersID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DeliverySetting", b =>
                {
                    b.Property<int>("DeliverySettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseFare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliverySettingGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DriverCommision")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinKM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OverKmFare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DeliverySettingID");

                    b.HasIndex("UserId");

                    b.ToTable("DeliverySetting", "Driver");

                    b.HasData(
                        new
                        {
                            DeliverySettingID = 1,
                            BaseFare = 20m,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliverySettingGuid = new Guid("45049f94-c7c0-4e12-b52b-65834257fada"),
                            DriverCommision = 80m,
                            IsDeleted = false,
                            IsEnable = true,
                            MinKM = 3m,
                            OverKmFare = 5m,
                            Tax = 0m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Property<int>("DriverBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverBlance", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverSupport", b =>
                {
                    b.Property<int>("DriverSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverSupportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpQuestionsID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverSupportID");

                    b.HasIndex("DriversID");

                    b.HasIndex("HelpQuestionsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverSupport", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Property<int>("DriversID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("BirthDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CarLicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarPictrue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HijiriInsuranceEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriBirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriIDDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IDDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("InsuranceEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenTransaction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PCOEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PCOEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PCOHijriEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberStc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PhoneType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PrivateHijriLicenseEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrivateLicenseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrivateLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PrivateLicenseTypeEndDate")
                        .HasColumnType("tinyint");

                    b.Property<string>("RequestNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VerifyStc")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifyStcDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DriversID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.Property<int>("TranLogSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<Guid>("TranLogSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionSTCPayID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TranLogSTCPayID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionSTCPayID");

                    b.HasIndex("UserId");

                    b.ToTable("TranLogSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Property<int>("TransactionSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquriyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentOrderReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STCStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionSTCPayID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("TransactionTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionType", "Driver");

                    b.HasData(
                        new
                        {
                            TransactionTypeID = 1,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "شحن رصيد بواسطة الإدارة",
                            NameEN = "Deposit by Operation",
                            TransactionTypeGuid = new Guid("e7d02d22-70f9-4766-9d82-51ca43aebf9e"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 2,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "سحب - جزاء",
                            NameEN = "Withdrawal",
                            TransactionTypeGuid = new Guid("0f944fdc-1204-469f-b772-b6fc42a303ab"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 3,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "علاوة",
                            NameEN = "Bouns",
                            TransactionTypeGuid = new Guid("448f272f-6d47-4ca9-9356-d009a3ab066a"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 4,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "عقوبة",
                            NameEN = "Punishment",
                            TransactionTypeGuid = new Guid("27e61925-722b-4c8b-b05a-3d8763f29e4a"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 5,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع للكابتن STC",
                            NameEN = "Pay to Captain STC",
                            TransactionTypeGuid = new Guid("71c13204-61b4-4228-9247-45c99d6df963"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 6,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "توصيل طلب",
                            NameEN = "Delivery Order",
                            TransactionTypeGuid = new Guid("9422dc42-c04f-4adc-9401-fc45b5a1847b"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 7,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع طلب",
                            NameEN = "Pay Order",
                            TransactionTypeGuid = new Guid("0c1f6d01-8a59-43a0-8672-5a286b2051de"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 8,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع فاتورة",
                            NameEN = "Pay Invoice",
                            TransactionTypeGuid = new Guid("24ded8e6-574a-414f-94bb-23d51aef54e5"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 9,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "تحويل كاش",
                            NameEN = "Cash Transfer",
                            TransactionTypeGuid = new Guid("5e58c102-85ab-457e-bfb4-950564f6ec15"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.Property<int>("EntityEmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDateHijri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDateMilady")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityEmpGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobsID")
                        .HasColumnType("int");

                    b.Property<string>("LastNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MidNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityEmpID");

                    b.HasIndex("CityID");

                    b.HasIndex("JobsID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees", "Emp");

                    b.HasData(
                        new
                        {
                            EntityEmpID = 1,
                            AddressAR = "الاسماعيليه",
                            AddressEN = "ismailia",
                            BirthDateHijri = "",
                            BloodTypeId = 1,
                            CityID = 1,
                            CreateDate = new DateTime(2021, 10, 30, 14, 4, 27, 386, DateTimeKind.Local).AddTicks(46),
                            Email = "SystemUser@Admin.com",
                            EnableDate = new DateTime(2021, 10, 30, 14, 4, 27, 386, DateTimeKind.Local).AddTicks(668),
                            EntityEmpGuid = new Guid("2299447c-fc61-4aa4-ba03-8c91e4f4b2d5"),
                            FileNo = "123321",
                            FirstNameAR = "احمد",
                            FirstNameEN = "Ahmed",
                            Gender = 1,
                            IDNo = "",
                            IsDeleted = false,
                            IsEnable = true,
                            JobsID = 1,
                            LastNameAR = "حسين",
                            LastNameEN = "Hussien",
                            Lat = "",
                            Lng = "",
                            MidNameAR = "سيد",
                            MidNameEN = "Sayed",
                            MobileNo = "0595489633",
                            NationalityID = 1,
                            Notes = "",
                            PhoneNumber = "",
                            Photo = "",
                            UserEnable = 1,
                            UserId = 1,
                            Zoom = ""
                        });
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailsID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceDetails", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceHistory", b =>
                {
                    b.Property<int>("InvoiceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InvoiceHistoryID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Property<int>("InvoiceMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceMasterGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("PerHomeMade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("InvoiceMaster", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ListTransfer", b =>
                {
                    b.Property<int>("ListTransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListTransferGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ListTransferID");

                    b.HasIndex("BanksID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.ToTable("ListTransfer", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NotificationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderRateID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int?>("ProdQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int?>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProdQuestionID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Notification", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.Property<int>("OrderHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderHistoryID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderItemsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProdImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderItemsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItems", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.Property<int>("OrderPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderPromoID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Property<int>("OrderRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderRateGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("RateDelivery")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RateOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderRate", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Property<int>("OrderVendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaptainPaidID")
                        .HasColumnType("int");

                    b.Property<int>("CaptainTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DriverCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderVendorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<decimal>("PackageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("PackagePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerHome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("OrderVendorID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PackageID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("OrderVendor", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Property<int>("OrdersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerLocationID")
                        .HasColumnType("int");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrdersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrdersID");

                    b.HasIndex("CustomerLocationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Property<int>("ProdQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProdQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProdQuestionID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderQuestion", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Property<int>("PromoCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double>("LimitCount")
                        .HasColumnType("float");

                    b.Property<Guid>("PromoCodeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PromoType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("PromoCode", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.Property<int>("VendorPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorPromoID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Property<int>("PermissionActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionActionID");

                    b.ToTable("PermissionAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionActionID = 1,
                            PermissionActionGuid = new Guid("1c54bf51-7222-4db0-a14f-3294386be49b"),
                            PermissionActionNameAr = "عرض",
                            PermissionActionNameEn = "View"
                        },
                        new
                        {
                            PermissionActionID = 2,
                            PermissionActionGuid = new Guid("15131116-24e5-4e9e-8dc4-8a940085575d"),
                            PermissionActionNameAr = "اضافة",
                            PermissionActionNameEn = "Insert"
                        },
                        new
                        {
                            PermissionActionID = 3,
                            PermissionActionGuid = new Guid("8ffe6ebe-112c-4d6f-a742-671ecb06fbf9"),
                            PermissionActionNameAr = "تعديل",
                            PermissionActionNameEn = "Update"
                        },
                        new
                        {
                            PermissionActionID = 4,
                            PermissionActionGuid = new Guid("315952a5-3d83-4598-afcb-3bac95dbfa12"),
                            PermissionActionNameAr = "حذف",
                            PermissionActionNameEn = "Delete"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Property<int>("PermissionControllerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionControllerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionControllerNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionControllerNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionControllerID");

                    b.ToTable("PermissionController", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerID = 1,
                            PermissionControllerGuid = new Guid("05ea6d66-5091-47d2-9f4a-63b2b6c22f34"),
                            PermissionControllerNameAr = "الصلاحيات",
                            PermissionControllerNameEn = "Permission"
                        },
                        new
                        {
                            PermissionControllerID = 2,
                            PermissionControllerGuid = new Guid("b89a8cda-4e23-44f3-b98a-9675130c1ae3"),
                            PermissionControllerNameAr = "الدور",
                            PermissionControllerNameEn = "Role"
                        },
                        new
                        {
                            PermissionControllerID = 3,
                            PermissionControllerGuid = new Guid("09c25446-759e-4bed-b083-118543fc7949"),
                            PermissionControllerNameAr = "الدولة",
                            PermissionControllerNameEn = "Country"
                        },
                        new
                        {
                            PermissionControllerID = 4,
                            PermissionControllerGuid = new Guid("ea87ec5c-aaac-48e9-ac76-d8857d386586"),
                            PermissionControllerNameAr = "المنطقة",
                            PermissionControllerNameEn = "Region"
                        },
                        new
                        {
                            PermissionControllerID = 5,
                            PermissionControllerGuid = new Guid("5fa3863f-a081-475b-a328-ee699e7988c2"),
                            PermissionControllerNameAr = "المدينة",
                            PermissionControllerNameEn = "City"
                        },
                        new
                        {
                            PermissionControllerID = 6,
                            PermissionControllerGuid = new Guid("5347f6e5-f75d-4260-8d45-96d64c5c2a7c"),
                            PermissionControllerNameAr = "الوظائف",
                            PermissionControllerNameEn = "Jobs"
                        },
                        new
                        {
                            PermissionControllerID = 7,
                            PermissionControllerGuid = new Guid("02025ac7-5af4-4556-8e28-a6644ee62da7"),
                            PermissionControllerNameAr = "الاقسام",
                            PermissionControllerNameEn = "Departments"
                        },
                        new
                        {
                            PermissionControllerID = 8,
                            PermissionControllerGuid = new Guid("7be0c4fc-f670-4320-9d8f-9e3924c3744a"),
                            PermissionControllerNameAr = "الموظفين",
                            PermissionControllerNameEn = "Employees"
                        },
                        new
                        {
                            PermissionControllerID = 9,
                            PermissionControllerGuid = new Guid("a74b0d18-5307-45f1-ac6e-e30ea38750cf"),
                            PermissionControllerNameAr = "الجنسية",
                            PermissionControllerNameEn = "Nationality"
                        },
                        new
                        {
                            PermissionControllerID = 10,
                            PermissionControllerGuid = new Guid("688eaa26-56f2-431c-8a81-f0ab635d1c1a"),
                            PermissionControllerNameAr = "اعدادات الدور",
                            PermissionControllerNameEn = "Role Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 11,
                            PermissionControllerGuid = new Guid("4d1b29d9-f4d2-4dd6-aae1-d9f652b897ef"),
                            PermissionControllerNameAr = "الاعدادات",
                            PermissionControllerNameEn = "Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 12,
                            PermissionControllerGuid = new Guid("d7bfb99c-3e9c-4f8e-b7bc-04970f5e8b2f"),
                            PermissionControllerNameAr = "البنوك",
                            PermissionControllerNameEn = "Bank"
                        },
                        new
                        {
                            PermissionControllerID = 13,
                            PermissionControllerGuid = new Guid("9013b22e-037c-4716-86f8-52d1077b42ed"),
                            PermissionControllerNameAr = "طرق الدفع",
                            PermissionControllerNameEn = "PaymentWay"
                        },
                        new
                        {
                            PermissionControllerID = 14,
                            PermissionControllerGuid = new Guid("04e3d023-64d0-435a-b62c-20961b5131e4"),
                            PermissionControllerNameAr = "الأنشطة",
                            PermissionControllerNameEn = "Activity"
                        },
                        new
                        {
                            PermissionControllerID = 15,
                            PermissionControllerGuid = new Guid("781cf63f-4712-43b8-b6d3-635f577e2df3"),
                            PermissionControllerNameAr = "الأحياء",
                            PermissionControllerNameEn = "Block"
                        },
                        new
                        {
                            PermissionControllerID = 16,
                            PermissionControllerGuid = new Guid("877dfd01-2103-48b6-b2a8-60f342728f74"),
                            PermissionControllerNameAr = "باقات التجار",
                            PermissionControllerNameEn = "Package"
                        },
                        new
                        {
                            PermissionControllerID = 17,
                            PermissionControllerGuid = new Guid("53759cda-7675-4fc1-8dc5-8c148f949755"),
                            PermissionControllerNameAr = "حالات الدفع",
                            PermissionControllerNameEn = "PaymentStatus"
                        },
                        new
                        {
                            PermissionControllerID = 18,
                            PermissionControllerGuid = new Guid("b5154ffc-3c05-4949-a515-66cb963e2826"),
                            PermissionControllerNameAr = "اعدادت الشركه",
                            PermissionControllerNameEn = " Company Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 19,
                            PermissionControllerGuid = new Guid("0a0504ad-253e-49f9-8d88-48d63d65733b"),
                            PermissionControllerNameAr = "اعدادت الدفع",
                            PermissionControllerNameEn = "Payment Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 20,
                            PermissionControllerGuid = new Guid("44b1c294-da46-4714-9088-9dea51ae39fa"),
                            PermissionControllerNameAr = "التصنيفات الرئسيه",
                            PermissionControllerNameEn = "Main categories"
                        },
                        new
                        {
                            PermissionControllerID = 21,
                            PermissionControllerGuid = new Guid("fc113eba-21a0-4106-ae47-0eed034f58d7"),
                            PermissionControllerNameAr = "البنرات",
                            PermissionControllerNameEn = "Sliders"
                        },
                        new
                        {
                            PermissionControllerID = 22,
                            PermissionControllerGuid = new Guid("ab817dee-4348-45de-a5c2-56473f3ed76a"),
                            PermissionControllerNameAr = "شركات الشحن",
                            PermissionControllerNameEn = "Shipping Company"
                        },
                        new
                        {
                            PermissionControllerID = 23,
                            PermissionControllerGuid = new Guid("5330daa6-027d-4ef9-89ad-5507a91c2a2c"),
                            PermissionControllerNameAr = "الاستفسارات",
                            PermissionControllerNameEn = "Inqueries"
                        },
                        new
                        {
                            PermissionControllerID = 24,
                            PermissionControllerGuid = new Guid("b00016d4-8ba1-489e-a144-ced2b71e2770"),
                            PermissionControllerNameAr = "الصفحات الرئيسية",
                            PermissionControllerNameEn = "Main Pages"
                        },
                        new
                        {
                            PermissionControllerID = 25,
                            PermissionControllerGuid = new Guid("1cba2076-c560-416f-928d-d7fcf2d9c521"),
                            PermissionControllerNameAr = "المتاجر",
                            PermissionControllerNameEn = "Vendors"
                        },
                        new
                        {
                            PermissionControllerID = 26,
                            PermissionControllerGuid = new Guid("877273ab-d58f-4d5a-ad4f-0bb83d485fe8"),
                            PermissionControllerNameAr = "الزبائن",
                            PermissionControllerNameEn = "Customer"
                        },
                        new
                        {
                            PermissionControllerID = 27,
                            PermissionControllerGuid = new Guid("f26c1b87-fce4-4450-a315-4956e0bab110"),
                            PermissionControllerNameAr = "المنتجات",
                            PermissionControllerNameEn = "Product"
                        },
                        new
                        {
                            PermissionControllerID = 28,
                            PermissionControllerGuid = new Guid("cc78f0f4-ffe5-48db-a180-7c2faf1d8477"),
                            PermissionControllerNameAr = "أنواع العناوين",
                            PermissionControllerNameEn = "Address Types"
                        },
                        new
                        {
                            PermissionControllerID = 29,
                            PermissionControllerGuid = new Guid("a20c2384-a9a5-484c-a6d0-ff37812e56c2"),
                            PermissionControllerNameAr = "الكلمات المفتاحية",
                            PermissionControllerNameEn = "KeyWords"
                        },
                        new
                        {
                            PermissionControllerID = 30,
                            PermissionControllerGuid = new Guid("395fc2ab-bc27-43ed-a9b4-d1be54bf238b"),
                            PermissionControllerNameAr = "منتجات الاوبريشن",
                            PermissionControllerNameEn = "Product Operation"
                        },
                        new
                        {
                            PermissionControllerID = 31,
                            PermissionControllerGuid = new Guid("36d46081-b3c7-4d64-8435-3fd7bd29bfe3"),
                            PermissionControllerNameAr = "طلبات الاوبريشن",
                            PermissionControllerNameEn = "Operation Orders"
                        },
                        new
                        {
                            PermissionControllerID = 32,
                            PermissionControllerGuid = new Guid("62882aed-d176-49a2-a84b-b5504289a37b"),
                            PermissionControllerNameAr = "طلبات المتجر",
                            PermissionControllerNameEn = "Vendor Orders"
                        },
                        new
                        {
                            PermissionControllerID = 33,
                            PermissionControllerGuid = new Guid("31038624-8c45-4cbd-9388-c3772b2a1a7c"),
                            PermissionControllerNameAr = "الفروع",
                            PermissionControllerNameEn = "Branches"
                        },
                        new
                        {
                            PermissionControllerID = 34,
                            PermissionControllerGuid = new Guid("d6028659-6fe3-4d90-ab6b-8b0fc748deb2"),
                            PermissionControllerNameAr = "اكواد الخصم",
                            PermissionControllerNameEn = "Promo Code"
                        },
                        new
                        {
                            PermissionControllerID = 35,
                            PermissionControllerGuid = new Guid("96046688-4b73-413b-bd52-009de6ec2438"),
                            PermissionControllerNameAr = "سجل الاجازات",
                            PermissionControllerNameEn = "Vac History"
                        },
                        new
                        {
                            PermissionControllerID = 36,
                            PermissionControllerGuid = new Guid("452c80f5-f467-4cc2-9b4c-aeb6d8fb14e1"),
                            PermissionControllerNameAr = "سجل ايقاف الاشتراكات",
                            PermissionControllerNameEn = "Enable History"
                        },
                        new
                        {
                            PermissionControllerID = 37,
                            PermissionControllerGuid = new Guid("f55568dd-308b-4069-97aa-49d79dab5abe"),
                            PermissionControllerNameAr = "الطلبات الجديده للسائق",
                            PermissionControllerNameEn = "Driver New Requests"
                        },
                        new
                        {
                            PermissionControllerID = 38,
                            PermissionControllerGuid = new Guid("adbc4655-b866-49f8-9e54-e7f17067b2c8"),
                            PermissionControllerNameAr = "الطلبات الملغية للسائق",
                            PermissionControllerNameEn = "Driver Rejected Requests"
                        },
                        new
                        {
                            PermissionControllerID = 39,
                            PermissionControllerGuid = new Guid("24d35622-b50e-4713-af64-b518d828914f"),
                            PermissionControllerNameAr = "طلبات انتظار التفعيل للسائق",
                            PermissionControllerNameEn = "Driver Waiting Activation"
                        },
                        new
                        {
                            PermissionControllerID = 40,
                            PermissionControllerGuid = new Guid("392a1e44-05d2-4a07-a1ab-f2267680fe44"),
                            PermissionControllerNameAr = "طلبات تحت المراجعة للسائق",
                            PermissionControllerNameEn = "Driver Under Requests"
                        },
                        new
                        {
                            PermissionControllerID = 41,
                            PermissionControllerGuid = new Guid("c1502454-e054-48db-a9b9-10af6c83b8bf"),
                            PermissionControllerNameAr = "الفواتير",
                            PermissionControllerNameEn = "Invoices"
                        },
                        new
                        {
                            PermissionControllerID = 42,
                            PermissionControllerGuid = new Guid("1e9aac5b-63ee-4296-84cd-35d38b7f2389"),
                            PermissionControllerNameAr = "فواتير المتجر",
                            PermissionControllerNameEn = "Store Invoice"
                        },
                        new
                        {
                            PermissionControllerID = 43,
                            PermissionControllerGuid = new Guid("b530589c-b6d9-4a43-9cec-b83be08cd6b5"),
                            PermissionControllerNameAr = "الخصم و الضريبة",
                            PermissionControllerNameEn = "Vat Discount"
                        },
                        new
                        {
                            PermissionControllerID = 44,
                            PermissionControllerGuid = new Guid("2bc23c33-2e92-49fa-b450-9307c0a36413"),
                            PermissionControllerNameAr = "ماليات الكباتن",
                            PermissionControllerNameEn = "Captain Financial"
                        },
                        new
                        {
                            PermissionControllerID = 45,
                            PermissionControllerGuid = new Guid("02a1c9d1-5c40-49f2-885d-a5e2a824048d"),
                            PermissionControllerNameAr = "ارسال رسالة",
                            PermissionControllerNameEn = "Send Message"
                        },
                        new
                        {
                            PermissionControllerID = 46,
                            PermissionControllerGuid = new Guid("2ca61a84-3851-4972-af64-aa7327452d6b"),
                            PermissionControllerNameAr = "المدن المغطاة",
                            PermissionControllerNameEn = "Cities Covered"
                        },
                        new
                        {
                            PermissionControllerID = 47,
                            PermissionControllerGuid = new Guid("9106de7a-6174-4760-982f-40a544c87a38"),
                            PermissionControllerNameAr = "مناطق الكابتن",
                            PermissionControllerNameEn = "Captain Zone"
                        },
                        new
                        {
                            PermissionControllerID = 48,
                            PermissionControllerGuid = new Guid("39e413b5-c617-4831-bdd3-9956d73ba911"),
                            PermissionControllerNameAr = "تعيين سائق",
                            PermissionControllerNameEn = "Assign Driver"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Property<int>("PermissionControllerActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionControllerActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionControllerID")
                        .HasColumnType("int");

                    b.HasKey("PermissionControllerActionID");

                    b.HasIndex("PermissionActionID");

                    b.HasIndex("PermissionControllerID");

                    b.ToTable("PermissionControllerAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerActionID = 1,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("4ec4db74-8066-45db-b916-b851a8e4a919"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 2,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("e4878e0d-deb5-44ec-a094-d63569263524"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 3,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a8481d96-30f7-4f71-a91a-0d2bd3177bde"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 4,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("45fbdee7-fe54-4c1e-82eb-70231dbece65"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 5,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("74af0dc9-8c4e-408d-80ea-7e1b3b17741e"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 6,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a713918a-1cc8-4937-b3f7-25bd0b4ead91"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 7,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a1a25c80-7d87-47fb-8bdb-fad802c057df"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 8,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2fd33a98-6141-4e5a-8029-710b8dbcc1fe"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 9,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("99f353de-1c81-413f-9e01-26b16936153f"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 10,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("b55421ca-8579-407b-a26a-39b8b5475a69"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 11,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("82823fce-0c25-4d67-b46b-af1ee3cb5065"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 12,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("49600f25-bb8f-4b69-988a-220e649f871d"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 13,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("dd7d28f6-78fb-4a49-9a12-b50f37d2f1ad"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 14,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("b2e89fcc-203e-4606-bcea-5fb796df9d2e"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 15,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("e7dd1085-130f-4efb-885e-b3f854f52a8d"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 16,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("3399d16a-a923-425d-aa0f-8ed6523a11d3"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 17,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c9354545-90a6-4f46-b05b-d194217a0a1b"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 18,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("1d5a3ae5-2e03-4429-97c4-41bb70a14111"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 19,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("04dc96e0-8eef-4ab1-b59e-ba2937287833"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 20,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("a3ab8bdd-7bb2-42c9-8248-9ce2c7a30cc1"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 21,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("aa7e6aa6-dc61-4f46-bb55-059b9df0ed67"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 22,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("6b7576aa-c36f-4d8e-bd60-481ea272896f"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 23,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("851c8af5-ace3-4d6e-840b-48081c3e7d68"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 24,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("902ee058-f773-4423-8801-600ddacd2a0b"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 25,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c02a579a-d65d-4a22-9a1a-02c41c5a47c2"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 26,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("8b15a8f6-bf87-48dc-bc64-670fa94d46ae"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 27,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3c10ae7d-cb90-43dd-b813-ded8581e32b1"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 28,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("f2a6a9bc-aea2-45cb-8d46-66c692398ca4"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 29,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c47f4027-58f9-43e6-9b6d-c6d61acac148"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 30,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("550e75e0-eac0-49f8-8873-3efe5576e578"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 31,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("cdd87946-9d8e-46f4-a2aa-f4746b834b47"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 32,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ae26867c-5fea-4711-8099-4789b7fd5081"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 33,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("cd251190-65e2-4afb-922a-4b874a2dd190"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 34,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("2aea40df-eac1-4d03-8816-3fa66c4c63f9"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 35,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("6af7a089-afd6-4a93-b66c-3fc9889cdfeb"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 36,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("b9d9d193-b4e4-47ed-a66c-bd1b836e4390"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 37,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("21a71c8b-d1af-42f3-8dca-78ca0c20a0a1"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 38,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f0b2eb5e-ab52-4dbf-a407-ff8b6b966319"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 39,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("b1dbb89c-a1ef-4b0e-b616-a7253d9543bd"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 40,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("f8905780-b4f6-40bd-ad6e-37e69a7e94a4"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 41,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b87c32ad-28ce-49c6-80fd-a0821f1cc0f2"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 42,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("da1672c5-2757-4f1c-92e5-7edc942a9121"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 43,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a64b6470-08ee-4882-be7f-b5e7f3b8d31d"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 44,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d9e614f4-7c00-49b5-b3f7-c5e6dfe2ab5f"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 45,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("6bf86e27-93d2-4893-a1b2-21f30957a658"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 46,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("ad1f7ceb-2687-42d3-9e2d-68bd597f25e4"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 47,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("ea4919c9-0fcd-4c28-adba-71676610b252"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 48,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5a026bc1-39c5-4e7f-8bf4-130f142c104a"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 49,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ce201944-3585-4212-9455-68f49373080a"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 50,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("47dc4470-fcfc-4e6a-ac6a-20b5fea314c8"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 51,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3c17afba-f423-4c59-98ee-1ab188dfe902"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 52,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e1cebd29-3ad7-46dd-8676-316e225f677d"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 53,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ae87171b-0c14-434e-9715-6d37f88b6025"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 54,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("1633705f-5f5a-4815-aadb-9f5844af16fc"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 55,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("fbfafddf-9439-4a1f-8464-ad168b5a7192"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 56,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2487b0ba-7e75-409a-b79d-514c3e06b312"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 57,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("cbccde5e-9637-4784-8232-8d91df659f4c"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 58,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("19e3bda4-2a7b-44a4-9ae0-758c36409a18"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 59,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a86eebcd-e8f6-4c5a-b0c7-ec1759150c2f"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 60,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("f24f6c6a-6604-4fcc-b9d4-271606fc481b"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 61,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("3a833908-f985-48c6-bff7-fe80e07efd32"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 62,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("4fc10329-c31c-4f8e-94fb-510d05a2f35b"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 63,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d7af5bc7-b5e0-492b-8cc7-4fc30548ade4"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 64,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("3051433d-c001-4249-b4a8-1e70a68c3924"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 65,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2b390fa6-26f8-49bd-a9c0-e60e4436792a"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 66,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("12060417-032b-4064-829b-be8632798dbd"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 67,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f116410e-2645-4860-87b5-a8b37d8bc56c"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 68,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("93e79b40-c74a-4427-802c-ca6e7222e58d"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 69,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("7e6e86aa-443a-4383-95e5-ca62785ef3de"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 70,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3be078ac-d364-4d4a-9c41-46ecbb747417"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 71,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("f34bfe08-ed3d-4c5e-b4ab-c60e756c42c2"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 72,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5204a128-3c94-47ea-8368-14f0d6676055"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 73,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("54c47c7e-dfd8-4759-8ffc-6638f5ece8e8"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 74,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("8a6f5f48-ae73-4a2d-8a7d-e101fdd9fb37"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 75,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("dd2f10db-dc35-4c5d-a2e2-6e0128ca6811"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 76,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("a1a24d2f-e991-4b49-ab0e-f1feb5312e3d"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 77,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5244b356-23cd-47e3-bbff-da5ed43a31c7"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 78,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d48b747f-e4c2-426c-8637-674b516fe5dc"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 79,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("90f55d39-b97b-4959-94b7-2ee22de2017d"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 80,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6f581480-e03c-4631-9026-c2bda1136a47"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 81,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("157fa96e-ab4e-4dc4-8851-383f7c4db790"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 82,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0c488860-4680-4da6-97aa-9049f251ec33"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 83,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8ed5e17d-6a52-4f8a-935f-2a2191461e8b"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 84,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e5f7ebb7-a0ff-48b0-87f5-5d501802c9fc"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 85,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("f8aa7078-f548-4d13-abe9-fdff2152c158"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 86,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("9d9c408e-c61f-46a3-9f98-cbc487f0e35e"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 87,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("513785d2-b1ed-4ee7-9067-111ca884c601"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 88,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d6f18662-80f0-49bb-af76-c434bf4a5664"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 89,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2751d9b7-29d2-4853-b862-5745beed3d90"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 90,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a2cb9888-ac81-40b0-83b9-d81a82b26ca1"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 91,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c357915f-7752-4d6b-99c5-111b988fffdf"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 92,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d63e11c3-d6af-44ca-9c73-8aeed72ef5dc"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 93,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b3637cbc-1c1e-4391-b084-567824bd1482"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 94,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("fc5ee211-b20a-4323-b189-7f588c81cfd1"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 95,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("73a7fc72-bcbc-4e56-8d67-4b9f760c361c"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 96,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("191d09e2-6257-449c-893a-7f578bf07711"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 97,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a24a9806-5669-45d6-89fb-1d724906fd17"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 98,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("fdd9ff7e-4f23-409b-879d-137ac95121c9"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 99,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("082f07d4-3e04-4c1c-83e1-5324f5efc8a7"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 100,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("103d7dc7-817d-4a71-ab32-44ca04934b17"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 101,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d8986903-bb68-4571-bd65-165ab617a544"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 102,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("343ba0c9-c0ab-460a-b8cb-5e275faeb209"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 103,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("4fae416f-8154-4c16-9737-44cd0f89c5e8"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 104,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("90726a02-5629-41e4-8241-cd4104a24fa5"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 105,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e7816f58-5da9-4241-bf3b-32798238a515"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 106,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("e910389d-9810-446e-9813-1dc01cda5aa8"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 107,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("03c9ec94-c24f-41cb-9656-3de081c7d19e"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 108,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("af63c621-ca5e-40f7-a9c2-ef26ec3e2bc0"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 109,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("0a9d34ba-0629-47c7-b1bd-3e836d90a119"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 110,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5eff9fef-8099-474c-aa70-469ada1e18c8"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 111,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a7522deb-5647-481a-a589-4e233a508e53"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 112,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4183ca42-2d2e-43c7-8286-439eb03f5b8e"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 113,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("aafe95ee-a341-45f6-8215-d38c411ffcae"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 114,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("060db5eb-3fa1-46d8-9eec-a00d0a82a953"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 115,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c0702814-7b0c-435a-9000-90f83a5e4083"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 116,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("9522ad3d-c14d-4bd4-8706-e78b1474001b"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 117,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("faad1082-9729-49d1-a0b6-d88365650aae"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 118,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("8ee9a618-debd-4f75-90fe-da5c0b4d2beb"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 119,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("87b89ce9-cb53-4e3f-b558-06526506b385"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 120,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("541d0610-8ea0-49dd-81f7-eb422496d79a"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 121,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c805b596-5ae6-4900-aa2e-25cb2c81b31a"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 122,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("ad979034-b3b0-4718-a25b-99ba013367f4"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 123,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("69960b43-a6d6-47a1-8ddf-2b33102dcadd"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 124,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("3f930eab-f07f-4a6e-b3ac-6db6fe0c8b9b"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 125,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("89b78f38-8def-4146-a7f5-53accd5ee901"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 126,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3ad54ea4-79cc-4032-8e6c-733b79eb2350"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 127,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("0894cdd2-8585-43c6-bbd2-8e97befb67f1"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 128,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ea5b88da-eacc-4b92-8020-82d1a635d9e9"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 129,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8efc92e0-0735-4ec8-904f-7431274c9ed7"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 130,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d2db3cf0-e95e-48c2-a3e6-43db43dc33d5"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 131,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("74e4ed67-f246-4744-ab50-018ba9ead866"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 132,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d2e1b5cb-dc27-4804-b6cc-41b276a0368c"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 133,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a1e010f4-138b-46e3-8822-f1e1a6d97325"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 134,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("1e8d2268-2885-4890-93a6-cd74106076a2"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 135,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d1e5a3ad-de2f-40c0-a3dc-f204e64b5bda"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 136,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("45ef7bf2-a91e-446f-adb1-1b12946773f6"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 137,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("03747f28-3b71-4f0c-94f9-648cd24443e9"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 138,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("7c585254-2406-483a-a150-8db6e8e1dbd0"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 139,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("77507a56-4ab3-402d-bc30-51ae8bed7c92"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 140,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("50b41d67-7869-48a6-a678-e6810bfd53cc"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 141,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("7146f845-9c2a-4a93-a663-0dfc8fe57f3c"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 142,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("6aa64125-54d2-4149-9aed-f92bbc70f498"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 143,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("10ca2f15-aae7-434b-b8f4-ebe55cad60de"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 144,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ecffed0d-d8ed-4014-918d-851df1337cbc"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 145,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("89dc5285-f98f-48ad-9c49-d53e891e9b6b"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 146,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("68377de6-a8cb-4c07-99fc-b7dc8b23d3af"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 147,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("cca39971-6c17-4317-aba3-1b1a54d8620f"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 148,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("bb20a503-27cd-47cb-a0ca-3b1f76f9379d"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 149,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("51958c9a-addf-41a0-9ba7-aa7405adbd49"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 150,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a6a9e6b0-44e2-4632-8173-9d4d143965de"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 151,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("4be0e3bd-5fd7-4e7d-9d83-39b7267ac4cc"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 152,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("0f17f815-ab23-45f4-abfd-2368345e0b7c"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 153,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("f31a659a-70a9-45a4-9863-653f6dea5f9f"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 154,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("b5a26244-7a21-4637-a768-b4e9ca8bd08e"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 155,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("611ce18c-7893-4264-85b6-c0351c82f4ce"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 156,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8300fdcb-11c6-4dca-868c-df5b7c56d0ab"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 157,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("31abfd16-508a-42e3-9442-355dfe93d49e"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 158,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("594fac5b-b953-4d8d-9ef0-9bcf3826f0fd"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 159,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2693c735-ff5a-4eb3-a825-0dc818e835f1"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 160,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("0a9fa22e-0604-4e7e-99d8-16b28d239680"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 161,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1eaf6890-9d00-4f89-bce2-0a9996b076ec"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 162,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("cdca54f2-f96a-4aed-8059-133b5bf4fd07"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 163,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("77458952-301f-4767-b641-572467f9ea8c"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 164,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("f536cbdb-53bf-4d2a-9ef2-b5b0eb62ed1d"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 165,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("213c02a7-a0e1-4eb4-a586-b3eec5914832"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 166,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("8d19a7ee-b925-4121-a1fc-ac8722ed25d3"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 167,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("0a9246dc-2c86-41dc-9307-b2c858872d66"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 168,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("0a8149c8-5222-436f-a51b-57ba82b5da96"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 169,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("7844b5cd-7d6f-4a45-9631-bffcc27f549f"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 170,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("22be0988-5e63-42c2-9e63-1f9d74bfacc0"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 171,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("28d94ad0-eb6c-48c8-9139-d0a5e92d57bb"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 172,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("3c8da1c7-b3b1-40ec-af6a-9e6f3d4b4bda"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 173,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c1fbc3a1-b795-46a6-b27e-7adba7e5de4b"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 174,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("03df6d83-0cb1-47a9-9d3d-873b64125f73"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 175,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("bda566a5-9898-4df2-a218-8cdfe4c7ca27"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 176,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("1e4112f0-1e81-464b-9c78-f377e938e011"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 177,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1dc9000a-3063-4a4b-b0d4-0aac9534bf11"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 178,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("cbb69df7-767a-4440-94d8-f39406e9c32d"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 179,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("926fb464-e9e1-4aa1-bb81-ca73f1b6cbf6"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 180,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("da878942-f0ab-4fe1-a4c2-0bea3345f541"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 181,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("26773a7d-90eb-4522-946e-8e9fdc1d3f82"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 182,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("ad477bbc-b3aa-4b81-a5a7-3932b03e5a91"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 183,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7233e255-3e0e-4c3a-bcba-bcec84ccdc60"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 184,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("daddd8fa-755b-4891-8bea-cff0039ee1e7"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 185,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b8c4b1db-716c-4f57-9b22-4ec74f36bcfa"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 186,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("9fdf9611-450d-4f1f-ba90-ae87d175c7db"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 187,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("b115f375-54d9-4d8b-a7f2-88847b8904c5"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 188,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("c7326799-a6ec-4c90-8cab-6b83b9dc96e3"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 189,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2aa802e5-3af9-4915-9a30-7eb5f0d44684"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 190,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("1827f429-0569-4b23-b244-5d3847002082"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 191,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8eec411b-9c6d-4238-8607-b0bc89f2a470"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 192,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("221a4fdd-e107-4c91-a17b-d290d04094b6"),
                            PermissionControllerID = 48
                        });
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.Property<int>("RoleConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleConfigID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleConfig", "Permission");

                    b.HasData(
                        new
                        {
                            RoleConfigID = 1,
                            PermissionControllerActionID = 1,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 2,
                            PermissionControllerActionID = 2,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 3,
                            PermissionControllerActionID = 3,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 4,
                            PermissionControllerActionID = 4,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 5,
                            PermissionControllerActionID = 5,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 6,
                            PermissionControllerActionID = 6,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 7,
                            PermissionControllerActionID = 7,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 8,
                            PermissionControllerActionID = 8,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 9,
                            PermissionControllerActionID = 9,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 10,
                            PermissionControllerActionID = 10,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 11,
                            PermissionControllerActionID = 11,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 12,
                            PermissionControllerActionID = 12,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 13,
                            PermissionControllerActionID = 13,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 14,
                            PermissionControllerActionID = 14,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 15,
                            PermissionControllerActionID = 15,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 16,
                            PermissionControllerActionID = 16,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 17,
                            PermissionControllerActionID = 17,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 18,
                            PermissionControllerActionID = 18,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 19,
                            PermissionControllerActionID = 19,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 20,
                            PermissionControllerActionID = 20,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 21,
                            PermissionControllerActionID = 21,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 22,
                            PermissionControllerActionID = 22,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 23,
                            PermissionControllerActionID = 23,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 24,
                            PermissionControllerActionID = 24,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 25,
                            PermissionControllerActionID = 25,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 26,
                            PermissionControllerActionID = 26,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 27,
                            PermissionControllerActionID = 27,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 28,
                            PermissionControllerActionID = 28,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 29,
                            PermissionControllerActionID = 29,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 30,
                            PermissionControllerActionID = 30,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 31,
                            PermissionControllerActionID = 31,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 32,
                            PermissionControllerActionID = 32,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 33,
                            PermissionControllerActionID = 33,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 34,
                            PermissionControllerActionID = 34,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 35,
                            PermissionControllerActionID = 35,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 36,
                            PermissionControllerActionID = 36,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 37,
                            PermissionControllerActionID = 37,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 38,
                            PermissionControllerActionID = 38,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 39,
                            PermissionControllerActionID = 39,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 40,
                            PermissionControllerActionID = 40,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 41,
                            PermissionControllerActionID = 41,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 42,
                            PermissionControllerActionID = 42,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 43,
                            PermissionControllerActionID = 43,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 44,
                            PermissionControllerActionID = 44,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 45,
                            PermissionControllerActionID = 45,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 46,
                            PermissionControllerActionID = 46,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 47,
                            PermissionControllerActionID = 47,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 48,
                            PermissionControllerActionID = 48,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 49,
                            PermissionControllerActionID = 49,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 50,
                            PermissionControllerActionID = 50,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 51,
                            PermissionControllerActionID = 51,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 52,
                            PermissionControllerActionID = 52,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 53,
                            PermissionControllerActionID = 53,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 54,
                            PermissionControllerActionID = 54,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 55,
                            PermissionControllerActionID = 55,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 56,
                            PermissionControllerActionID = 56,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 57,
                            PermissionControllerActionID = 57,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 58,
                            PermissionControllerActionID = 58,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 59,
                            PermissionControllerActionID = 59,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 60,
                            PermissionControllerActionID = 60,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 61,
                            PermissionControllerActionID = 61,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 62,
                            PermissionControllerActionID = 62,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 63,
                            PermissionControllerActionID = 63,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 64,
                            PermissionControllerActionID = 64,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 65,
                            PermissionControllerActionID = 65,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 66,
                            PermissionControllerActionID = 66,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 67,
                            PermissionControllerActionID = 67,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 68,
                            PermissionControllerActionID = 68,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 69,
                            PermissionControllerActionID = 69,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 70,
                            PermissionControllerActionID = 70,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 71,
                            PermissionControllerActionID = 71,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 72,
                            PermissionControllerActionID = 72,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 73,
                            PermissionControllerActionID = 73,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 74,
                            PermissionControllerActionID = 74,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 75,
                            PermissionControllerActionID = 75,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 76,
                            PermissionControllerActionID = 76,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 77,
                            PermissionControllerActionID = 77,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 78,
                            PermissionControllerActionID = 78,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 79,
                            PermissionControllerActionID = 79,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 80,
                            PermissionControllerActionID = 80,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 81,
                            PermissionControllerActionID = 81,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 82,
                            PermissionControllerActionID = 82,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 83,
                            PermissionControllerActionID = 83,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 84,
                            PermissionControllerActionID = 84,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 85,
                            PermissionControllerActionID = 85,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 86,
                            PermissionControllerActionID = 86,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 87,
                            PermissionControllerActionID = 87,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 88,
                            PermissionControllerActionID = 88,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 89,
                            PermissionControllerActionID = 89,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 90,
                            PermissionControllerActionID = 90,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 91,
                            PermissionControllerActionID = 91,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 92,
                            PermissionControllerActionID = 92,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 93,
                            PermissionControllerActionID = 93,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 94,
                            PermissionControllerActionID = 94,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 95,
                            PermissionControllerActionID = 95,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 96,
                            PermissionControllerActionID = 96,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 97,
                            PermissionControllerActionID = 97,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 98,
                            PermissionControllerActionID = 98,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 99,
                            PermissionControllerActionID = 99,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 100,
                            PermissionControllerActionID = 100,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 101,
                            PermissionControllerActionID = 101,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 102,
                            PermissionControllerActionID = 102,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 103,
                            PermissionControllerActionID = 103,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 104,
                            PermissionControllerActionID = 104,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 109,
                            PermissionControllerActionID = 109,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 110,
                            PermissionControllerActionID = 110,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 111,
                            PermissionControllerActionID = 111,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 112,
                            PermissionControllerActionID = 112,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 113,
                            PermissionControllerActionID = 113,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 114,
                            PermissionControllerActionID = 114,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 115,
                            PermissionControllerActionID = 115,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 116,
                            PermissionControllerActionID = 116,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 117,
                            PermissionControllerActionID = 117,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 118,
                            PermissionControllerActionID = 118,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 119,
                            PermissionControllerActionID = 119,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 120,
                            PermissionControllerActionID = 120,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 121,
                            PermissionControllerActionID = 121,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 122,
                            PermissionControllerActionID = 122,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 123,
                            PermissionControllerActionID = 123,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 124,
                            PermissionControllerActionID = 124,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 129,
                            PermissionControllerActionID = 129,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 130,
                            PermissionControllerActionID = 130,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 131,
                            PermissionControllerActionID = 131,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 132,
                            PermissionControllerActionID = 132,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 105,
                            PermissionControllerActionID = 105,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 106,
                            PermissionControllerActionID = 106,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 107,
                            PermissionControllerActionID = 107,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 108,
                            PermissionControllerActionID = 108,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 125,
                            PermissionControllerActionID = 125,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 126,
                            PermissionControllerActionID = 126,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 127,
                            PermissionControllerActionID = 127,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 128,
                            PermissionControllerActionID = 128,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("UserId");

                    b.ToTable("Activity", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Property<int>("AddressTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddressTypesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("AddressTypesID");

                    b.HasIndex("UserId");

                    b.ToTable("AddressTypes", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Property<int>("BanksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BankGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("Banks", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Property<int>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BlockGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Block", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.Property<int>("BranchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BranchesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BranchesID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Branches", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CaptainZone", b =>
                {
                    b.Property<int>("CaptainZoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<Guid>("CaptainZoneGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CaptainZoneID");

                    b.HasIndex("BlockID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("CaptainZone", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CitiesCovered", b =>
                {
                    b.Property<int>("CitiesCoveredID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CitiesCoveredGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CitiesCoveredID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("CitiesCovered", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.HasIndex("RegionID");

                    b.HasIndex("UserId");

                    b.ToTable("City", "Setting");

                    b.HasData(
                        new
                        {
                            CityID = 1,
                            CityGuid = new Guid("f4a3f134-40fb-4e3c-b1a6-ab485e3530d1"),
                            CreateDate = new DateTime(2021, 10, 30, 14, 4, 27, 376, DateTimeKind.Local).AddTicks(1497),
                            EnableDate = new DateTime(2021, 10, 30, 14, 4, 27, 376, DateTimeKind.Local).AddTicks(2264),
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            Place = "",
                            RegionID = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.Property<int>("ConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmsSend")
                        .HasColumnType("bit");

                    b.Property<decimal>("LastSmsBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxDeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinDeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationID");

                    b.HasIndex("UserId");

                    b.ToTable("Configuration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CountryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Country", "Setting");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            CountryGuid = new Guid("ba3f7d54-8527-4055-bc74-e417de50e569"),
                            CreateDate = new DateTime(2021, 10, 30, 14, 4, 27, 372, DateTimeKind.Local).AddTicks(3837),
                            EnableDate = new DateTime(2021, 10, 30, 14, 4, 27, 373, DateTimeKind.Local).AddTicks(7639),
                            Extension = "00966",
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "السعودية",
                            NameEN = "SA",
                            Place = "",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Property<int>("DepartmentsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Isunique")
                        .HasColumnType("bit");

                    b.Property<int>("MainCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("SiteImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsID");

                    b.HasIndex("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Departments", "Setting");

                    b.HasData(
                        new
                        {
                            DepartmentsID = 1,
                            CreateDate = new DateTime(2021, 10, 30, 14, 4, 27, 384, DateTimeKind.Local).AddTicks(2098),
                            DepartmentsGuid = new Guid("33377ce6-9646-4bda-8e7f-fb7e46475380"),
                            EnableDate = new DateTime(2021, 10, 30, 14, 4, 27, 384, DateTimeKind.Local).AddTicks(3202),
                            IsDeleted = false,
                            IsEnable = true,
                            Isunique = false,
                            MainCategoryID = 1,
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiscountGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiscountTypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DiscountID");

                    b.HasIndex("UserId");

                    b.ToTable("Discount", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.Property<int>("HelpQuestionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HelpQuestionsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HelpUserType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForOrder")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("HelpQuestionsID");

                    b.HasIndex("UserId");

                    b.ToTable("HelpQuestions", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Inqueries", b =>
                {
                    b.Property<int>("InqueriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InqueriesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InqueriesID");

                    b.ToTable("Inqueries", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Property<int>("JobsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("JobsID");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs", "Setting");

                    b.HasData(
                        new
                        {
                            JobsID = 1,
                            CreateDate = new DateTime(2021, 10, 30, 14, 4, 27, 380, DateTimeKind.Local).AddTicks(4204),
                            EnableDate = new DateTime(2021, 10, 30, 14, 4, 27, 380, DateTimeKind.Local).AddTicks(6952),
                            IsDeleted = false,
                            IsEnable = true,
                            JobTypeId = 2,
                            JobsGuid = new Guid("79e25817-1dd9-4d07-a415-8ea7f1e850e6"),
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.Property<int>("KeyWordsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("KeyWordsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("KeyWordsID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.ToTable("KeyWords", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.LogTextMessage", b =>
                {
                    b.Property<int>("LogTextMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSend")
                        .HasColumnType("bit");

                    b.Property<Guid>("LogTextMessageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageReasonId")
                        .HasColumnType("int");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("LogTextMessageID");

                    b.ToTable("LogTextMessage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Property<int>("MainCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainCategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("MainCategory", "Setting");

                    b.HasData(
                        new
                        {
                            MainCategoryID = 1,
                            CreateDate = new DateTime(2021, 10, 30, 14, 4, 27, 382, DateTimeKind.Local).AddTicks(9212),
                            EnableDate = new DateTime(2021, 10, 30, 14, 4, 27, 383, DateTimeKind.Local).AddTicks(784),
                            IsDeleted = false,
                            IsEnable = true,
                            MainCategoryGuid = new Guid("746e7adc-115b-4e63-b8ab-459f2abab8e8"),
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Property<int>("MainPageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Property<int>("MainPageDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageDetailsID");

                    b.HasIndex("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageDetails", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.Property<int>("MainPageImagesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("MainPageDetailsID")
                        .HasColumnType("int");

                    b.Property<Guid>("MainPageImagesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageImagesID");

                    b.HasIndex("MainPageDetailsID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageImages", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Property<int>("NationalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("NationalityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Nationality", "Setting");

                    b.HasData(
                        new
                        {
                            NationalityID = 1,
                            CreateDate = new DateTime(2021, 10, 30, 14, 4, 27, 377, DateTimeKind.Local).AddTicks(402),
                            EnableDate = new DateTime(2021, 10, 30, 14, 4, 27, 377, DateTimeKind.Local).AddTicks(1135),
                            IsDeleted = false,
                            IsEnable = true,
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            NationalityGuid = new Guid("8316f810-f8c4-4cab-bcce-2d9e63d8f3d6"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("DescEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("OrderStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderStatusType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PackageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Package", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.Property<int>("PaymentConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BanksID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBANnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAnrdoid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<string>("UserIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VendorAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorIOS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentConfigurationID");

                    b.HasIndex("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentConfiguration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.Property<int>("PaymentWayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentWayGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentWayID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentWay", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Region", "Setting");

                    b.HasData(
                        new
                        {
                            RegionID = 1,
                            CountryID = 1,
                            CreateDate = new DateTime(2021, 10, 30, 14, 4, 27, 374, DateTimeKind.Local).AddTicks(5181),
                            EnableDate = new DateTime(2021, 10, 30, 14, 4, 27, 374, DateTimeKind.Local).AddTicks(5754),
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            Place = "",
                            RegionGuid = new Guid("98531f83-c378-4336-84a6-5ba7bdff0c5f"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Property<int>("ShippingCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShippingCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ShippingCompanyID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.Property<int>("SliderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayIn")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("SliderGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SliderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("SliderID");

                    b.HasIndex("UserId");

                    b.ToTable("Slider", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.StatusCompany", b =>
                {
                    b.Property<int>("StatusCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("StatusCoId")
                        .HasColumnType("int");

                    b.Property<Guid>("StatusCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusHomeMadeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("StatusCompanyID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.ToTable("StatusCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Subscribe", b =>
                {
                    b.Property<int>("SubscribeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscribeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscribeID");

                    b.ToTable("Subscribe", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Tokens", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("TokenVal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.Property<int>("CartDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CartDetailsGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CartMasterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CartDetailsID");

                    b.HasIndex("CartMasterID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Property<int>("CartMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<Guid>("CartMasterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CartMasterStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Promocode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PromocodeDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SessionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("tax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CartMasterID");

                    b.HasIndex("CustomersID");

                    b.ToTable("CartMaster", "Site");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.Property<int>("TempPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("TempPermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TempPermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("TempPermission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserJWTToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "662518f5-6d07-4771-84e4-28847e2a3bdc",
                            Email = "SystemUser@Admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SystemUser@Admin.com",
                            NormalizedUserName = "SYSTEMUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEP65QXLX6e94ehLc9ntv07Q7n/aO6wf8y6j/z15XE7hfgyZLCNvHmM3Ar6SaTwzC3g==",
                            PhoneNumber = "012",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "148c00bc-405d-40fb-8263-334ef1459778",
                            TwoFactorEnabled = false,
                            UserName = "SystemUser",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.Property<int>("EnableHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnableHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("EnableHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("EnableHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Product", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductImage", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.Property<int>("ProductQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductQuestionID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductQuestion", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.Property<int>("VacHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<DateTime>("VacFrom")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VacHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VacTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VacHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VacHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorBalance", b =>
                {
                    b.Property<int>("VendorBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorBlanceID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorBalance", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorSupport", b =>
                {
                    b.Property<int>("VendorSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpQuestionsID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorSupportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorSupportID");

                    b.HasIndex("HelpQuestionsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorSupport", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Property<int>("VendorsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutStoreAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutStoreEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActivityID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .HasColumnType("int");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("CRPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVac")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaarofNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyTarget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NationalityID")
                        .HasColumnType("int");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterType")
                        .HasColumnType("int");

                    b.Property<string>("SeconedNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkingTimes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorsID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("BanksID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors", "Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TransactionCard")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.HasOne("Homemade.Model.BankTransaction.TransactionCard", "TransactionCard")
                        .WithMany("TransactionCardLog")
                        .HasForeignKey("TransactionCardTransactionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.HasOne("Homemade.Model.Setting.AddressTypes", "AddressTypes")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("AddressTypesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AddressTypes");

                    b.Navigation("Block");

                    b.Navigation("Customers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Customers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DeliverySetting", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DeliverySetting")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverBlance")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("DriverBlance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("DriverBlance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverBlance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverSupport", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverSupport")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.HelpQuestions", "HelpQuestions")
                        .WithMany("DriverSupport")
                        .HasForeignKey("HelpQuestionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("DriverSupport")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverSupport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("HelpQuestions");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Drivers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Drivers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.TransactionSTCPay", "TransactionSTCPay")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("TransactionSTCPayID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionType")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Jobs", "Jobs")
                        .WithMany("Employees")
                        .HasForeignKey("JobsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Jobs");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceMaster");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceHistory", b =>
                {
                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceHistory")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.ListTransfer", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("ListTransfer")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("ListTransfer")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ListTransfer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Notification")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("Notification")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("Notification")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderRate", "OrderRate")
                        .WithMany("Notification")
                        .HasForeignKey("OrderRateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("Notification")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.ProdQuestion", "ProdQuestion")
                        .WithMany("Notification")
                        .HasForeignKey("ProdQuestionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Notification")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("OrderRate");

                    b.Navigation("OrderVendor");

                    b.Navigation("ProdQuestion");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderPromo")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("OrderPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderRate")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderRate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("OrderVendor")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("OrderVendor")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("OrderVendor")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderVendor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("OrderVendor")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drivers");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("Package");

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.HasOne("Homemade.Model.Customer.CustomerLocation", "CustomerLocation")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("Orders")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("OrderStatus");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PromoCode")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("VendorPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorPromo")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.HasOne("Homemade.Model.PermissionAction", "PermissionActions")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.PermissionController", "PermissionControllers")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionControllerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionActions");

                    b.Navigation("PermissionControllers");
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("RoleConfig")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("RoleConfig")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Activity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("AddressTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Banks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Block")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Block")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Branches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CaptainZone", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CaptainZone")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("CaptainZone")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CaptainZone")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Block");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CitiesCovered", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("CitiesCovered")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CitiesCovered")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Region", "Region")
                        .WithMany("City")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("City")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Configuration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Country")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainCategory", "MainCategory")
                        .WithMany("Departments")
                        .HasForeignKey("MainCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Departments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Discount", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Discount")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("HelpQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("KeyWords")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("KeyWords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Departments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainCategory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPage", "MainPage")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("MainPageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPageDetails", "MainPageDetails")
                        .WithMany("MainPageImages")
                        .HasForeignKey("MainPageDetailsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPageDetails");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Nationality")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Package")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentWay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Country", "Country")
                        .WithMany("Region")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Region")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Slider")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.StatusCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("StatusCompany")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("StatusCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.HasOne("Homemade.Model.Site.CartMaster", "CartMaster")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CartMaster");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CartMaster")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("TempPermission")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("TempPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("EnableHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("EnableHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("Product")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Product")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Product")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductImage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VacHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VacHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorBalance", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("VendorBalance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("VendorBalance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorBalance")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorSupport", b =>
                {
                    b.HasOne("Homemade.Model.Setting.HelpQuestions", "HelpQuestions")
                        .WithMany("VendorSupport")
                        .HasForeignKey("HelpQuestionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("VendorSupport")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorSupport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorSupport")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HelpQuestions");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Activity", "Activity")
                        .WithMany("Vendors")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("Vendors")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("Vendors")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Vendors")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Vendors")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("Vendors")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Vendors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activity");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Navigation("TransactionCardLog");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Navigation("CartMaster");

                    b.Navigation("CustomerBalance");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Notification");

                    b.Navigation("Orders");

                    b.Navigation("ProdQuestion");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Navigation("Notification");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Navigation("CaptainZone");

                    b.Navigation("DriverBlance");

                    b.Navigation("DriverSupport");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Navigation("TranLogSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Navigation("CustomerBalance");

                    b.Navigation("DriverBlance");

                    b.Navigation("VendorBalance");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceHistory");

                    b.Navigation("ListTransfer");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Navigation("CustomerBalance");

                    b.Navigation("DriverBlance");

                    b.Navigation("DriverSupport");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderRate");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("Orders");

                    b.Navigation("VendorPromo");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Navigation("ListTransfer");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Navigation("CaptainZone");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("CitiesCovered");

                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Navigation("Region");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Navigation("KeyWords");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.Navigation("DriverSupport");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Navigation("MainPageDetails");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Navigation("MainPageImages");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Navigation("OrderHistory");

                    b.Navigation("Orders");

                    b.Navigation("OrderVendor");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Navigation("OrderVendor");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Navigation("OrderVendor");

                    b.Navigation("StatusCompany");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("AddressTypes");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("CaptainZone");

                    b.Navigation("CitiesCovered");

                    b.Navigation("City");

                    b.Navigation("Configuration");

                    b.Navigation("Country");

                    b.Navigation("CustomerBalance");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("DeliverySetting");

                    b.Navigation("Departments");

                    b.Navigation("Discount");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("DriverSupport");

                    b.Navigation("Employees");

                    b.Navigation("EnableHistory");

                    b.Navigation("HelpQuestions");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Jobs");

                    b.Navigation("KeyWords");

                    b.Navigation("ListTransfer");

                    b.Navigation("MainCategory");

                    b.Navigation("MainPage");

                    b.Navigation("MainPageDetails");

                    b.Navigation("MainPageImages");

                    b.Navigation("Nationality");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderPromo");

                    b.Navigation("OrderRate");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("Package");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("PaymentStatus");

                    b.Navigation("PaymentWay");

                    b.Navigation("ProdQuestion");

                    b.Navigation("Product");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");

                    b.Navigation("PromoCode");

                    b.Navigation("Region");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Slider");

                    b.Navigation("StatusCompany");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("TransactionType");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorPromo");

                    b.Navigation("Vendors");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("ProdQuestion");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Navigation("EnableHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorPromo");

                    b.Navigation("VendorSupport");
                });
#pragma warning restore 612, 618
        }
    }
}
