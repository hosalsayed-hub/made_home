// <auto-generated />
using System;
using Homemade.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Homemade.DAL.Contract.Migrations
{
    [DbContext(typeof(HomemadeContext))]
    [Migration("20220622122648_NewEditEmailContent")]
    partial class NewEditEmailContent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRedirect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMSSentToUser")
                        .HasColumnType("bit");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TransactionCard", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.Property<int>("TransactionCardLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastStatusUpdateFrom")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionCardLogGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TransactionCardTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("TransactionCardLogID");

                    b.HasIndex("TransactionCardTransactionID");

                    b.ToTable("TransactionCardLog", "Transaction");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "338bb72d-7a59-407c-9b0e-bd32ee8bcb10",
                            Name = "Admin",
                            RoleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e3103d3e-7671-45dc-813f-55a108b56433",
                            Name = "Vendor",
                            RoleTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "1a19c5fe-48bf-452c-b29c-522d0a153858",
                            Name = "Customer",
                            RoleTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "44cb58a6-ccbd-419a-903a-ecad9a82ad01",
                            Name = "Employee",
                            RoleTypeId = 2
                        });
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.Property<int>("CustomerBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerBlanceID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerBalance", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.Property<int>("CustomerFavouritesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerFavouritesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerFavouritesID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerFavourites", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Property<int>("CustomerLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressTypesID")
                        .HasColumnType("int");

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerLocationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerfiy")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomerLocationID");

                    b.HasIndex("AddressTypesID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerLocation", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Property<int>("CustomersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CustomersID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", "Customer");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DeliverySetting", b =>
                {
                    b.Property<int>("DeliverySettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseFare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliverySettingGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DriverCommision")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OverKmFare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DeliverySettingID");

                    b.HasIndex("UserId");

                    b.ToTable("DeliverySetting", "Driver");

                    b.HasData(
                        new
                        {
                            DeliverySettingID = 1,
                            BaseFare = 20m,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliverySettingGuid = new Guid("9e996c7b-bcd4-4992-a5f9-3597e4014df2"),
                            DriverCommision = 15m,
                            IsDeleted = false,
                            IsEnable = true,
                            MinKM = 3m,
                            OverKmFare = 5m,
                            Tax = 0m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Property<int>("DriverBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverBlance", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverSupport", b =>
                {
                    b.Property<int>("DriverSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DriverSupportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpQuestionsID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DriverSupportID");

                    b.HasIndex("DriversID");

                    b.HasIndex("HelpQuestionsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("DriverSupport", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Property<int>("DriversID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("BirthDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CarLicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarPictrue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HijiriInsuranceEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriBirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HijriIDDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IDDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsuranceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("InsuranceEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenTransaction")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PCOEndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PCOEndDateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PCOHijriEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberStc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PhoneType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PrivateHijriLicenseEndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrivateLicenseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrivateLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PrivateLicenseTypeEndDate")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RegionCityID")
                        .HasColumnType("int");

                    b.Property<string>("RequestNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VerifyStc")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifyStcDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DriversID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("RegionCityID");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.Property<int>("TranLogSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<Guid>("TranLogSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionSTCPayID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TranLogSTCPayID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionSTCPayID");

                    b.HasIndex("UserId");

                    b.ToTable("TranLogSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Property<int>("TransactionSTCPayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquriyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("ItemRefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentOrderReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STCStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionSTCPayGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionSTCPayID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionSTCPay", "Driver");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("TransactionTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionType", "Driver");

                    b.HasData(
                        new
                        {
                            TransactionTypeID = 1,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "شحن رصيد بواسطة الإدارة",
                            NameEN = "Deposit by Operation",
                            TransactionTypeGuid = new Guid("562f59fb-2e82-4c79-9993-a63f7c78e244"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 2,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "سحب - جزاء",
                            NameEN = "Withdrawal",
                            TransactionTypeGuid = new Guid("fd7ac187-fc2c-4134-931c-714cc9bfee48"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 3,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "علاوة",
                            NameEN = "Bouns",
                            TransactionTypeGuid = new Guid("01e161ad-9a7a-4ac0-a279-0f9d4c6c6ba1"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 4,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "عقوبة",
                            NameEN = "Punishment",
                            TransactionTypeGuid = new Guid("31a337c2-83fe-45db-93fb-eec57f42d216"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 5,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع للكابتن STC",
                            NameEN = "Pay to Captain STC",
                            TransactionTypeGuid = new Guid("bf084fcf-9f79-472e-a516-884a6b20956a"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 6,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "توصيل طلب",
                            NameEN = "Delivery Order",
                            TransactionTypeGuid = new Guid("b4afd714-f025-4cb6-811d-e871e40eac2b"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 7,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع طلب",
                            NameEN = "Pay Order",
                            TransactionTypeGuid = new Guid("74576b78-a91e-483a-b396-f8de275fef94"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 8,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "دفع فاتورة",
                            NameEN = "Pay Invoice",
                            TransactionTypeGuid = new Guid("e700a777-7916-4bea-a9c9-a9dccbd4b350"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 9,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "تحويل كاش",
                            NameEN = "Cash Transfer",
                            TransactionTypeGuid = new Guid("ae68054f-ed9c-4af7-8651-37560a2a147f"),
                            UserId = 1
                        },
                        new
                        {
                            TransactionTypeID = 10,
                            CreateDate = new DateTime(2020, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnable = false,
                            NameAR = "شحن محفظة",
                            NameEN = "Charge Wallet",
                            TransactionTypeGuid = new Guid("05fa6219-3fda-414c-8e74-a0029905bc8f"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.Property<int>("EntityEmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDateHijri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDateMilady")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BloodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityEmpGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IDNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobsID")
                        .HasColumnType("int");

                    b.Property<string>("LastNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("LastNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidNameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MidNameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityEmpID");

                    b.HasIndex("CityID");

                    b.HasIndex("JobsID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees", "Emp");

                    b.HasData(
                        new
                        {
                            EntityEmpID = 1,
                            AddressAR = "الاسماعيليه",
                            AddressEN = "ismailia",
                            BirthDateHijri = "",
                            BloodTypeId = 1,
                            CityID = 1,
                            CreateDate = new DateTime(2022, 6, 22, 14, 26, 43, 958, DateTimeKind.Local).AddTicks(3528),
                            Email = "SystemUser@Admin.com",
                            EnableDate = new DateTime(2022, 6, 22, 14, 26, 43, 958, DateTimeKind.Local).AddTicks(4227),
                            EntityEmpGuid = new Guid("2299447c-fc61-4aa4-ba03-8c91e4f4b2d5"),
                            FileNo = "123321",
                            FirstNameAR = "احمد",
                            FirstNameEN = "Ahmed",
                            Gender = 1,
                            IDNo = "",
                            IsDeleted = false,
                            IsEnable = true,
                            JobsID = 1,
                            LastNameAR = "حسين",
                            LastNameEN = "Hussien",
                            Lat = "",
                            Lng = "",
                            MidNameAR = "سيد",
                            MidNameEN = "Sayed",
                            MobileNo = "0595489633",
                            NationalityID = 1,
                            Notes = "",
                            PhoneNumber = "",
                            Photo = "",
                            UserEnable = 1,
                            UserId = 1,
                            Zoom = ""
                        });
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InvoiceDetailsID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceDetails", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceHistory", b =>
                {
                    b.Property<int>("InvoiceHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InvoiceHistoryID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Property<int>("InvoiceMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceMasterGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<decimal>("PerHomeMade")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("InvoiceMaster", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ListTransfer", b =>
                {
                    b.Property<int>("ListTransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListTransferGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ListTransferID");

                    b.HasIndex("BanksID");

                    b.HasIndex("InvoiceMasterID");

                    b.HasIndex("UserId");

                    b.ToTable("ListTransfer", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverBlanceID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NotificationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderRateID")
                        .HasColumnType("int");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int?>("ProdQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int?>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("DriverBlanceID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProdQuestionID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Notification", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.Property<int>("OrderHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<Guid>("OrderHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderHistoryID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncreaseItem")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderItemsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceBeforeVat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProdImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("VatValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderItems", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderNotesAdmin", b =>
                {
                    b.Property<int>("OrderNotesAdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderNotesAdminGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderNotesAdminID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderNotesAdmin", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.Property<int>("OrderPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderPromoID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Property<int>("OrderRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentDelivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderRateGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<decimal>("RateDelivery")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RateOrder")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderRateID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderRate", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Property<int>("OrderVendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApprovalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("CancelTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CaptainPaidID")
                        .HasColumnType("int");

                    b.Property<int>("CaptainTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryVatValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DistanceKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DriverCharge")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncreaseQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderVendorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrdersID")
                        .HasColumnType("int");

                    b.Property<decimal>("PackageAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("PackagePercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerHome")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerStore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCompanyPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBaseItems")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("VatPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatProduct")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("OrderVendorID");

                    b.HasIndex("DriversID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("OrdersID");

                    b.HasIndex("PackageID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("OrderVendor", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Property<int>("OrdersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerLocationID")
                        .HasColumnType("int");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrdersGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrdersID");

                    b.HasIndex("CustomerLocationID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Property<int>("ProdQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepley")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProdQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProdQuestionID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderQuestion", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Property<int>("PromoCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double>("LimitCount")
                        .HasColumnType("float");

                    b.Property<Guid>("PromoCodeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PromoType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PromoCodeID");

                    b.HasIndex("UserId");

                    b.ToTable("PromoCode", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequest", b =>
                {
                    b.Property<int>("QuantitiesRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuantitiesRequestGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("QuantitiesRequestID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("QuantitiesRequest", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequestProduct", b =>
                {
                    b.Property<int>("QuantitiesRequestProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantitiesRequestID")
                        .HasColumnType("int");

                    b.Property<Guid>("QuantitiesRequestProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityAllowed")
                        .HasColumnType("float");

                    b.Property<double>("QuantityInventory")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("QuantitiesRequestProductID");

                    b.HasIndex("ProductID");

                    b.HasIndex("QuantitiesRequestID");

                    b.HasIndex("UserId");

                    b.ToTable("QuantitiesRequestProduct", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.ShipCompanyHistory", b =>
                {
                    b.Property<int>("ShipCompanyHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseStatusId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShipCompanyHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("ShippingStatusId")
                        .HasColumnType("int");

                    b.HasKey("ShipCompanyHistoryID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("ShippingCompanyID");

                    b.ToTable("ShipCompanyHistory", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.TabCharge", b =>
                {
                    b.Property<int>("TabChargeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("CustomerBalanceID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRedirect")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RedirectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseRedirect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TabChargeEnum")
                        .HasColumnType("int");

                    b.Property<Guid>("TabChargeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TapChargeID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TabChargeID");

                    b.HasIndex("CustomerBalanceID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TabCharge", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.TabChargeExLog", b =>
                {
                    b.Property<int>("TabChargeExLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<int>("ErrorFrom")
                        .HasColumnType("int");

                    b.Property<int?>("OrdersID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseRedirect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TabChargeEnum")
                        .HasColumnType("int");

                    b.Property<int>("TabChargeExLogGuid")
                        .HasColumnType("int");

                    b.HasKey("TabChargeExLogID");

                    b.HasIndex("CustomersID");

                    b.HasIndex("OrdersID");

                    b.ToTable("TabChargeExLog", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.Property<int>("VendorPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("PromoCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorPromoGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorPromoID");

                    b.HasIndex("PromoCodeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorPromo", "Order");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Property<int>("PermissionActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionActionNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionActionNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionActionID");

                    b.ToTable("PermissionAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionActionID = 1,
                            PermissionActionGuid = new Guid("0f4dc157-b6bd-4624-8ae5-7ceec52b3822"),
                            PermissionActionNameAr = "عرض",
                            PermissionActionNameEn = "View"
                        },
                        new
                        {
                            PermissionActionID = 2,
                            PermissionActionGuid = new Guid("9babf922-e0a5-4a18-b184-ba4b25db997b"),
                            PermissionActionNameAr = "اضافة",
                            PermissionActionNameEn = "Insert"
                        },
                        new
                        {
                            PermissionActionID = 3,
                            PermissionActionGuid = new Guid("f8d33f7c-5c97-4a6f-b75e-b8afe6ff217d"),
                            PermissionActionNameAr = "تعديل",
                            PermissionActionNameEn = "Update"
                        },
                        new
                        {
                            PermissionActionID = 4,
                            PermissionActionGuid = new Guid("83fa497c-66c4-4de1-9fb8-74c9a648d1be"),
                            PermissionActionNameAr = "حذف",
                            PermissionActionNameEn = "Delete"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Property<int>("PermissionControllerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("PermissionControllerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionControllerNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionControllerNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionControllerID");

                    b.ToTable("PermissionController", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerID = 1,
                            PermissionControllerGuid = new Guid("b624b64a-d466-4729-906b-8b9eb835f0a9"),
                            PermissionControllerNameAr = "الصلاحيات",
                            PermissionControllerNameEn = "Permission"
                        },
                        new
                        {
                            PermissionControllerID = 2,
                            PermissionControllerGuid = new Guid("b5c9867d-0d47-44ec-a129-6e398aca6851"),
                            PermissionControllerNameAr = "الدور",
                            PermissionControllerNameEn = "Role"
                        },
                        new
                        {
                            PermissionControllerID = 3,
                            PermissionControllerGuid = new Guid("396c24de-23ac-404d-babb-40345f0a6ee7"),
                            PermissionControllerNameAr = "الدولة",
                            PermissionControllerNameEn = "Country"
                        },
                        new
                        {
                            PermissionControllerID = 4,
                            PermissionControllerGuid = new Guid("1f4dbde1-f9e6-4769-94c7-afa6df1069ee"),
                            PermissionControllerNameAr = "المنطقة",
                            PermissionControllerNameEn = "Region"
                        },
                        new
                        {
                            PermissionControllerID = 5,
                            PermissionControllerGuid = new Guid("2b9e30d0-b034-42cb-9c0b-ee4b65cd9b90"),
                            PermissionControllerNameAr = "المدينة",
                            PermissionControllerNameEn = "City"
                        },
                        new
                        {
                            PermissionControllerID = 6,
                            PermissionControllerGuid = new Guid("ba0c22f8-8181-470e-94ae-0f195e0b4df4"),
                            PermissionControllerNameAr = "الوظائف",
                            PermissionControllerNameEn = "Jobs"
                        },
                        new
                        {
                            PermissionControllerID = 7,
                            PermissionControllerGuid = new Guid("c122248f-8bdb-443a-8ff9-7a076e56c805"),
                            PermissionControllerNameAr = "الاقسام",
                            PermissionControllerNameEn = "Departments"
                        },
                        new
                        {
                            PermissionControllerID = 8,
                            PermissionControllerGuid = new Guid("304ec669-2a7f-4fab-bb1e-86196aa270f8"),
                            PermissionControllerNameAr = "الموظفين",
                            PermissionControllerNameEn = "Employees"
                        },
                        new
                        {
                            PermissionControllerID = 9,
                            PermissionControllerGuid = new Guid("6a8c1151-05ce-4166-8741-4948217874e6"),
                            PermissionControllerNameAr = "الجنسية",
                            PermissionControllerNameEn = "Nationality"
                        },
                        new
                        {
                            PermissionControllerID = 10,
                            PermissionControllerGuid = new Guid("4836a5ac-ee6c-4a45-99aa-f7503df1ed00"),
                            PermissionControllerNameAr = "اعدادات الدور",
                            PermissionControllerNameEn = "Role Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 11,
                            PermissionControllerGuid = new Guid("4ea56b2f-741a-42fd-8dd5-1149606b76a5"),
                            PermissionControllerNameAr = "الاعدادات",
                            PermissionControllerNameEn = "Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 12,
                            PermissionControllerGuid = new Guid("4695fd3c-7dd8-47e4-b28c-739defb07dbf"),
                            PermissionControllerNameAr = "البنوك",
                            PermissionControllerNameEn = "Bank"
                        },
                        new
                        {
                            PermissionControllerID = 13,
                            PermissionControllerGuid = new Guid("47d10a51-6a0c-4886-b666-fc0a841f7dc5"),
                            PermissionControllerNameAr = "طرق الدفع",
                            PermissionControllerNameEn = "PaymentWay"
                        },
                        new
                        {
                            PermissionControllerID = 14,
                            PermissionControllerGuid = new Guid("f349eabd-cbee-4807-af99-a0c82345b09b"),
                            PermissionControllerNameAr = "الأنشطة",
                            PermissionControllerNameEn = "Activity"
                        },
                        new
                        {
                            PermissionControllerID = 15,
                            PermissionControllerGuid = new Guid("55f0ce43-2202-44c6-bef7-ec01b1ef7a22"),
                            PermissionControllerNameAr = "الأحياء",
                            PermissionControllerNameEn = "Block"
                        },
                        new
                        {
                            PermissionControllerID = 16,
                            PermissionControllerGuid = new Guid("5421a9a3-5fe1-4d2e-9ffd-3daefd7057aa"),
                            PermissionControllerNameAr = "باقات التجار",
                            PermissionControllerNameEn = "Package"
                        },
                        new
                        {
                            PermissionControllerID = 17,
                            PermissionControllerGuid = new Guid("9c9823ff-c3f6-4df9-bc14-daa1b351b11b"),
                            PermissionControllerNameAr = "حالات الدفع",
                            PermissionControllerNameEn = "PaymentStatus"
                        },
                        new
                        {
                            PermissionControllerID = 18,
                            PermissionControllerGuid = new Guid("c5dc9702-dc96-4447-858c-a27ac5eeff67"),
                            PermissionControllerNameAr = "اعدادت الشركه",
                            PermissionControllerNameEn = " Company Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 19,
                            PermissionControllerGuid = new Guid("ed8df301-fba3-4e8e-b612-96e0dcb7b42e"),
                            PermissionControllerNameAr = "اعدادت الدفع",
                            PermissionControllerNameEn = "Payment Configuration"
                        },
                        new
                        {
                            PermissionControllerID = 20,
                            PermissionControllerGuid = new Guid("ea3378bf-dd36-4924-ae40-c298cd5f0460"),
                            PermissionControllerNameAr = "التصنيفات الرئسيه",
                            PermissionControllerNameEn = "Main categories"
                        },
                        new
                        {
                            PermissionControllerID = 21,
                            PermissionControllerGuid = new Guid("c02d1e69-3a94-4ad7-a1a6-71c8ac91d213"),
                            PermissionControllerNameAr = "البنرات",
                            PermissionControllerNameEn = "Sliders"
                        },
                        new
                        {
                            PermissionControllerID = 22,
                            PermissionControllerGuid = new Guid("bf0c9a3c-6150-495a-8d30-04d33b6ad29c"),
                            PermissionControllerNameAr = "شركات الشحن",
                            PermissionControllerNameEn = "Shipping Company"
                        },
                        new
                        {
                            PermissionControllerID = 23,
                            PermissionControllerGuid = new Guid("369bb29c-117f-4fe5-a743-6963a7531667"),
                            PermissionControllerNameAr = "الاستفسارات",
                            PermissionControllerNameEn = "Inqueries"
                        },
                        new
                        {
                            PermissionControllerID = 24,
                            PermissionControllerGuid = new Guid("ba51620a-5e39-4434-8d7f-d9772e6d6a5d"),
                            PermissionControllerNameAr = "الصفحات الرئيسية",
                            PermissionControllerNameEn = "Main Pages"
                        },
                        new
                        {
                            PermissionControllerID = 25,
                            PermissionControllerGuid = new Guid("e40efb2c-ba8e-4a51-8971-f1b7b4c74fdf"),
                            PermissionControllerNameAr = "المتاجر",
                            PermissionControllerNameEn = "Vendors"
                        },
                        new
                        {
                            PermissionControllerID = 26,
                            PermissionControllerGuid = new Guid("58573f57-ca1e-4a3f-9160-1389bdee6842"),
                            PermissionControllerNameAr = "الزبائن",
                            PermissionControllerNameEn = "Customer"
                        },
                        new
                        {
                            PermissionControllerID = 27,
                            PermissionControllerGuid = new Guid("d1e019d1-e358-43c4-8965-f9b5ce45841e"),
                            PermissionControllerNameAr = "المنتجات",
                            PermissionControllerNameEn = "Product"
                        },
                        new
                        {
                            PermissionControllerID = 28,
                            PermissionControllerGuid = new Guid("f8060d7a-f353-4b14-9eff-91d3e1b62308"),
                            PermissionControllerNameAr = "أنواع العناوين",
                            PermissionControllerNameEn = "Address Types"
                        },
                        new
                        {
                            PermissionControllerID = 29,
                            PermissionControllerGuid = new Guid("8fc50b4a-24a7-46a9-afdd-8d1f7dc6fdf6"),
                            PermissionControllerNameAr = "الكلمات المفتاحية",
                            PermissionControllerNameEn = "KeyWords"
                        },
                        new
                        {
                            PermissionControllerID = 30,
                            PermissionControllerGuid = new Guid("57c269d5-0299-410d-a4b5-d9a7c4c6489c"),
                            PermissionControllerNameAr = "منتجات الاوبريشن",
                            PermissionControllerNameEn = "Product Operation"
                        },
                        new
                        {
                            PermissionControllerID = 31,
                            PermissionControllerGuid = new Guid("0f52d05a-bf23-4c14-971d-1203cd8ff4cc"),
                            PermissionControllerNameAr = "طلبات الاوبريشن",
                            PermissionControllerNameEn = "Operation Orders"
                        },
                        new
                        {
                            PermissionControllerID = 32,
                            PermissionControllerGuid = new Guid("c870f7b5-7753-426b-b339-80a15feb7c6a"),
                            PermissionControllerNameAr = "طلبات المتجر",
                            PermissionControllerNameEn = "Vendor Orders"
                        },
                        new
                        {
                            PermissionControllerID = 33,
                            PermissionControllerGuid = new Guid("f6c5bc49-a43d-4a66-be70-91ada9d95782"),
                            PermissionControllerNameAr = "الفروع",
                            PermissionControllerNameEn = "Branches"
                        },
                        new
                        {
                            PermissionControllerID = 34,
                            PermissionControllerGuid = new Guid("674dca88-baf7-4f36-b47d-e5691338a092"),
                            PermissionControllerNameAr = "اكواد الخصم",
                            PermissionControllerNameEn = "Promo Code"
                        },
                        new
                        {
                            PermissionControllerID = 35,
                            PermissionControllerGuid = new Guid("1d760296-ad19-4752-8a27-b822897cf5cb"),
                            PermissionControllerNameAr = "سجل الاجازات",
                            PermissionControllerNameEn = "Vac History"
                        },
                        new
                        {
                            PermissionControllerID = 36,
                            PermissionControllerGuid = new Guid("b99b3692-c5b7-4bfd-a816-01eb472d2b3d"),
                            PermissionControllerNameAr = "سجل ايقاف الاشتراكات",
                            PermissionControllerNameEn = "Enable History"
                        },
                        new
                        {
                            PermissionControllerID = 37,
                            PermissionControllerGuid = new Guid("ebd073eb-51eb-496a-866b-323f27abb57b"),
                            PermissionControllerNameAr = "الطلبات الجديده للسائق",
                            PermissionControllerNameEn = "Driver New Requests"
                        },
                        new
                        {
                            PermissionControllerID = 38,
                            PermissionControllerGuid = new Guid("a72e7654-a6ff-4c53-9d40-fb9f0e09331f"),
                            PermissionControllerNameAr = "الطلبات الملغية للسائق",
                            PermissionControllerNameEn = "Driver Rejected Requests"
                        },
                        new
                        {
                            PermissionControllerID = 39,
                            PermissionControllerGuid = new Guid("1740dac7-da81-4d6f-92d4-1c6dc73c23c3"),
                            PermissionControllerNameAr = "طلبات انتظار التفعيل للسائق",
                            PermissionControllerNameEn = "Driver Waiting Activation"
                        },
                        new
                        {
                            PermissionControllerID = 40,
                            PermissionControllerGuid = new Guid("c7f1ca0a-d51d-49b7-8717-0314146f1732"),
                            PermissionControllerNameAr = "طلبات تحت المراجعة للسائق",
                            PermissionControllerNameEn = "Driver Under Requests"
                        },
                        new
                        {
                            PermissionControllerID = 41,
                            PermissionControllerGuid = new Guid("5bb3908b-4517-427b-a300-5b312f63bf79"),
                            PermissionControllerNameAr = "الفواتير",
                            PermissionControllerNameEn = "Invoices"
                        },
                        new
                        {
                            PermissionControllerID = 42,
                            PermissionControllerGuid = new Guid("33241747-7e28-4f8c-b3c4-e22548f52990"),
                            PermissionControllerNameAr = "فواتير المتجر",
                            PermissionControllerNameEn = "Store Invoice"
                        },
                        new
                        {
                            PermissionControllerID = 43,
                            PermissionControllerGuid = new Guid("fb0f0706-2ec0-4d83-b7d0-6710dd2423f0"),
                            PermissionControllerNameAr = "الخصم و الضريبة",
                            PermissionControllerNameEn = "Vat Discount"
                        },
                        new
                        {
                            PermissionControllerID = 44,
                            PermissionControllerGuid = new Guid("1385ebfe-08f9-4df0-a627-8075e981a34c"),
                            PermissionControllerNameAr = "ماليات الكباتن",
                            PermissionControllerNameEn = "Captain Financial"
                        },
                        new
                        {
                            PermissionControllerID = 45,
                            PermissionControllerGuid = new Guid("68f046c6-2c23-460c-86cb-92ac6f323a2a"),
                            PermissionControllerNameAr = "ارسال رسالة",
                            PermissionControllerNameEn = "Send Message"
                        },
                        new
                        {
                            PermissionControllerID = 46,
                            PermissionControllerGuid = new Guid("9abce959-06d3-400b-b994-24da27eef66d"),
                            PermissionControllerNameAr = "المدن المغطاة",
                            PermissionControllerNameEn = "Cities Covered"
                        },
                        new
                        {
                            PermissionControllerID = 47,
                            PermissionControllerGuid = new Guid("c6d3cde2-d76a-42cb-9098-7a1585175605"),
                            PermissionControllerNameAr = "مناطق الكابتن",
                            PermissionControllerNameEn = "Captain Zone"
                        },
                        new
                        {
                            PermissionControllerID = 48,
                            PermissionControllerGuid = new Guid("f95e489d-4112-4707-9fcf-0b215179c2a1"),
                            PermissionControllerNameAr = "تعيين سائق",
                            PermissionControllerNameEn = "Assign Driver"
                        },
                        new
                        {
                            PermissionControllerID = 49,
                            PermissionControllerGuid = new Guid("6546918d-e5ca-4a90-a02d-d4f179357fec"),
                            PermissionControllerNameAr = "عملاء المتاجر",
                            PermissionControllerNameEn = "Vendor Customer"
                        },
                        new
                        {
                            PermissionControllerID = 50,
                            PermissionControllerGuid = new Guid("0c4e61d5-ff9b-41ee-ab69-cb8d8ec5e83f"),
                            PermissionControllerNameAr = "سجل اجازات المتاجر",
                            PermissionControllerNameEn = "Vendor Vac History"
                        },
                        new
                        {
                            PermissionControllerID = 51,
                            PermissionControllerGuid = new Guid("99ccec95-e3f7-46cc-afa5-654c85e3f8b9"),
                            PermissionControllerNameAr = "سجل ايقاف اشتراكات المتاجر",
                            PermissionControllerNameEn = "Vendor Enable History"
                        },
                        new
                        {
                            PermissionControllerID = 52,
                            PermissionControllerGuid = new Guid("ecaf66a9-e083-4860-9802-4e46e775a1c8"),
                            PermissionControllerNameAr = "اسئلة المنتج",
                            PermissionControllerNameEn = "Product Question"
                        },
                        new
                        {
                            PermissionControllerID = 53,
                            PermissionControllerGuid = new Guid("b8751d91-fb85-4bcd-93c5-146a8b85ae8c"),
                            PermissionControllerNameAr = "تقييم الطلب",
                            PermissionControllerNameEn = "Order Rate"
                        },
                        new
                        {
                            PermissionControllerID = 54,
                            PermissionControllerGuid = new Guid("a9f6fe7d-f24d-478b-82f1-119191a7f92f"),
                            PermissionControllerNameAr = "اسئلة المنتج للمتجر",
                            PermissionControllerNameEn = "Vendor Product Question"
                        },
                        new
                        {
                            PermissionControllerID = 55,
                            PermissionControllerGuid = new Guid("0b40b2f0-7176-49d9-9d44-15e733f74d3b"),
                            PermissionControllerNameAr = "تقييم الطلب للمتجر",
                            PermissionControllerNameEn = "Vendor Order Rate"
                        },
                        new
                        {
                            PermissionControllerID = 56,
                            PermissionControllerGuid = new Guid("798c4258-8f53-4c35-8d97-c7db21ba4511"),
                            PermissionControllerNameAr = "الطلبات المجدولة للاوبريشن",
                            PermissionControllerNameEn = "Operation Schedule Orders"
                        },
                        new
                        {
                            PermissionControllerID = 57,
                            PermissionControllerGuid = new Guid("cac2616b-658d-4f98-a8a2-6e4d4ad036ec"),
                            PermissionControllerNameAr = "الطلبات المجدولة للمتجر",
                            PermissionControllerNameEn = "Vendor Schedule Orders"
                        },
                        new
                        {
                            PermissionControllerID = 58,
                            PermissionControllerGuid = new Guid("80024f2d-6bc4-4179-9a1b-64b26baa2a1e"),
                            PermissionControllerNameAr = "الرئيسية للاوبريشن",
                            PermissionControllerNameEn = "Operation Dashboard"
                        },
                        new
                        {
                            PermissionControllerID = 59,
                            PermissionControllerGuid = new Guid("2527eede-2a38-43be-a837-21228fec8e1b"),
                            PermissionControllerNameAr = "الرئيسية للمتجر",
                            PermissionControllerNameEn = "Vendor Dashboard"
                        },
                        new
                        {
                            PermissionControllerID = 60,
                            PermissionControllerGuid = new Guid("26888991-1b65-4b51-9e56-08bd348cdc9f"),
                            PermissionControllerNameAr = "استفسارات الكباتن",
                            PermissionControllerNameEn = "Driver Support"
                        },
                        new
                        {
                            PermissionControllerID = 61,
                            PermissionControllerGuid = new Guid("c65f7441-e687-4f80-8084-8ca34c1d7299"),
                            PermissionControllerNameAr = "بريد الاشتراكات",
                            PermissionControllerNameEn = "Subscribes"
                        },
                        new
                        {
                            PermissionControllerID = 62,
                            PermissionControllerGuid = new Guid("b71ac9f4-5bb5-49d2-a2f9-a3e396189e27"),
                            PermissionControllerNameAr = "رصيد العميل",
                            PermissionControllerNameEn = "Customer Balance"
                        });
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Property<int>("PermissionControllerActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionActionID")
                        .HasColumnType("int");

                    b.Property<Guid>("PermissionControllerActionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionControllerID")
                        .HasColumnType("int");

                    b.HasKey("PermissionControllerActionID");

                    b.HasIndex("PermissionActionID");

                    b.HasIndex("PermissionControllerID");

                    b.ToTable("PermissionControllerAction", "Permission");

                    b.HasData(
                        new
                        {
                            PermissionControllerActionID = 1,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("61c9edab-3418-4a21-bd28-8ed6dacb98cf"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 2,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f080990f-15b3-4860-924e-198531a1d431"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 3,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("cfcb4ca9-b6cd-4852-bd32-3b56006a1c52"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 4,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("b107b770-b88d-4ce0-add5-996e90be8b0b"),
                            PermissionControllerID = 1
                        },
                        new
                        {
                            PermissionControllerActionID = 5,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("da3b2fb8-2eef-4560-989b-3d3fcfa06ebd"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 6,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("00317cac-1040-48a7-887f-dace38465cb0"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 7,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("354a801d-91b1-4b26-9d0b-5f8096a0b81d"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 8,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("aeec469a-3401-40f1-85db-c034b460ab68"),
                            PermissionControllerID = 2
                        },
                        new
                        {
                            PermissionControllerActionID = 9,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("12b90569-c1da-4807-bdbe-c8585c0e9fc5"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 10,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c1e56c29-4f43-4a1f-9a92-e1da7963fbae"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 11,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("87bf851c-0886-4bfb-b143-0af7bebaae30"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 12,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("80de0aa3-c817-4068-b3b7-a677b095cd3d"),
                            PermissionControllerID = 3
                        },
                        new
                        {
                            PermissionControllerActionID = 13,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("429fce5b-5752-4002-8470-87511ff5101d"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 14,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("4e76d6dc-0764-417b-85b1-fc0baa0dd004"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 15,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3cc22557-d478-4ed8-998b-f137eafbe2af"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 16,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e98fedd7-33d6-4758-8e3d-a8752b25692e"),
                            PermissionControllerID = 4
                        },
                        new
                        {
                            PermissionControllerActionID = 17,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("aaa5e52d-07d4-4fb0-a6fe-855d9aa1390c"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 18,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("8f3447bd-1c58-4bab-b9a3-f8be0faa5b65"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 19,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a405ed47-2105-4784-bb7f-b1376cb7fbd9"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 20,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2e2acdff-c7be-4bee-ac2c-d085d8fb4fec"),
                            PermissionControllerID = 5
                        },
                        new
                        {
                            PermissionControllerActionID = 21,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("fb026175-b291-457f-afb2-d3fba645456d"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 22,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("eaf6c9a9-069f-466d-8fac-3112bd4b8ac6"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 23,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c5e574ee-7155-480d-ba39-c4049039547e"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 24,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("5b78c618-a4bd-4232-a4e5-c7f284734813"),
                            PermissionControllerID = 6
                        },
                        new
                        {
                            PermissionControllerActionID = 25,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1a2f0a65-22c1-4a46-a351-1b80cfe30242"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 26,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5752f84f-441e-4bc2-8de0-3da4ccaa6018"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 27,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7ae943b7-1386-40d8-9074-f8c0a511e43e"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 28,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6532e41c-6be8-45d2-a54a-a70ef582283b"),
                            PermissionControllerID = 7
                        },
                        new
                        {
                            PermissionControllerActionID = 29,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("118e1cf2-4d00-488f-a36e-78b0f6c7bdd0"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 30,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f72f788d-70c2-4481-b209-d2d03bfe98f0"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 31,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("532587a7-027f-492b-808a-57f9df110680"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 32,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ff9091c2-f825-4e3e-9d1f-f8a9930a2c14"),
                            PermissionControllerID = 8
                        },
                        new
                        {
                            PermissionControllerActionID = 33,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("22739e32-b89a-4a5e-8d3a-661baa465a1e"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 34,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("dee3005e-2f01-46c0-9d1b-e650eb0dba75"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 35,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("ca78722e-3210-4adb-9abe-6e8591404fb2"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 36,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("867e6ee3-ef76-4d7d-a1a3-c145b6891add"),
                            PermissionControllerID = 9
                        },
                        new
                        {
                            PermissionControllerActionID = 37,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ef823e8e-68b1-4fcf-8406-5244e9d547be"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 38,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("abe8ee60-71f8-4230-a7e5-fcab90c077d6"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 39,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7dcc4413-4510-493c-b66e-d4a43fee2a6b"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 40,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("03d2d3c0-7d4c-420d-8169-7cdbbe07180b"),
                            PermissionControllerID = 10
                        },
                        new
                        {
                            PermissionControllerActionID = 41,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2741bd45-fe64-4fff-9d46-ee9dee875e4b"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 42,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("54b829b8-365b-4336-baa2-694d9be52ba3"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 43,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3ae76f55-9bfa-4078-885b-5b2bd5157d8d"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 44,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2755046d-0006-4ff0-9089-abcdb2a017fd"),
                            PermissionControllerID = 11
                        },
                        new
                        {
                            PermissionControllerActionID = 45,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c765fff4-0503-4271-9256-55382a8faea7"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 46,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c75a358b-2029-4ecd-8655-0a163123b95a"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 47,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8752d1a9-675f-480f-9424-cddbe5cc68d6"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 48,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ac2659fa-d79c-4582-b21b-babd3c7db8d9"),
                            PermissionControllerID = 12
                        },
                        new
                        {
                            PermissionControllerActionID = 49,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("cd04926f-32fa-4e43-94ff-41f2a95bd452"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 50,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("70aa831c-9682-443a-98f4-8775643b89da"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 51,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("23f1fce5-91b8-49d1-9a51-d638999373d3"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 52,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("96fe6fdc-7559-483d-b3a6-59417a994c77"),
                            PermissionControllerID = 13
                        },
                        new
                        {
                            PermissionControllerActionID = 53,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1dc16381-7684-4fe5-868e-ce0a00eaa99f"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 54,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("21e96c98-9ce9-47e4-bde5-40eda03913e9"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 55,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("9537232a-0984-4c11-84b6-8199c4cecde6"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 56,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("76e0bc26-6841-4c6d-be3b-ac76542abf27"),
                            PermissionControllerID = 14
                        },
                        new
                        {
                            PermissionControllerActionID = 57,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("fa8129b6-f1dc-4fca-b17e-ceaced326a61"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 58,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("879569e3-8097-40ea-a7b4-be28c1e055ee"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 59,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("94be4350-d4ad-4e35-8f72-24e1090050f2"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 60,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7db6f08f-fd7c-4024-8ea9-a63eea219298"),
                            PermissionControllerID = 15
                        },
                        new
                        {
                            PermissionControllerActionID = 61,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ebf04c79-dbe9-4e95-b4c8-260a12e0ffba"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 62,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("87842007-dd0a-42a7-9ce0-41be1529d45b"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 63,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a302be33-fd10-4b65-b5b2-319c86bb34ac"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 64,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("cd005825-abbc-4306-8585-11cd7f16563a"),
                            PermissionControllerID = 16
                        },
                        new
                        {
                            PermissionControllerActionID = 65,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("7edac97e-fb6b-4fe0-bc92-676fda8517ed"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 66,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("352c2881-9b80-405c-bbb2-0a7f90e49c8f"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 67,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("caa53037-2182-44d1-8ca3-d0e2d9eacbef"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 68,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("cfbc1f48-f989-4ef3-849f-a1dc14b91f56"),
                            PermissionControllerID = 17
                        },
                        new
                        {
                            PermissionControllerActionID = 69,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("7ecd9194-e493-4e7d-be95-a2058feec99c"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 70,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d3f4b23f-ef71-4497-8cd6-7a73dfe40755"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 71,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("644b8e71-cf40-49be-9d57-aaaaf6c6da9f"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 72,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("9c0cce76-6d7f-4697-9488-b15be88cb55e"),
                            PermissionControllerID = 18
                        },
                        new
                        {
                            PermissionControllerActionID = 73,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("76e13f2e-346b-4860-bfd1-d4d50d5090c5"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 74,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5787c05e-122a-40aa-bac8-54d2b392a6b0"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 75,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("da3785fe-4a2b-46e8-b2ab-ce7ca7ca5b76"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 76,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("572e9241-020f-4d16-a0cc-110d7af55d0b"),
                            PermissionControllerID = 19
                        },
                        new
                        {
                            PermissionControllerActionID = 77,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("aeb8e00e-6f80-41fb-bc4f-ce1bbd12fc43"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 78,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0453ba98-07d1-4f3f-b111-5a300b772191"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 79,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d89c20d6-fb52-4201-bf1f-168cbb803851"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 80,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("42a99f09-7d53-4e97-a223-a49cd6c8916e"),
                            PermissionControllerID = 20
                        },
                        new
                        {
                            PermissionControllerActionID = 81,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("34486d1b-57c4-471c-b4ef-30ec9d3730cb"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 82,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0ab410cd-d529-4723-a421-9335d133103d"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 83,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7cc51081-b57e-4d5e-89c0-5a93e04485da"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 84,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("fe64e741-462d-4238-8e1a-38ffca4d5385"),
                            PermissionControllerID = 21
                        },
                        new
                        {
                            PermissionControllerActionID = 85,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ef34855f-99b1-4f67-8e8c-2b9557ef99f1"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 86,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("ecf43e0a-c780-48dd-893a-8e0a1f54c954"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 87,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("dac8fc2f-4bfa-4523-ac69-cabb958228fa"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 88,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("288de8c7-5ca6-4c9d-9755-5c7dc8998005"),
                            PermissionControllerID = 22
                        },
                        new
                        {
                            PermissionControllerActionID = 89,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9182f513-fe3f-40d0-aa78-81287c146e75"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 90,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d6d132c7-a2d0-437b-96cf-73d1611c7f33"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 91,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("476a69ac-64e2-4d3c-82a3-1c9bf8f66406"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 92,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("b63108c9-01bf-4c4e-b293-4a709b405169"),
                            PermissionControllerID = 23
                        },
                        new
                        {
                            PermissionControllerActionID = 93,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5c9092c9-17fb-4478-8f89-13b865c90eaf"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 94,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5797cf38-b9d9-4f49-8475-03831209f1d8"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 95,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c5a777fc-bd54-4d22-ad05-dfa204824dd7"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 96,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("6d88053c-485f-4832-af74-7b3eaad41b95"),
                            PermissionControllerID = 24
                        },
                        new
                        {
                            PermissionControllerActionID = 97,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("33ae7722-06eb-4b11-a992-14e9641159de"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 98,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("2162b0ba-8f03-4486-81a7-8e06a11100bb"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 99,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("22ff97a0-094c-4213-8edb-548bcfbeb870"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 100,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("40428c2e-e51b-4926-b417-8526fd749f86"),
                            PermissionControllerID = 25
                        },
                        new
                        {
                            PermissionControllerActionID = 101,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b929c996-8e19-4875-a2b3-c41b2850c403"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 102,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("b898bd84-55b2-4b64-b1a8-c9a242cb88d2"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 103,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("637cbfe9-034d-41ad-854b-b342ce8790fe"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 104,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("b14413f6-3d94-44b8-8012-55506aff9f87"),
                            PermissionControllerID = 26
                        },
                        new
                        {
                            PermissionControllerActionID = 105,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("88ff3666-e0fb-4843-a78d-951618e0fffa"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 106,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c3c2e2f4-7d81-4d65-8d07-c61040244b4c"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 107,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("6bc7d22e-aef0-4dbb-8e72-4f15d7bc45ef"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 108,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("139999f5-1b34-4b5f-8aee-71228adf0f0c"),
                            PermissionControllerID = 27
                        },
                        new
                        {
                            PermissionControllerActionID = 109,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d09c89a9-c11b-46e1-955b-4f59469a10c6"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 110,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("beb6b834-4bf2-4eb4-945c-071ffc5917d7"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 111,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d17584eb-2bb0-40ee-a7cd-ce5efb155d85"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 112,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4dd60f6d-a195-42ec-b0d3-f4c590762926"),
                            PermissionControllerID = 28
                        },
                        new
                        {
                            PermissionControllerActionID = 113,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("5907f0e8-e757-4253-af8f-107b3aebf109"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 114,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a239d1cb-970e-4208-ad3b-265299405771"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 115,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("cc875fd4-0467-4b68-9145-29f633b296c1"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 116,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("cc9d97fd-1651-44e0-a28c-b8c31ab44db5"),
                            PermissionControllerID = 29
                        },
                        new
                        {
                            PermissionControllerActionID = 117,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d9f693c3-b751-4ed1-a6e2-6c1e1ca51660"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 118,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5039e5d5-6a3d-4199-b98c-d063c9879854"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 119,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("40b05b82-caba-46e2-8dca-520b509c669e"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 120,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("709f1764-8545-4768-8b26-a30de600ace3"),
                            PermissionControllerID = 30
                        },
                        new
                        {
                            PermissionControllerActionID = 121,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8bdf2958-e1a5-4e2f-b8ef-8f74514f7aad"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 122,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("50d23fde-23f2-4e9a-b4be-41b7643b5b6e"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 123,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("4528d1ef-7da3-4255-bbc6-da29080d793e"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 124,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("10f629e9-8ce9-49a3-a182-0c1d5a58f208"),
                            PermissionControllerID = 31
                        },
                        new
                        {
                            PermissionControllerActionID = 125,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e48a68e1-8dbd-48f0-b112-7ebfbbbf54fb"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 126,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3fa7a4e1-a909-4b30-97e0-e965761da6cd"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 127,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c870faa9-2724-4121-bee8-2137472abcb8"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 128,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7bb2ddd2-4973-4d19-b85e-f40c27f10864"),
                            PermissionControllerID = 32
                        },
                        new
                        {
                            PermissionControllerActionID = 129,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("84d0879e-f925-4fc5-bf6c-d0626076adf5"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 130,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("63b98bbd-b03d-45e3-a85e-ea8c08234b8a"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 131,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("26efd49e-ae8f-4501-8e0e-0e5b72f9f696"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 132,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4fe5d9ba-6f03-43e6-b4ef-055941934291"),
                            PermissionControllerID = 33
                        },
                        new
                        {
                            PermissionControllerActionID = 133,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("ae02df0e-a228-452b-9a7b-7fe273ec4f88"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 134,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("70bcb84f-89dd-4a39-92af-72978a3c5933"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 135,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("e88b878d-2d25-4b7d-92c5-2dea059a2ea9"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 136,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("3bf3b92b-46b6-4adb-9a1f-7516302d6c62"),
                            PermissionControllerID = 34
                        },
                        new
                        {
                            PermissionControllerActionID = 137,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("248ae394-c041-4c67-ab83-c08761e11384"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 138,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("6d7bf27c-0e73-49ea-9d74-85a31c28d5be"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 139,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("75f29bb0-dcbe-4096-86d4-b3ae8ed8b6c7"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 140,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("11312caa-5908-4fff-b606-588367dcfd67"),
                            PermissionControllerID = 35
                        },
                        new
                        {
                            PermissionControllerActionID = 141,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e5c271e8-7b56-4b8b-9145-a783fe86017b"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 142,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("65b8508b-f742-4d04-b2ae-aae81455e664"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 143,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("75f83ec2-91bb-44be-8789-bdc98137cd58"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 144,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("38742a46-cf3d-48fc-9ffb-4e850aad0e1d"),
                            PermissionControllerID = 36
                        },
                        new
                        {
                            PermissionControllerActionID = 145,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("3214bfb5-3e67-4b07-8ddd-33c1539954d6"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 146,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("37dc1025-6f03-4edd-8487-15e318659f62"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 147,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a34dd6ba-a832-469e-8e89-86f452cbe98a"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 148,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8eecbd79-c568-4cc2-902f-7a742ad265ad"),
                            PermissionControllerID = 37
                        },
                        new
                        {
                            PermissionControllerActionID = 149,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("53f98fca-d1b8-4603-a47a-2b4d619d20d5"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 150,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("5378acd6-bd8a-4e87-ab00-37ec70b4d675"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 151,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("fa2dada5-70e7-41da-8202-d4e8512f79df"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 152,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("bb68204a-a531-453f-8706-9f029a43ac3e"),
                            PermissionControllerID = 38
                        },
                        new
                        {
                            PermissionControllerActionID = 153,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9292abd3-15c9-4903-ad7f-e40c952d87c3"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 154,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("bca83f63-3b15-4534-942d-331d85cad1d4"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 155,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("9dc66039-8e60-4b68-a040-440a3f55a163"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 156,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("2db37f47-8a7b-4f35-ad73-62c5c4dfe74f"),
                            PermissionControllerID = 39
                        },
                        new
                        {
                            PermissionControllerActionID = 157,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8a6abbef-6251-42c8-a81b-b0005a9c5d6f"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 158,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("3442bb95-cc05-48e9-a3c9-b1298c506821"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 159,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d3547419-d416-4bad-b15a-a7af2c056626"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 160,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("490f7a50-699e-4b8f-bc9c-244f9c7e272f"),
                            PermissionControllerID = 40
                        },
                        new
                        {
                            PermissionControllerActionID = 161,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("46c613e0-9a99-46a5-9fd5-8331ba3b97fa"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 162,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("6d1dcf3f-f726-4097-aefb-218a030da9be"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 163,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("35edaf98-a44d-4f15-8501-c7ccb432d30c"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 164,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("c0040035-0121-4f10-a6dc-508ac91d6d8a"),
                            PermissionControllerID = 41
                        },
                        new
                        {
                            PermissionControllerActionID = 165,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("e3fa53bd-aed3-469e-bb8b-dcc235561c6a"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 166,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("01bc3f0e-05c3-49d2-b4b9-886650a0cdba"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 167,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("98e6a68e-86a9-464f-85eb-1b3c8faa9a94"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 168,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("57525038-50e5-40a5-99a1-13e1bb6ba478"),
                            PermissionControllerID = 42
                        },
                        new
                        {
                            PermissionControllerActionID = 169,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c91c7ec5-bb9a-43a5-9224-af442effcd95"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 170,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f6f069da-cf79-4d85-8abc-1f16116b1ba7"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 171,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("8a54f5a9-8f70-4744-863a-6719d3c091f9"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 172,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("e1a7d313-3edc-4e2e-b5f8-d30637b5dfa3"),
                            PermissionControllerID = 43
                        },
                        new
                        {
                            PermissionControllerActionID = 173,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("7bc38dfa-59f4-4f65-8830-0630d275fd8c"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 174,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("436c172e-68ca-443a-bce8-ee4dca04ca6b"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 175,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("36f46c6f-9a02-4661-ae0d-8bf0701315cf"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 176,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ec95020e-5c05-45c8-9d6a-17de8d09705d"),
                            PermissionControllerID = 44
                        },
                        new
                        {
                            PermissionControllerActionID = 177,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("8ce83a69-fd31-4c15-ad06-5ff7bab38698"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 178,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("de3e05e9-aa14-4f4a-9d2e-abf14964a04f"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 179,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("e46cf16f-961b-4468-947c-dbf810d73d4c"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 180,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("144087e9-3ab2-48ba-b314-b1311afd60dd"),
                            PermissionControllerID = 45
                        },
                        new
                        {
                            PermissionControllerActionID = 181,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("4ce49eeb-f91e-4dd1-a774-58c488b514b9"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 182,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("b2e6aab7-a9a5-4552-8e63-b38ff5d7cce2"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 183,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("99562b4f-a010-48b2-a328-bbab5905fef6"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 184,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d8fb3f36-36ad-4453-a02d-564e4e555f42"),
                            PermissionControllerID = 46
                        },
                        new
                        {
                            PermissionControllerActionID = 185,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("b5a68edb-e343-4e3d-8beb-b52552989159"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 186,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("fb1c6580-ae18-474e-9ddf-daf4b751ab7d"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 187,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a360ef1e-e6fe-466a-8341-7748b24fb85a"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 188,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("0f5750bb-6480-41f6-bdbe-d40106e36f79"),
                            PermissionControllerID = 47
                        },
                        new
                        {
                            PermissionControllerActionID = 189,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("57f65121-e459-4e54-b680-54627a9f2337"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 190,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("681e6a35-1431-453f-b30e-3d7e1076073b"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 191,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("9f14f98f-ecba-46a2-a7ba-6ceaea3c92a4"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 192,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4eb31f20-3165-4641-b372-db61314511b5"),
                            PermissionControllerID = 48
                        },
                        new
                        {
                            PermissionControllerActionID = 193,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("63ea3b22-8d39-4798-9335-a0c4d6bf8e48"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 194,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d58cb955-282d-4671-80ef-d39b9f215b3f"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 195,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("a7e42e65-a758-42e6-b1d2-df5755a6e48b"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 196,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("7becac36-9263-4822-9579-1068a9b7f419"),
                            PermissionControllerID = 49
                        },
                        new
                        {
                            PermissionControllerActionID = 197,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9cdf361c-0351-4ed2-93ce-3f15804b2f61"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 198,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("0bbe955a-c17b-44c0-9878-c1e47882ba43"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 199,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3d13da1a-4112-478a-ae4c-e71ea11ab7a5"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 200,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("1fdf7a79-2a22-434b-bea6-a7caa0c672d7"),
                            PermissionControllerID = 50
                        },
                        new
                        {
                            PermissionControllerActionID = 201,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("be8abc5f-4d16-4502-8e00-7d6ae53752fe"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 202,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f03b0204-0ece-4648-953e-c0562239fe13"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 203,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("d791489b-4163-4d44-92b3-8fee187189b2"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 204,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("ae7233ce-33ab-4905-860e-c79925276499"),
                            PermissionControllerID = 51
                        },
                        new
                        {
                            PermissionControllerActionID = 205,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("2dbfc3b5-bf3a-4df0-8358-71a6a713a12f"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 206,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("39392a52-5d66-4770-ac78-e71b848f299f"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 207,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("26fb58c4-736c-40b8-9169-8f3640de69b4"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 208,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d7df9252-d95e-4dd0-9474-9d6a0b310950"),
                            PermissionControllerID = 52
                        },
                        new
                        {
                            PermissionControllerActionID = 209,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("9367cbf2-ee75-4a72-9bce-cf5a4aefbb0f"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 210,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("d25971e3-493e-4648-bd22-79f77e82c02d"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 211,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("33ad69a3-32f8-462f-b80e-43e684a6cb06"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 212,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("fd9a0230-f773-48bf-8031-2c1386787a59"),
                            PermissionControllerID = 53
                        },
                        new
                        {
                            PermissionControllerActionID = 213,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("1c1c3ee6-d427-4649-8a49-7efa550da714"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 214,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("20a116e9-4e61-4a9a-83f4-8124ef643682"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 215,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3f9eec41-0f6f-4cfe-98fb-c304821782c1"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 216,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("4eb68552-56aa-4b2e-89bc-bdb63c0fa861"),
                            PermissionControllerID = 54
                        },
                        new
                        {
                            PermissionControllerActionID = 217,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("f796b41b-651b-4042-b3be-f380a9feaa48"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 218,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("923b4383-d19a-4f2f-b865-2131bc2ea45b"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 219,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("02ad129c-6aa1-443d-a40a-82ebe1183510"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 220,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("d1705fca-71ae-42b6-919c-8761bec647e7"),
                            PermissionControllerID = 55
                        },
                        new
                        {
                            PermissionControllerActionID = 221,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("7efb7359-ac33-4b2c-901c-efa524078328"),
                            PermissionControllerID = 56
                        },
                        new
                        {
                            PermissionControllerActionID = 222,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("31f697b3-56db-4250-a131-3fd31f87f97e"),
                            PermissionControllerID = 56
                        },
                        new
                        {
                            PermissionControllerActionID = 223,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("2b2e454d-63b4-49e5-9c2f-a928b786a48c"),
                            PermissionControllerID = 56
                        },
                        new
                        {
                            PermissionControllerActionID = 224,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("0152949b-2510-4e4f-aad4-46e83f2a76e4"),
                            PermissionControllerID = 56
                        },
                        new
                        {
                            PermissionControllerActionID = 225,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("3b0de514-5520-475b-8b11-43c47f2d3515"),
                            PermissionControllerID = 57
                        },
                        new
                        {
                            PermissionControllerActionID = 226,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("f1763a5b-8388-474b-bfca-6e21ab2f7e80"),
                            PermissionControllerID = 57
                        },
                        new
                        {
                            PermissionControllerActionID = 227,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c8c542fb-6880-4b3c-99fa-3d313e889157"),
                            PermissionControllerID = 57
                        },
                        new
                        {
                            PermissionControllerActionID = 228,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("deb6a898-480e-434e-ac12-7ec4be85279a"),
                            PermissionControllerID = 57
                        },
                        new
                        {
                            PermissionControllerActionID = 229,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("383b97da-56dd-4c2c-847f-9fda26ad2fd2"),
                            PermissionControllerID = 58
                        },
                        new
                        {
                            PermissionControllerActionID = 230,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("a9406367-00ce-4cd9-ae81-c5a410bf9fbc"),
                            PermissionControllerID = 58
                        },
                        new
                        {
                            PermissionControllerActionID = 231,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("bec283fb-365e-46b2-bc62-f9eea1cfec9f"),
                            PermissionControllerID = 58
                        },
                        new
                        {
                            PermissionControllerActionID = 232,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("b96c7650-9fc6-4d1a-bace-bb841bc7284a"),
                            PermissionControllerID = 58
                        },
                        new
                        {
                            PermissionControllerActionID = 233,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("a54c1006-7e4a-456c-90ae-10c19646c843"),
                            PermissionControllerID = 59
                        },
                        new
                        {
                            PermissionControllerActionID = 234,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("66e13a8d-a1e0-4610-9d7b-5d400c48a244"),
                            PermissionControllerID = 59
                        },
                        new
                        {
                            PermissionControllerActionID = 235,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("7d83ab45-9ea5-4b93-8010-3ed248425e5d"),
                            PermissionControllerID = 59
                        },
                        new
                        {
                            PermissionControllerActionID = 236,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("20add6ef-f629-4255-b20d-73edff6446d0"),
                            PermissionControllerID = 59
                        },
                        new
                        {
                            PermissionControllerActionID = 237,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("c6c9cd2f-bef9-44ad-abcd-69f6a84b4cb7"),
                            PermissionControllerID = 60
                        },
                        new
                        {
                            PermissionControllerActionID = 238,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("eec610d6-4c2d-4f56-b1b4-68bbf8ca66a4"),
                            PermissionControllerID = 60
                        },
                        new
                        {
                            PermissionControllerActionID = 239,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("37e16115-ce9a-4485-b891-c49ebf8c3be0"),
                            PermissionControllerID = 60
                        },
                        new
                        {
                            PermissionControllerActionID = 240,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("8316448b-85fb-4a59-ace3-0a0c2bb0daea"),
                            PermissionControllerID = 60
                        },
                        new
                        {
                            PermissionControllerActionID = 241,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("50ac7ea1-4a40-4b05-a6d8-fc219021cdb5"),
                            PermissionControllerID = 61
                        },
                        new
                        {
                            PermissionControllerActionID = 242,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("c6071920-a536-40b7-bf33-38d78d0b1d91"),
                            PermissionControllerID = 61
                        },
                        new
                        {
                            PermissionControllerActionID = 243,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("c31eea74-65c3-4752-a25c-aece2d00e31f"),
                            PermissionControllerID = 61
                        },
                        new
                        {
                            PermissionControllerActionID = 244,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("dcd6efce-0687-408f-86b6-aacdc67aaf52"),
                            PermissionControllerID = 61
                        },
                        new
                        {
                            PermissionControllerActionID = 245,
                            PermissionActionID = 1,
                            PermissionControllerActionGuid = new Guid("d823a609-7695-4692-b4ac-fd99cd6bd2b1"),
                            PermissionControllerID = 62
                        },
                        new
                        {
                            PermissionControllerActionID = 246,
                            PermissionActionID = 2,
                            PermissionControllerActionGuid = new Guid("cdf52b25-ae63-44a3-bf4d-acc56b95f35a"),
                            PermissionControllerID = 62
                        },
                        new
                        {
                            PermissionControllerActionID = 247,
                            PermissionActionID = 3,
                            PermissionControllerActionGuid = new Guid("3a6b8f7d-e474-4ec8-afe8-f7523b0d2f42"),
                            PermissionControllerID = 62
                        },
                        new
                        {
                            PermissionControllerActionID = 248,
                            PermissionActionID = 4,
                            PermissionControllerActionGuid = new Guid("05577d31-9ce4-42c4-b2c4-8faa38d89e45"),
                            PermissionControllerID = 62
                        });
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.Property<int>("RoleConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleConfigID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleConfig", "Permission");

                    b.HasData(
                        new
                        {
                            RoleConfigID = 1,
                            PermissionControllerActionID = 1,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 2,
                            PermissionControllerActionID = 2,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 3,
                            PermissionControllerActionID = 3,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 4,
                            PermissionControllerActionID = 4,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 5,
                            PermissionControllerActionID = 5,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 6,
                            PermissionControllerActionID = 6,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 7,
                            PermissionControllerActionID = 7,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 8,
                            PermissionControllerActionID = 8,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 9,
                            PermissionControllerActionID = 9,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 10,
                            PermissionControllerActionID = 10,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 11,
                            PermissionControllerActionID = 11,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 12,
                            PermissionControllerActionID = 12,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 13,
                            PermissionControllerActionID = 13,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 14,
                            PermissionControllerActionID = 14,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 15,
                            PermissionControllerActionID = 15,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 16,
                            PermissionControllerActionID = 16,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 17,
                            PermissionControllerActionID = 17,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 18,
                            PermissionControllerActionID = 18,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 19,
                            PermissionControllerActionID = 19,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 20,
                            PermissionControllerActionID = 20,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 21,
                            PermissionControllerActionID = 21,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 22,
                            PermissionControllerActionID = 22,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 23,
                            PermissionControllerActionID = 23,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 24,
                            PermissionControllerActionID = 24,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 25,
                            PermissionControllerActionID = 25,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 26,
                            PermissionControllerActionID = 26,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 27,
                            PermissionControllerActionID = 27,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 28,
                            PermissionControllerActionID = 28,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 29,
                            PermissionControllerActionID = 29,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 30,
                            PermissionControllerActionID = 30,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 31,
                            PermissionControllerActionID = 31,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 32,
                            PermissionControllerActionID = 32,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 33,
                            PermissionControllerActionID = 33,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 34,
                            PermissionControllerActionID = 34,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 35,
                            PermissionControllerActionID = 35,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 36,
                            PermissionControllerActionID = 36,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 37,
                            PermissionControllerActionID = 37,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 38,
                            PermissionControllerActionID = 38,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 39,
                            PermissionControllerActionID = 39,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 40,
                            PermissionControllerActionID = 40,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 41,
                            PermissionControllerActionID = 41,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 42,
                            PermissionControllerActionID = 42,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 43,
                            PermissionControllerActionID = 43,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 44,
                            PermissionControllerActionID = 44,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 45,
                            PermissionControllerActionID = 45,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 46,
                            PermissionControllerActionID = 46,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 47,
                            PermissionControllerActionID = 47,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 48,
                            PermissionControllerActionID = 48,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 49,
                            PermissionControllerActionID = 49,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 50,
                            PermissionControllerActionID = 50,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 51,
                            PermissionControllerActionID = 51,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 52,
                            PermissionControllerActionID = 52,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 53,
                            PermissionControllerActionID = 53,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 54,
                            PermissionControllerActionID = 54,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 55,
                            PermissionControllerActionID = 55,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 56,
                            PermissionControllerActionID = 56,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 57,
                            PermissionControllerActionID = 57,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 58,
                            PermissionControllerActionID = 58,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 59,
                            PermissionControllerActionID = 59,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 60,
                            PermissionControllerActionID = 60,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 61,
                            PermissionControllerActionID = 61,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 62,
                            PermissionControllerActionID = 62,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 63,
                            PermissionControllerActionID = 63,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 64,
                            PermissionControllerActionID = 64,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 65,
                            PermissionControllerActionID = 65,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 66,
                            PermissionControllerActionID = 66,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 67,
                            PermissionControllerActionID = 67,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 68,
                            PermissionControllerActionID = 68,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 69,
                            PermissionControllerActionID = 69,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 70,
                            PermissionControllerActionID = 70,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 71,
                            PermissionControllerActionID = 71,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 72,
                            PermissionControllerActionID = 72,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 73,
                            PermissionControllerActionID = 73,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 74,
                            PermissionControllerActionID = 74,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 75,
                            PermissionControllerActionID = 75,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 76,
                            PermissionControllerActionID = 76,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 77,
                            PermissionControllerActionID = 77,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 78,
                            PermissionControllerActionID = 78,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 79,
                            PermissionControllerActionID = 79,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 80,
                            PermissionControllerActionID = 80,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 81,
                            PermissionControllerActionID = 81,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 82,
                            PermissionControllerActionID = 82,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 83,
                            PermissionControllerActionID = 83,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 84,
                            PermissionControllerActionID = 84,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 85,
                            PermissionControllerActionID = 85,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 86,
                            PermissionControllerActionID = 86,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 87,
                            PermissionControllerActionID = 87,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 88,
                            PermissionControllerActionID = 88,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 89,
                            PermissionControllerActionID = 89,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 90,
                            PermissionControllerActionID = 90,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 91,
                            PermissionControllerActionID = 91,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 92,
                            PermissionControllerActionID = 92,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 93,
                            PermissionControllerActionID = 93,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 94,
                            PermissionControllerActionID = 94,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 95,
                            PermissionControllerActionID = 95,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 96,
                            PermissionControllerActionID = 96,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 97,
                            PermissionControllerActionID = 97,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 98,
                            PermissionControllerActionID = 98,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 99,
                            PermissionControllerActionID = 99,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 100,
                            PermissionControllerActionID = 100,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 101,
                            PermissionControllerActionID = 101,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 102,
                            PermissionControllerActionID = 102,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 103,
                            PermissionControllerActionID = 103,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 104,
                            PermissionControllerActionID = 104,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 109,
                            PermissionControllerActionID = 109,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 110,
                            PermissionControllerActionID = 110,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 111,
                            PermissionControllerActionID = 111,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 112,
                            PermissionControllerActionID = 112,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 113,
                            PermissionControllerActionID = 113,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 114,
                            PermissionControllerActionID = 114,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 115,
                            PermissionControllerActionID = 115,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 116,
                            PermissionControllerActionID = 116,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 117,
                            PermissionControllerActionID = 117,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 118,
                            PermissionControllerActionID = 118,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 119,
                            PermissionControllerActionID = 119,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 120,
                            PermissionControllerActionID = 120,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 121,
                            PermissionControllerActionID = 121,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 122,
                            PermissionControllerActionID = 122,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 123,
                            PermissionControllerActionID = 123,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 124,
                            PermissionControllerActionID = 124,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 129,
                            PermissionControllerActionID = 129,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 130,
                            PermissionControllerActionID = 130,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 131,
                            PermissionControllerActionID = 131,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 132,
                            PermissionControllerActionID = 132,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 133,
                            PermissionControllerActionID = 133,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 134,
                            PermissionControllerActionID = 134,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 135,
                            PermissionControllerActionID = 135,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 136,
                            PermissionControllerActionID = 136,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 137,
                            PermissionControllerActionID = 137,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 138,
                            PermissionControllerActionID = 138,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 139,
                            PermissionControllerActionID = 139,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 140,
                            PermissionControllerActionID = 140,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 141,
                            PermissionControllerActionID = 141,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 142,
                            PermissionControllerActionID = 142,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 143,
                            PermissionControllerActionID = 143,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 144,
                            PermissionControllerActionID = 144,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 145,
                            PermissionControllerActionID = 145,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 146,
                            PermissionControllerActionID = 146,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 147,
                            PermissionControllerActionID = 147,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 148,
                            PermissionControllerActionID = 148,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 149,
                            PermissionControllerActionID = 149,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 150,
                            PermissionControllerActionID = 150,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 151,
                            PermissionControllerActionID = 151,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 152,
                            PermissionControllerActionID = 152,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 153,
                            PermissionControllerActionID = 153,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 154,
                            PermissionControllerActionID = 154,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 155,
                            PermissionControllerActionID = 155,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 156,
                            PermissionControllerActionID = 156,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 157,
                            PermissionControllerActionID = 157,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 158,
                            PermissionControllerActionID = 158,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 159,
                            PermissionControllerActionID = 159,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 160,
                            PermissionControllerActionID = 160,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 161,
                            PermissionControllerActionID = 161,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 162,
                            PermissionControllerActionID = 162,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 163,
                            PermissionControllerActionID = 163,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 164,
                            PermissionControllerActionID = 164,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 169,
                            PermissionControllerActionID = 169,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 170,
                            PermissionControllerActionID = 170,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 171,
                            PermissionControllerActionID = 171,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 172,
                            PermissionControllerActionID = 172,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 173,
                            PermissionControllerActionID = 173,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 174,
                            PermissionControllerActionID = 174,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 175,
                            PermissionControllerActionID = 175,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 176,
                            PermissionControllerActionID = 176,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 178,
                            PermissionControllerActionID = 178,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 179,
                            PermissionControllerActionID = 179,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 180,
                            PermissionControllerActionID = 180,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 181,
                            PermissionControllerActionID = 181,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 182,
                            PermissionControllerActionID = 182,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 183,
                            PermissionControllerActionID = 183,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 184,
                            PermissionControllerActionID = 184,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 185,
                            PermissionControllerActionID = 185,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 186,
                            PermissionControllerActionID = 186,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 187,
                            PermissionControllerActionID = 187,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 188,
                            PermissionControllerActionID = 188,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 189,
                            PermissionControllerActionID = 189,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 190,
                            PermissionControllerActionID = 190,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 191,
                            PermissionControllerActionID = 191,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 192,
                            PermissionControllerActionID = 192,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 205,
                            PermissionControllerActionID = 205,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 206,
                            PermissionControllerActionID = 206,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 207,
                            PermissionControllerActionID = 207,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 208,
                            PermissionControllerActionID = 208,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 209,
                            PermissionControllerActionID = 209,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 210,
                            PermissionControllerActionID = 210,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 211,
                            PermissionControllerActionID = 211,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 212,
                            PermissionControllerActionID = 212,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 221,
                            PermissionControllerActionID = 221,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 222,
                            PermissionControllerActionID = 222,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 223,
                            PermissionControllerActionID = 223,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 224,
                            PermissionControllerActionID = 224,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 229,
                            PermissionControllerActionID = 229,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 230,
                            PermissionControllerActionID = 230,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 231,
                            PermissionControllerActionID = 231,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 232,
                            PermissionControllerActionID = 232,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 237,
                            PermissionControllerActionID = 237,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 238,
                            PermissionControllerActionID = 238,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 239,
                            PermissionControllerActionID = 239,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 240,
                            PermissionControllerActionID = 240,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 241,
                            PermissionControllerActionID = 241,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 242,
                            PermissionControllerActionID = 242,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 243,
                            PermissionControllerActionID = 243,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 244,
                            PermissionControllerActionID = 244,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 245,
                            PermissionControllerActionID = 245,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 246,
                            PermissionControllerActionID = 246,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 247,
                            PermissionControllerActionID = 247,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 248,
                            PermissionControllerActionID = 248,
                            RoleId = 1
                        },
                        new
                        {
                            RoleConfigID = 105,
                            PermissionControllerActionID = 105,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 106,
                            PermissionControllerActionID = 106,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 107,
                            PermissionControllerActionID = 107,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 108,
                            PermissionControllerActionID = 108,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 125,
                            PermissionControllerActionID = 125,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 126,
                            PermissionControllerActionID = 126,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 127,
                            PermissionControllerActionID = 127,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 128,
                            PermissionControllerActionID = 128,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 165,
                            PermissionControllerActionID = 165,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 166,
                            PermissionControllerActionID = 166,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 167,
                            PermissionControllerActionID = 167,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 168,
                            PermissionControllerActionID = 168,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 193,
                            PermissionControllerActionID = 193,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 194,
                            PermissionControllerActionID = 194,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 195,
                            PermissionControllerActionID = 195,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 196,
                            PermissionControllerActionID = 196,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 197,
                            PermissionControllerActionID = 197,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 198,
                            PermissionControllerActionID = 198,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 199,
                            PermissionControllerActionID = 199,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 200,
                            PermissionControllerActionID = 200,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 201,
                            PermissionControllerActionID = 201,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 202,
                            PermissionControllerActionID = 202,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 203,
                            PermissionControllerActionID = 203,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 204,
                            PermissionControllerActionID = 204,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 213,
                            PermissionControllerActionID = 213,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 214,
                            PermissionControllerActionID = 214,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 215,
                            PermissionControllerActionID = 215,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 216,
                            PermissionControllerActionID = 216,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 217,
                            PermissionControllerActionID = 217,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 218,
                            PermissionControllerActionID = 218,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 219,
                            PermissionControllerActionID = 219,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 220,
                            PermissionControllerActionID = 220,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 225,
                            PermissionControllerActionID = 225,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 226,
                            PermissionControllerActionID = 226,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 227,
                            PermissionControllerActionID = 227,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 228,
                            PermissionControllerActionID = 228,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 233,
                            PermissionControllerActionID = 233,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 234,
                            PermissionControllerActionID = 234,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 235,
                            PermissionControllerActionID = 235,
                            RoleId = 2
                        },
                        new
                        {
                            RoleConfigID = 236,
                            PermissionControllerActionID = 236,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("UserId");

                    b.ToTable("Activity", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Property<int>("AddressTypesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AddressTypesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("AddressTypesID");

                    b.HasIndex("UserId");

                    b.ToTable("AddressTypes", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Property<int>("BanksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BankGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("Banks", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Property<int>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BlockGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Block", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.Property<int>("BranchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BranchesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("BranchesID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("Branches", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CaptainZone", b =>
                {
                    b.Property<int>("CaptainZoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<Guid>("CaptainZoneGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriversID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CaptainZoneID");

                    b.HasIndex("BlockID");

                    b.HasIndex("DriversID");

                    b.HasIndex("UserId");

                    b.ToTable("CaptainZone", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CitiesCovered", b =>
                {
                    b.Property<int>("CitiesCoveredID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CitiesCoveredGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CitiesCoveredID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("CitiesCovered", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.HasIndex("RegionID");

                    b.HasIndex("UserId");

                    b.ToTable("City", "Setting");

                    b.HasData(
                        new
                        {
                            CityID = 1,
                            CityGuid = new Guid("99f23994-a101-46ab-90bc-e650cf24993d"),
                            CreateDate = new DateTime(2022, 6, 22, 14, 26, 43, 946, DateTimeKind.Local).AddTicks(4313),
                            EnableDate = new DateTime(2022, 6, 22, 14, 26, 43, 946, DateTimeKind.Local).AddTicks(5760),
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            Place = "",
                            RegionID = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.CompanyWorkingHours", b =>
                {
                    b.Property<int>("CompanyWorkingHoursID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CompanyWorkingHoursGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaysVac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstShiftVacWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstShiftVacWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstShiftWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstShiftWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SecondShiftVacWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondShiftVacWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondShiftWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecondShiftWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("CompanyWorkingHoursID");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyWorkingHours", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.Property<int>("ConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryPriceVatPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryPriceWithoutVat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCloseCompletePurchase")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmsSend")
                        .HasColumnType("bit");

                    b.Property<decimal>("LastSmsBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxDeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinDeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverKmFare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapchatLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsappLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationID");

                    b.HasIndex("UserId");

                    b.ToTable("Configuration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CountryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Country", "Setting");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            CountryGuid = new Guid("683c9a47-e86b-4991-b098-3923dc6895ab"),
                            CreateDate = new DateTime(2022, 6, 22, 14, 26, 43, 935, DateTimeKind.Local).AddTicks(7621),
                            EnableDate = new DateTime(2022, 6, 22, 14, 26, 43, 943, DateTimeKind.Local).AddTicks(262),
                            Extension = "00966",
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "السعودية",
                            NameEN = "SA",
                            Place = "",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Property<int>("DepartmentsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Isunique")
                        .HasColumnType("bit");

                    b.Property<int>("MainCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("SiteImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsID");

                    b.HasIndex("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Departments", "Setting");

                    b.HasData(
                        new
                        {
                            DepartmentsID = 1,
                            CreateDate = new DateTime(2022, 6, 22, 14, 26, 43, 956, DateTimeKind.Local).AddTicks(104),
                            DepartmentsGuid = new Guid("24d9dd91-2610-4b98-8eff-471e6a889281"),
                            EnableDate = new DateTime(2022, 6, 22, 14, 26, 43, 956, DateTimeKind.Local).AddTicks(1308),
                            IsDeleted = false,
                            IsEnable = true,
                            Isunique = false,
                            MainCategoryID = 1,
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiscountGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DiscountTypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("DiscountID");

                    b.HasIndex("UserId");

                    b.ToTable("Discount", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.Property<int>("HelpQuestionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HelpQuestionsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HelpUserType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForOrder")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("HelpQuestionsID");

                    b.HasIndex("UserId");

                    b.ToTable("HelpQuestions", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Inqueries", b =>
                {
                    b.Property<int>("InqueriesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InqueriesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InqueriesID");

                    b.ToTable("Inqueries", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.InqueriesReply", b =>
                {
                    b.Property<int>("InqueriesReplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InqueriesID")
                        .HasColumnType("int");

                    b.Property<Guid>("InqueriesReplyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSMS")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("InqueriesReplyID");

                    b.HasIndex("InqueriesID");

                    b.HasIndex("UserId");

                    b.ToTable("InqueriesReply", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Property<int>("JobsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("JobsID");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs", "Setting");

                    b.HasData(
                        new
                        {
                            JobsID = 1,
                            CreateDate = new DateTime(2022, 6, 22, 14, 26, 43, 953, DateTimeKind.Local).AddTicks(9298),
                            EnableDate = new DateTime(2022, 6, 22, 14, 26, 43, 954, DateTimeKind.Local).AddTicks(488),
                            IsDeleted = false,
                            IsEnable = true,
                            JobTypeId = 2,
                            JobsGuid = new Guid("7f4e3c04-dd6d-48bd-a75b-bb75496d27df"),
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.Property<int>("KeyWordsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("KeyWordsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("KeyWordsID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.ToTable("KeyWords", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.LogTextMessage", b =>
                {
                    b.Property<int>("LogTextMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSend")
                        .HasColumnType("bit");

                    b.Property<Guid>("LogTextMessageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageReasonId")
                        .HasColumnType("int");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("LogTextMessageID");

                    b.ToTable("LogTextMessage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Property<int>("MainCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainCategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainCategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("MainCategory", "Setting");

                    b.HasData(
                        new
                        {
                            MainCategoryID = 1,
                            CreateDate = new DateTime(2022, 6, 22, 14, 26, 43, 954, DateTimeKind.Local).AddTicks(8984),
                            EnableDate = new DateTime(2022, 6, 22, 14, 26, 43, 955, DateTimeKind.Local).AddTicks(187),
                            IsDeleted = false,
                            IsEnable = true,
                            MainCategoryGuid = new Guid("0927f813-cd60-4913-a3f5-e6ccb38b4243"),
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Property<int>("MainPageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPage", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Property<int>("MainPageDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdeaTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainPageDetailsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MainPageID")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageDetailsID");

                    b.HasIndex("MainPageID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageDetails", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.Property<int>("MainPageImagesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("MainPageDetailsID")
                        .HasColumnType("int");

                    b.Property<Guid>("MainPageImagesGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VedioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainPageImagesID");

                    b.HasIndex("MainPageDetailsID");

                    b.HasIndex("UserId");

                    b.ToTable("MainPageImages", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Property<int>("NationalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("NationalityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("NationalityID");

                    b.HasIndex("UserId");

                    b.ToTable("Nationality", "Setting");

                    b.HasData(
                        new
                        {
                            NationalityID = 1,
                            CreateDate = new DateTime(2022, 6, 22, 14, 26, 43, 948, DateTimeKind.Local).AddTicks(7683),
                            EnableDate = new DateTime(2022, 6, 22, 14, 26, 43, 949, DateTimeKind.Local).AddTicks(177),
                            IsDeleted = false,
                            IsEnable = true,
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            NationalityGuid = new Guid("2704bdc5-7384-4b0a-9343-3c0260e57373"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arrange")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("DescEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("OrderStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderStatusType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("OrderStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PackageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PackageType")
                        .HasColumnType("int");

                    b.Property<decimal>("Percent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Package", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.Property<int>("PaymentConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BanksID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBANnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentConfigurationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAnrdoid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<string>("UserIOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("VendorAndorid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorIOS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentConfigurationID");

                    b.HasIndex("BanksID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentConfiguration", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentStatusGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentStatus", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.Property<int>("PaymentWayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("PaymentWayGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("PaymentWayID");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentWay", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<string>("Zoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UserId");

                    b.ToTable("Region", "Setting");

                    b.HasData(
                        new
                        {
                            RegionID = 1,
                            CountryID = 1,
                            CreateDate = new DateTime(2022, 6, 22, 14, 26, 43, 944, DateTimeKind.Local).AddTicks(4821),
                            EnableDate = new DateTime(2022, 6, 22, 14, 26, 43, 944, DateTimeKind.Local).AddTicks(5997),
                            IsDeleted = false,
                            IsEnable = true,
                            Lat = "",
                            Long = "",
                            NameAR = "الدمام",
                            NameEN = "DMM",
                            Place = "",
                            RegionGuid = new Guid("9e5479ae-ac28-4f32-b770-17d2a27b262c"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Setting.RegionCity", b =>
                {
                    b.Property<int>("RegionCityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("RegionCityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("RegionCityID");

                    b.HasIndex("UserId");

                    b.ToTable("RegionCity", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Property<int>("ShippingCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlockCovered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShippingCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingEnum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ShippingCompanyID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompanyBlocks", b =>
                {
                    b.Property<int>("ShippingCompanyBlocksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<Guid>("ShippingCompanyBlocksGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ShippingCompanyBlocksID");

                    b.HasIndex("BlockID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingCompanyBlocks", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.Property<int>("SliderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayIn")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Guid>("SliderGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SliderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("SliderID");

                    b.HasIndex("UserId");

                    b.ToTable("Slider", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.StatusCompany", b =>
                {
                    b.Property<int>("StatusCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<string>("NameAR")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("ShippingCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("StatusCoId")
                        .HasColumnType("int");

                    b.Property<Guid>("StatusCompanyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusHomeMadeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("StatusCompanyID");

                    b.HasIndex("ShippingCompanyID");

                    b.HasIndex("UserId");

                    b.ToTable("StatusCompany", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Subscribe", b =>
                {
                    b.Property<int>("SubscribeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscribeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscribeID");

                    b.ToTable("Subscribe", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Tokens", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("TokenVal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens", "Setting");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.Property<int>("CartDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CartDetailsGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CartMasterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("deliveryprice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("distanceKM")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartDetailsID");

                    b.HasIndex("CartMasterID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Property<int>("CartMasterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<Guid>("CartMasterGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CartMasterStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Promocode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PromocodeDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("tax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CartMasterID");

                    b.HasIndex("CustomersID");

                    b.ToTable("CartMaster", "Site");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.Property<int>("TempPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionControllerActionID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("TempPermissionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TempPermissionID");

                    b.HasIndex("PermissionControllerActionID");

                    b.HasIndex("RoleId");

                    b.ToTable("TempPermission", "Permission");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserJWTToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2a1d0e8-f1e4-4edd-bd0d-b161073c43d7",
                            Email = "SystemUser@Admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SystemUser@Admin.com",
                            NormalizedUserName = "SYSTEMUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEP65QXLX6e94ehLc9ntv07Q7n/aO6wf8y6j/z15XE7hfgyZLCNvHmM3Ar6SaTwzC3g==",
                            PhoneNumber = "012",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "49b3694c-9984-424b-b788-5493afb543a4",
                            TwoFactorEnabled = false,
                            UserName = "SystemUser",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.Property<int>("EnableHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnableHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("EnableHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("EnableHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DailyQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentsID")
                        .HasColumnType("int");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TimeTakenProcess")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID");

                    b.HasIndex("DepartmentsID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("Product", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductImage", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.Property<int>("ProductQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductQuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.HasKey("ProductQuestionID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserId");

                    b.ToTable("ProductQuestion", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.Property<int>("VacHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<DateTime>("VacFrom")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VacHistoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VacTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VacHistoryID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VacHistory", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorBalance", b =>
                {
                    b.Property<int>("VendorBlanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("After")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Before")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorBlanceGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorBlanceID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("TransactionTypeID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorBalance", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorSupport", b =>
                {
                    b.Property<int>("VendorSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpQuestionsID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderVendorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<Guid>("VendorSupportGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VendorsID")
                        .HasColumnType("int");

                    b.HasKey("VendorSupportID");

                    b.HasIndex("HelpQuestionsID");

                    b.HasIndex("OrderVendorID");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorsID");

                    b.ToTable("VendorSupport", "Vendor");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Property<int>("VendorsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutStoreAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutStoreEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActivityID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BanksID")
                        .HasColumnType("int");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlockID")
                        .HasColumnType("int");

                    b.Property<string>("CRPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CRnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaysVac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntryID")
                        .HasColumnType("int");

                    b.Property<string>("FirstNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDaysVac")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaysWork")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowContact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVac")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaarofNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MonthlyTarget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NationalityID")
                        .HasColumnType("int");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("PickupId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterType")
                        .HasColumnType("int");

                    b.Property<string>("SeconedNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeconedNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserDelete")
                        .HasColumnType("int");

                    b.Property<int?>("UserEnable")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUpdate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VacWorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VacWorkTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VendorsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("WorkFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkingTimes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorsID");

                    b.HasIndex("ActivityID");

                    b.HasIndex("BanksID");

                    b.HasIndex("BlockID");

                    b.HasIndex("CityID");

                    b.HasIndex("NationalityID");

                    b.HasIndex("PackageID");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors", "Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TransactionCard")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCardLog", b =>
                {
                    b.HasOne("Homemade.Model.BankTransaction.TransactionCard", "TransactionCard")
                        .WithMany("TransactionCardLog")
                        .HasForeignKey("TransactionCardTransactionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerFavourites", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.HasOne("Homemade.Model.Setting.AddressTypes", "AddressTypes")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("AddressTypesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CustomerLocation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AddressTypes");

                    b.Navigation("Block");

                    b.Navigation("Customers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Customers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DeliverySetting", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DeliverySetting")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverBlance")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("DriverBlance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("DriverBlance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverBlance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverSupport", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("DriverSupport")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.HelpQuestions", "HelpQuestions")
                        .WithMany("DriverSupport")
                        .HasForeignKey("HelpQuestionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("DriverSupport")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("DriverSupport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Drivers");

                    b.Navigation("HelpQuestions");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Drivers")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Drivers")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.RegionCity", "RegionCity")
                        .WithMany("Drivers")
                        .HasForeignKey("RegionCityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("RegionCity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TranLogSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.TransactionSTCPay", "TransactionSTCPay")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("TransactionSTCPayID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TranLogSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionSTCPay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("TransactionType")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Emp.Employees", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Jobs", "Jobs")
                        .WithMany("Employees")
                        .HasForeignKey("JobsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Jobs");

                    b.Navigation("Nationality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceDetails", b =>
                {
                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceMaster");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceHistory", b =>
                {
                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvoiceHistory")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvoiceMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.ListTransfer", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("ListTransfer")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.InvoiceMaster", "InvoiceMaster")
                        .WithMany("ListTransfer")
                        .HasForeignKey("InvoiceMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ListTransfer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.Notification", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Notification")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.DriverBlance", "DriverBlance")
                        .WithMany("Notification")
                        .HasForeignKey("DriverBlanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("Notification")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderRate", "OrderRate")
                        .WithMany("Notification")
                        .HasForeignKey("OrderRateID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("Notification")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.ProdQuestion", "ProdQuestion")
                        .WithMany("Notification")
                        .HasForeignKey("ProdQuestionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Notification")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("OrderRate");

                    b.Navigation("OrderVendor");

                    b.Navigation("ProdQuestion");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderHistory", b =>
                {
                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderHistory")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderItems", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderNotesAdmin", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderNotesAdmin")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderNotesAdmin")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderPromo")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("OrderPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Orders");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("OrderRate")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderRate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderVendor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("OrderVendor")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("OrderVendor")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("OrderVendor")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("OrderVendor")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderVendor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("OrderVendor")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drivers");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("Package");

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.HasOne("Homemade.Model.Customer.CustomerLocation", "CustomerLocation")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("Orders")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("OrderStatus");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProdQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PromoCode")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequest", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("QuantitiesRequest")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("QuantitiesRequest")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequestProduct", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("QuantitiesRequestProduct")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.QuantitiesRequest", "QuantitiesRequest")
                        .WithMany("QuantitiesRequestProduct")
                        .HasForeignKey("QuantitiesRequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("QuantitiesRequestProduct")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("QuantitiesRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Order.ShipCompanyHistory", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("ShipCompanyHistory")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("ShipCompanyHistory")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderVendor");

                    b.Navigation("ShippingCompany");
                });

            modelBuilder.Entity("Homemade.Model.Order.TabCharge", b =>
                {
                    b.HasOne("Homemade.Model.Customer.CustomerBalance", "CustomerBalance")
                        .WithMany("TabCharge")
                        .HasForeignKey("CustomerBalanceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("TabCharge")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TabCharge")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerBalance");

                    b.Navigation("Customers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Order.TabChargeExLog", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("TabChargeExLog")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Order.Orders", "Orders")
                        .WithMany("TabChargeExLog")
                        .HasForeignKey("OrdersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Order.VendorPromo", b =>
                {
                    b.HasOne("Homemade.Model.Order.PromoCode", "PromoCode")
                        .WithMany("VendorPromo")
                        .HasForeignKey("PromoCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorPromo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorPromo")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Permission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.HasOne("Homemade.Model.PermissionAction", "PermissionActions")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.PermissionController", "PermissionControllers")
                        .WithMany("PermissionControllerActions")
                        .HasForeignKey("PermissionControllerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionActions");

                    b.Navigation("PermissionControllers");
                });

            modelBuilder.Entity("Homemade.Model.RoleConfig", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("RoleConfig")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("RoleConfig")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Activity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("AddressTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Banks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Block")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Block")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Branches", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Branches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CaptainZone", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("CaptainZone")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Driver.Drivers", "Drivers")
                        .WithMany("CaptainZone")
                        .HasForeignKey("DriversID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CaptainZone")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Block");

                    b.Navigation("Drivers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CitiesCovered", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("CitiesCovered")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CitiesCovered")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Region", "Region")
                        .WithMany("City")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("City")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.CompanyWorkingHours", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("CompanyWorkingHours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Configuration", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Configuration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Country")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainCategory", "MainCategory")
                        .WithMany("Departments")
                        .HasForeignKey("MainCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Departments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Discount", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Discount")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("HelpQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.InqueriesReply", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Inqueries", "Inqueries")
                        .WithMany("InqueriesReply")
                        .HasForeignKey("InqueriesID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("InqueriesReply")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Inqueries");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.KeyWords", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("KeyWords")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("KeyWords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Departments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainCategory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPage", "MainPage")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("MainPageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageImages", b =>
                {
                    b.HasOne("Homemade.Model.Setting.MainPageDetails", "MainPageDetails")
                        .WithMany("MainPageImages")
                        .HasForeignKey("MainPageDetailsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("MainPageImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MainPageDetails");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Nationality")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("OrderStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Package")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentConfiguration", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentConfiguration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Banks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentStatus", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentStatus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.PaymentWay", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("PaymentWay")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Country", "Country")
                        .WithMany("Region")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Region")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.RegionCity", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("RegionCity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ShippingCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompanyBlocks", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("ShippingCompanyBlocks")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("ShippingCompanyBlocks")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ShippingCompanyBlocks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Block");

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Slider", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Slider")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Setting.StatusCompany", b =>
                {
                    b.HasOne("Homemade.Model.Setting.ShippingCompany", "ShippingCompany")
                        .WithMany("StatusCompany")
                        .HasForeignKey("ShippingCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("StatusCompany")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShippingCompany");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartDetails", b =>
                {
                    b.HasOne("Homemade.Model.Site.CartMaster", "CartMaster")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartMasterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CartMaster");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.HasOne("Homemade.Model.Customer.Customers", "Customers")
                        .WithMany("CartMaster")
                        .HasForeignKey("CustomersID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Homemade.Model.TempPermission", b =>
                {
                    b.HasOne("Homemade.Model.PermissionControllerAction", "PermissionControllerActions")
                        .WithMany("TempPermission")
                        .HasForeignKey("PermissionControllerActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.CustomRole", "Role")
                        .WithMany("TempPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermissionControllerActions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.EnableHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("EnableHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("EnableHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Departments", "Departments")
                        .WithMany("Product")
                        .HasForeignKey("DepartmentsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Product")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("Product")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductImage", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductImage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.ProductQuestion", b =>
                {
                    b.HasOne("Homemade.Model.Vendor.Product", "Product")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("ProductQuestion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VacHistory", b =>
                {
                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VacHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VacHistory")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorBalance", b =>
                {
                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("VendorBalance")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Driver.TransactionType", "TransactionType")
                        .WithMany("VendorBalance")
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorBalance")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionType");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.VendorSupport", b =>
                {
                    b.HasOne("Homemade.Model.Setting.HelpQuestions", "HelpQuestions")
                        .WithMany("VendorSupport")
                        .HasForeignKey("HelpQuestionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Order.OrderVendor", "OrderVendor")
                        .WithMany("VendorSupport")
                        .HasForeignKey("OrderVendorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("VendorSupport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Vendor.Vendors", "Vendors")
                        .WithMany("VendorSupport")
                        .HasForeignKey("VendorsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HelpQuestions");

                    b.Navigation("OrderVendor");

                    b.Navigation("User");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.HasOne("Homemade.Model.Setting.Activity", "Activity")
                        .WithMany("Vendors")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Banks", "Banks")
                        .WithMany("Vendors")
                        .HasForeignKey("BanksID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Block", "Block")
                        .WithMany("Vendors")
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.City", "City")
                        .WithMany("Vendors")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.Setting.Nationality", "Nationality")
                        .WithMany("Vendors")
                        .HasForeignKey("NationalityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.Setting.Package", "Package")
                        .WithMany("Vendors")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Homemade.Model.User", "User")
                        .WithMany("Vendors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activity");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("City");

                    b.Navigation("Nationality");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Homemade.Model.CustomRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Homemade.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Homemade.Model.BankTransaction.TransactionCard", b =>
                {
                    b.Navigation("TransactionCardLog");
                });

            modelBuilder.Entity("Homemade.Model.CustomRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerBalance", b =>
                {
                    b.Navigation("TabCharge");
                });

            modelBuilder.Entity("Homemade.Model.Customer.CustomerLocation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Homemade.Model.Customer.Customers", b =>
                {
                    b.Navigation("CartMaster");

                    b.Navigation("CustomerBalance");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Notification");

                    b.Navigation("Orders");

                    b.Navigation("ProdQuestion");

                    b.Navigation("TabCharge");

                    b.Navigation("TabChargeExLog");
                });

            modelBuilder.Entity("Homemade.Model.Driver.DriverBlance", b =>
                {
                    b.Navigation("Notification");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.Drivers", b =>
                {
                    b.Navigation("CaptainZone");

                    b.Navigation("DriverBlance");

                    b.Navigation("DriverSupport");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("TransactionSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionSTCPay", b =>
                {
                    b.Navigation("TranLogSTCPay");
                });

            modelBuilder.Entity("Homemade.Model.Driver.TransactionType", b =>
                {
                    b.Navigation("CustomerBalance");

                    b.Navigation("DriverBlance");

                    b.Navigation("VendorBalance");
                });

            modelBuilder.Entity("Homemade.Model.Order.InvoiceMaster", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceHistory");

                    b.Navigation("ListTransfer");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderRate", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.OrderVendor", b =>
                {
                    b.Navigation("CustomerBalance");

                    b.Navigation("DriverBlance");

                    b.Navigation("DriverSupport");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderNotesAdmin");

                    b.Navigation("OrderRate");

                    b.Navigation("ShipCompanyHistory");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Order.Orders", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("OrderVendor");

                    b.Navigation("TabCharge");

                    b.Navigation("TabChargeExLog");

                    b.Navigation("TransactionCard");
                });

            modelBuilder.Entity("Homemade.Model.Order.ProdQuestion", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Homemade.Model.Order.PromoCode", b =>
                {
                    b.Navigation("OrderPromo");

                    b.Navigation("Orders");

                    b.Navigation("VendorPromo");
                });

            modelBuilder.Entity("Homemade.Model.Order.QuantitiesRequest", b =>
                {
                    b.Navigation("QuantitiesRequestProduct");
                });

            modelBuilder.Entity("Homemade.Model.PermissionAction", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionController", b =>
                {
                    b.Navigation("PermissionControllerActions");
                });

            modelBuilder.Entity("Homemade.Model.PermissionControllerAction", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RoleConfig");

                    b.Navigation("TempPermission");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Activity", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.AddressTypes", b =>
                {
                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Banks", b =>
                {
                    b.Navigation("ListTransfer");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Block", b =>
                {
                    b.Navigation("CaptainZone");

                    b.Navigation("CustomerLocation");

                    b.Navigation("ShippingCompanyBlocks");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.City", b =>
                {
                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("CitiesCovered");

                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("ShippingCompany");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Country", b =>
                {
                    b.Navigation("Region");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Departments", b =>
                {
                    b.Navigation("KeyWords");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Homemade.Model.Setting.HelpQuestions", b =>
                {
                    b.Navigation("DriverSupport");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Inqueries", b =>
                {
                    b.Navigation("InqueriesReply");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Jobs", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainCategory", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPage", b =>
                {
                    b.Navigation("MainPageDetails");
                });

            modelBuilder.Entity("Homemade.Model.Setting.MainPageDetails", b =>
                {
                    b.Navigation("MainPageImages");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Nationality", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Drivers");

                    b.Navigation("Employees");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.OrderStatus", b =>
                {
                    b.Navigation("OrderHistory");

                    b.Navigation("Orders");

                    b.Navigation("OrderVendor");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Package", b =>
                {
                    b.Navigation("OrderVendor");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Homemade.Model.Setting.Region", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Homemade.Model.Setting.RegionCity", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Homemade.Model.Setting.ShippingCompany", b =>
                {
                    b.Navigation("OrderVendor");

                    b.Navigation("ShipCompanyHistory");

                    b.Navigation("ShippingCompanyBlocks");

                    b.Navigation("StatusCompany");
                });

            modelBuilder.Entity("Homemade.Model.Site.CartMaster", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Homemade.Model.User", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("AddressTypes");

                    b.Navigation("Banks");

                    b.Navigation("Block");

                    b.Navigation("Branches");

                    b.Navigation("CaptainZone");

                    b.Navigation("CitiesCovered");

                    b.Navigation("City");

                    b.Navigation("CompanyWorkingHours");

                    b.Navigation("Configuration");

                    b.Navigation("Country");

                    b.Navigation("CustomerBalance");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Customers");

                    b.Navigation("DeliverySetting");

                    b.Navigation("Departments");

                    b.Navigation("Discount");

                    b.Navigation("DriverBlance");

                    b.Navigation("Drivers");

                    b.Navigation("DriverSupport");

                    b.Navigation("Employees");

                    b.Navigation("EnableHistory");

                    b.Navigation("HelpQuestions");

                    b.Navigation("InqueriesReply");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Jobs");

                    b.Navigation("KeyWords");

                    b.Navigation("ListTransfer");

                    b.Navigation("MainCategory");

                    b.Navigation("MainPage");

                    b.Navigation("MainPageDetails");

                    b.Navigation("MainPageImages");

                    b.Navigation("Nationality");

                    b.Navigation("Notification");

                    b.Navigation("OrderHistory");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderNotesAdmin");

                    b.Navigation("OrderPromo");

                    b.Navigation("OrderRate");

                    b.Navigation("Orders");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderVendor");

                    b.Navigation("Package");

                    b.Navigation("PaymentConfiguration");

                    b.Navigation("PaymentStatus");

                    b.Navigation("PaymentWay");

                    b.Navigation("ProdQuestion");

                    b.Navigation("Product");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");

                    b.Navigation("PromoCode");

                    b.Navigation("QuantitiesRequest");

                    b.Navigation("QuantitiesRequestProduct");

                    b.Navigation("Region");

                    b.Navigation("RegionCity");

                    b.Navigation("ShippingCompany");

                    b.Navigation("ShippingCompanyBlocks");

                    b.Navigation("Slider");

                    b.Navigation("StatusCompany");

                    b.Navigation("TranLogSTCPay");

                    b.Navigation("TransactionSTCPay");

                    b.Navigation("TransactionType");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorPromo");

                    b.Navigation("Vendors");

                    b.Navigation("VendorSupport");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("CustomerFavourites");

                    b.Navigation("OrderItems");

                    b.Navigation("ProdQuestion");

                    b.Navigation("ProductImage");

                    b.Navigation("ProductQuestion");

                    b.Navigation("QuantitiesRequestProduct");
                });

            modelBuilder.Entity("Homemade.Model.Vendor.Vendors", b =>
                {
                    b.Navigation("EnableHistory");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("Notification");

                    b.Navigation("OrderVendor");

                    b.Navigation("Product");

                    b.Navigation("QuantitiesRequest");

                    b.Navigation("VacHistory");

                    b.Navigation("VendorBalance");

                    b.Navigation("VendorPromo");

                    b.Navigation("VendorSupport");
                });
#pragma warning restore 612, 618
        }
    }
}
